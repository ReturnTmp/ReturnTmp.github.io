<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 配置 Jetpack Compose 环境</title>
    <url>/2023/04/07/Android%E9%85%8D%E7%BD%AEJetpack-Compose%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>记录配置Jetpack Compose环境的一些坑~</p>
</blockquote>
<p>直接创建kotlin项目或创建java项目后再配置均可</p>
<span id="more"></span>

<h5 id="根目录-build-gradle"><a href="#根目录-build-gradle" class="headerlink" title="根目录 build.gradle"></a>根目录 build.gradle</h5><h6 id="配置kotlin环境构建脚本"><a href="#配置kotlin环境构建脚本" class="headerlink" title="配置kotlin环境构建脚本"></a>配置kotlin环境构建脚本</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">&#x27;1.4.32&#x27;</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：里面的kotlin版本需要和自己的 gradle 版本 对应的Compose Complier版本适配，如果不适配，build时会提示适配版本，然后改为相应版本即可</p>
</blockquote>
<h6 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span> version <span class="string">&#x27;7.1.2&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">    id <span class="string">&#x27;com.android.library&#x27;</span> version <span class="string">&#x27;7.1.2&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>apply false</code> 意味着这些插件不会被应用到当前项目中。但是，这里为这些插件指定版本号是有用的，因为在子项目中应用这些插件时，Gradle 将会根据指定的版本号下载和使用相应的插件。如果不指定版本号，Gradle 将会默认使用最新版本的插件，这可能会导致不可预期的问题。</p>
<h4 id="app-子模块"><a href="#app-子模块" class="headerlink" title="app 子模块"></a>app 子模块</h4><h5 id="build-gradle-中添加"><a href="#build-gradle-中添加" class="headerlink" title="build.gradle 中添加"></a>build.gradle 中添加</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;kotlin-android&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里面会指定添加插件kotlin-android的最新版本，但是没有指定版本可能会造成错误</p>
</blockquote>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;kotlin-android&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;org.jetbrains.kotlin.android&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面两种写法是影响作用相同，但是推荐使用第一种，因为它更加清晰和简洁，同时也便于维护和修改。第二种方式虽然也能实现同样的功能，但是需要指定更多的插件，并且代码看起来比较冗长。</p>
</blockquote>
<h6 id="Q-但是为什么使用apply时为什么没有指定”org-jetbrains“，这不会造成错误吗"><a href="#Q-但是为什么使用apply时为什么没有指定”org-jetbrains“，这不会造成错误吗" class="headerlink" title="Q:但是为什么使用apply时为什么没有指定”org.jetbrains“，这不会造成错误吗"></a>Q:但是为什么使用apply时为什么没有指定”org.jetbrains“，这不会造成错误吗</h6><p>在使用 <code>apply plugin</code> 声明插件时，通常可以省略掉插件 ID 中的 <code>org.jetbrains</code>，因为 Gradle 默认会搜索 <code>gradle.plugin.org.jetbrains</code> 命名空间下的插件，所以使用 <code>id &#39;kotlin-android&#39;</code> 或 <code>id &#39;org.jetbrains.kotlin.android&#39;</code> 都是可以的，因为 Gradle 会将它们都解析成 <code>gradle.plugin.org.jetbrains.kotlin.android</code>。</p>
<p>实际上，Gradle 支持三种插件 ID 声明方式：<code>id &#39;pluginId&#39;</code>、<code>id &#39;namespace:pluginId&#39;</code> 和 <code>id &quot;namespace:pluginId&quot; version &quot;version&quot;</code>。其中第一种方式会自动搜索 <code>gradle.plugin</code> 和 <code>org.gradle.plugin</code> 命名空间下的插件，所以可以省略命名空间。</p>
<h6 id="开启-Compose"><a href="#开启-Compose" class="headerlink" title="开启 Compose"></a>开启 Compose</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">	buildFeatures &#123;</span><br><span class="line">    	setCompose(<span class="literal">true</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="keyword">def</span> compose_version = <span class="string">&quot;1.0.4&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;androidx.compose.ui:ui:$compose_version&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;androidx.compose.material:material:$compose_version&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;androidx.compose.ui:ui-tooling-preview:$compose_version&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;androidx.activity:activity-compose:1.3.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面的1.0.4版本也需要试着看</p>
<p>若是需要使用@Preview还需添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&quot;androidx.compose.ui:ui-tooling:$compose_version&quot;</span></span><br></pre></td></tr></table></figure>

<h6 id="MainActivity-kt"><a href="#MainActivity-kt" class="headerlink" title="MainActivity.kt"></a>MainActivity.kt</h6><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.returntmp.dpfk</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> androidx.activity.ComponentActivity</span><br><span class="line"><span class="keyword">import</span> androidx.activity.compose.setContent</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material.Text</span><br><span class="line"><span class="keyword">import</span> androidx.compose.runtime.Composable</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.tooling.preview.Preview</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line"><span class="comment">//            Text(&quot;Hello world!&quot;)</span></span><br><span class="line">            MessageCard(<span class="string">&quot;Android&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MessageCard</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    Text(text = <span class="string">&quot;Hello <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PreviewMessageCard</span><span class="params">()</span></span> &#123;</span><br><span class="line">    MessageCard(<span class="string">&quot;Android&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>manifest.xml 添加启动activity配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>遇到问题，可以先clean下再rebuild</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230407221712258.png" alt="image-20230407221712258"></p>
<p>或是直接清除缓存重启</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230407221758389.png" alt="image-20230407221758389"></p>
<p>不行的话自行google~</p>
<h6 id="之后教程大家看官网即可：Android-Compose-教程"><a href="#之后教程大家看官网即可：Android-Compose-教程" class="headerlink" title="之后教程大家看官网即可：Android Compose 教程 "></a>之后教程大家看官网即可：<a href="https://developer.android.google.cn/jetpack/compose/tutorial?hl=zh-cn">Android Compose 教程 </a></h6><p><em>当然国内用户build过慢可以换源或是科学上网，这里不赘述~</em></p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 杂谈（Ubuntu）</title>
    <url>/2023/04/24/Linux-%E6%9D%82%E8%B0%88%EF%BC%88Ubuntu%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>linux 学习笔记 :）</p>
</blockquote>
<span id="more"></span>



<h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p>&#x2F;bin - 存放基本命令文件，通常包含一些基本的系统管理员和普通用户使用的程序，如ls, cp, mv等。</p>
<p>&#x2F;home - 存放用户的家目录，新添加的每个用户都有一个独立的目录。</p>
<p>&#x2F;lib - 存放系统共享库和内核模块，系统运行时基于这些库进行动态链接。</p>
<p>&#x2F;media - 存放可移动媒体设备的挂载点。</p>
<p>&#x2F;mnt - 存放临时挂载的文件系统。</p>
<p>&#x2F;opt - 存放可以选择安装的软件和应用程序。</p>
<p>&#x2F;proc - 存放内存中的虚拟文件系统，在访问该目录下的文件时，可以获取系统运行时的关键参数。</p>
<p>&#x2F;root - 根用户的家目录。</p>
<p>&#x2F;run - 运行时数据，如系统启动后运行的进程，网络信息等。</p>
<p>&#x2F;sbin - 存放管理员使用的系统管理命令。</p>
<p>&#x2F;srv - 存放相关的服务数据，如网站数据，FTP服务器数据等。</p>
<p>&#x2F;sys - 存放系统设备文件树，是Linux中的虚拟文件系统。</p>
<p>&#x2F;tmp - 存放临时文件，通常由系统或应用程序创建。</p>
<p>&#x2F;usr - 存放应用程序和相关数据，如应用程序、库、源代码等。</p>
<ul>
<li>&#x2F;usr&#x2F;bin：系统用户使用的应用程序。</li>
<li>&#x2F;usr&#x2F;sbin：超级用户使用的比较高级的管理程序和系统守护程序。</li>
<li>&#x2F;usr&#x2F;src：内核源代码默认的放置目录。</li>
</ul>
<p>&#x2F;var - 存放系统运行时记录，如日志文件、缓冲文件等。</p>
<p><img src="C:\Users\86150\AppData\Roaming\Typora\typora-user-images\image-20230424150914606.png" alt="image-20230424150914606"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 部署 ubuntu 关键点（持续补充中）</title>
    <url>/2023/04/19/vmware-%E9%83%A8%E7%BD%B2-ubuntu20-4/</url>
    <content><![CDATA[<div
  style="
    display: flex;
    justify-content: left;
    align-items: center;
    flex-wrap: wrap;
  "
>
  <div style="height: 100px; width: 200px">
    <img
      src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230511210038935.png"
      style="width: 100%; height: 100%"
    />
  </div>
  <div style="margin-left: 20px; margin-top: 5px; line-height: 10px">
    <p>本文主要是记录博主在使用配置VMware配置ubuntu20.04虚拟机中的关键点</p>
    <p>注意：本文不是零基础配置虚拟机的教程</p>
  </div>
</div>







<span id="more"></span>

<h4 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h4><h5 id="编辑虚拟机设置"><a href="#编辑虚拟机设置" class="headerlink" title="编辑虚拟机设置"></a>编辑虚拟机设置</h5><blockquote>
<p>需要保证虚拟机为关机状态，否则无法编辑</p>
</blockquote>
<p>网络设置为NAT模式</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230419164139586.png" alt="image-20230419164139586"></p>
<p>进入编辑中虚拟网络设置器，点击还原默认配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230420093200219.png" alt="image-20230420093200219"></p>
<p>但是因为博主将vmware移动过磁盘并且卸载重装过，所以注册表和磁盘中出现残留，导致没有vmnet8的网络适配器，进行上述操作后仍旧无法联网，所以直接彻底清除后再下载，以下是相关链接</p>
<p><a href="https://blog.csdn.net/KRISNAT/article/details/124107032?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-10-124107032-blog-114172527.235%5Ev31%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-10-124107032-blog-114172527.235%5Ev31%5Epc_relevant_default_base3&utm_relevant_index=18">完美解决VMware安装后没有VMnet1和VMnet8的问题_虚拟机没有vment1和8-CSDN博客</a></p>
<p>之后卸载重装虚拟机和主机都可以ping通，但是重启之后使用<code>ifconfig</code>发现没有ens33网卡，需要重新配置并启动ens33，依次执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dhclient ens33 </span><br><span class="line">sudo ifconfig ens33</span><br></pre></td></tr></table></figure>

<p>但是每次重启后ens33都需要重启（可能是因为我的vmwave安在外接磁盘中，断开即会使得网卡失效），因此需要写一个设置脚本，并设置开机自启动</p>
<p><code>cd /etc/init.d/ &amp;&amp; touch initens33.sh &amp;&amp; chmod +x initens33.sh &amp;&amp; vim initens33.sh </code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo dhclient ens33</span><br><span class="line">sudo ifconfig ens33</span><br></pre></td></tr></table></figure>

<p><code>vim /etc/rc.local</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/initens33.sh</span><br></pre></td></tr></table></figure>







<h4 id="全屏设置"><a href="#全屏设置" class="headerlink" title="全屏设置"></a>全屏设置</h4><p>执行<code>sudo apt-get install open-vm-tools</code></p>
<h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><h5 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h5><p>相关链接：<a href="https://blog.csdn.net/weixin_45484297/article/details/103005370">Ubuntu18图形界面换源</a></p>
<h5 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h5><p>清华镜像仓库及指南（挑选适配自己版本的进行配置）：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>
<h4 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h4><p>安装<code>sudo apt-get install openssh-server -y &amp;&amp; sudo apt-get install openssh-client -y</code></p>
<p>设置UFW防火墙允许ssh通过<code>sudo ufw allow ssh</code>或是直接禁用防火墙<code>sudo ufw disable</code></p>
<p>设置ssh允许密码登录，执行<code>sudo vim /etc/ssh/ssh_config</code> 修改ssh客户端配置文件，添加 <code>PasswordAuthentication yes</code></p>
<p>ssh连接，将 <strong>用户名</strong>（<code>username</code>）改为你的系统上的实际用户名，并将 <strong>地址</strong>（<code>address</code>）改为你服务器的 IP 地址。<code>ssh username@address</code></p>
<p>查看ip：执行<code>ifconfig</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230420102829615.png" alt="image-20230420102829615"></p>
<p>相关命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启ssh开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> ssh</span><br><span class="line"><span class="comment"># 关闭ssh开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> ssh</span><br><span class="line"><span class="comment"># 单次开启ssh </span></span><br><span class="line">sudo systemctl start ssh</span><br><span class="line"><span class="comment"># 单次关闭ssh</span></span><br><span class="line">sudo systemctl stop ssh</span><br><span class="line"><span class="comment"># 查看ssh状态</span></span><br><span class="line">sudo systemctl status ssh</span><br></pre></td></tr></table></figure>



<blockquote>
<p>以上相关配置之前需要先执行<code>sudo apt update &amp;&amp; sudo apt upgrade</code> 并且最好切换到root用户</p>
</blockquote>
<h4 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h4><p>ubuntu默认的root用户是没有固定密码的，它的密码是随机产生并且动态改变的，即每次开机都有一个新的root密码，如果想查看root密码，那么直接输入<code>sudo passwd root</code>设置的root密码即可。</p>
<p>但是ubuntu使用Xftp、Xshell连接时，ssh服务器拒绝访问。一直显示输入密码，这是由于sshd的设置不允许root用户使用密码进行远程登录。</p>
<p>保证ssh开启的情况下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改ssh服务端配置文件</span></span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#PermitRootLogin prohibit-password 改为</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：最后需要执行<code>sudo systemctl restart ssh</code>重启才能使配置修改生效</p>
</blockquote>
<p><em>现在即可使用root用户进行远程ssh密码登录</em></p>
<h4 id="VMware-关闭自动熄屏"><a href="#VMware-关闭自动熄屏" class="headerlink" title="VMware 关闭自动熄屏"></a>VMware 关闭自动熄屏</h4><p>相关文章：<a href="https://blog.csdn.net/cuichongxin/article/details/108377721">vmwareworkstation的linux虚拟机关闭屏保【自动锁屏】</a></p>
<h4 id="配置Miniconda环境"><a href="#配置Miniconda环境" class="headerlink" title="配置Miniconda环境"></a>配置Miniconda环境</h4><h6 id="官网：Miniconda-—-conda-documentation"><a href="#官网：Miniconda-—-conda-documentation" class="headerlink" title="官网：Miniconda — conda documentation"></a>官网：<a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda — conda documentation</a></h6><p>下载安装脚本后执行<code>bash Miniconda3-latest-Linux-x86_64.sh</code>一直回车（遇到more可以使用空格翻页），遇到输入yes or no 输入yes回车</p>
<h6 id="切换国内清华源"><a href="#切换国内清华源" class="headerlink" title="切换国内清华源"></a>切换国内清华源</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br></pre></td></tr></table></figure>

<h6 id="切换默认源：conda-config-remove-key-channels"><a href="#切换默认源：conda-config-remove-key-channels" class="headerlink" title="切换默认源：conda config --remove-key channels"></a>切换默认源：<code>conda config --remove-key channels</code></h6><h6 id="pip-换源"><a href="#pip-换源" class="headerlink" title="pip 换源"></a>pip 换源</h6><p>临时：<code>pip install ***  -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<p>永久：<code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230425161010662.png" alt="image-20230425161010662"></p>
<p>最后执行<code>source .bashrc</code>激活环境</p>
<p>这里讲下ubuntu中的环境变量配置，我们从miniconda的安装过程中可以看到环境变量配置到了<code>~/.bashrc</code>中</p>
<ol>
<li><code>~/.bashrc</code> 文件中，这个文件用于每次开启新的 Terminal 时被读取，可以将环境变量添加到末尾；</li>
<li><code>~/.profile</code> 文件中，在登录系统时被读取，可以将环境变量添加到末尾；</li>
<li><code>/etc/profile</code> 文件中，系统级环境变量可以将环境变量添加到末尾。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230424173759423.png" alt="image-20230424173759423"></p>
<h6 id="常见命令官方使用文档：Getting-started-with-conda-—-conda-0-0-0-dev0-placeholder-documentation"><a href="#常见命令官方使用文档：Getting-started-with-conda-—-conda-0-0-0-dev0-placeholder-documentation" class="headerlink" title="常见命令官方使用文档：Getting started with conda — conda 0.0.0.dev0+placeholder documentation"></a>常见命令官方使用文档：<a href="https://conda.io/projects/conda/en/latest/user-guide/getting-started.html">Getting started with conda — conda 0.0.0.dev0+placeholder documentation</a></h6><blockquote>
<p>由于博主是因为实验中必须使用图形界面所以必须在vmware中配置，如果只是使用终端则推荐使用wsl</p>
<p>官方教程及安装指南：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands">WSL 的基本命令 | Microsoft Learn</a></p>
</blockquote>
<h4 id="WSL-安装问题"><a href="#WSL-安装问题" class="headerlink" title="WSL 安装问题"></a>WSL 安装问题</h4><h6 id="raw-githubusercontent-com-无法访问：解决raw-githubusercontent-com无法访问的问题-哇咔君i的博客-CSDN博客"><a href="#raw-githubusercontent-com-无法访问：解决raw-githubusercontent-com无法访问的问题-哇咔君i的博客-CSDN博客" class="headerlink" title="raw.githubusercontent.com 无法访问：解决raw.githubusercontent.com无法访问的问题_哇咔君i的博客-CSDN博客"></a>raw.githubusercontent.com 无法访问：<a href="https://blog.csdn.net/weixin_44293949/article/details/121863559">解决raw.githubusercontent.com无法访问的问题_哇咔君i的博客-CSDN博客</a></h6>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Neovim 配置教程</title>
    <url>/2023/05/01/Neovim-%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>环境：Ubuntu 20.04 </p>
<p>宿主机：windows （windows terminal）WSL2</p>
<p>NVIM：v0.10.0-dev</p>
<p>配置Neovim 需要保证流畅的github环境（以便于快速拉取插件），可以使用代理或是配置Github SSH key</p>
</blockquote>
<span id="more"></span>



<p>本篇博客是学习掘金小册的学习笔记，有兴趣的朋友可以直接点击下文链接购买</p>
<p>小册链接：<a href="https://juejin.cn/book/7051157342770954277">Neovim 配置实战：从0到1打造自己的IDE - nshen - 掘金小册 (juejin.cn)</a></p>
<h3 id="配置文件整体结构"><a href="#配置文件整体结构" class="headerlink" title="配置文件整体结构"></a>配置文件整体结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── init.lua</span><br><span class="line">└── lua</span><br><span class="line">    ├── autocmds.lua</span><br><span class="line">    ├── basic.lua</span><br><span class="line">    ├── colorscheme.lua</span><br><span class="line">    ├── keybindings.lua</span><br><span class="line">    ├── lsp</span><br><span class="line">    │   ├── cmp.lua</span><br><span class="line">    │   ├── config</span><br><span class="line">    │   │   ├── bash.lua</span><br><span class="line">    │   │   ├── emmet.lua</span><br><span class="line">    │   │   ├── html.lua</span><br><span class="line">    │   │   ├── json.lua</span><br><span class="line">    │   │   ├── lua.lua</span><br><span class="line">    │   │   ├── markdown.lua</span><br><span class="line">    │   │   ├── pyright.lua</span><br><span class="line">    │   │   ├── rust.lua</span><br><span class="line">    │   │   └── ts.lua</span><br><span class="line">    │   ├── formatter.lua</span><br><span class="line">    │   ├── null-ls.lua</span><br><span class="line">    │   ├── setup.lua</span><br><span class="line">    │   └── ui.lua</span><br><span class="line">    ├── plugin-config</span><br><span class="line">    │   ├── bufferline.lua</span><br><span class="line">    │   ├── comment.lua</span><br><span class="line">    │   ├── dashboard.lua</span><br><span class="line">    │   ├── gitsigns.lua</span><br><span class="line">    │   ├── indent-blankline.lua</span><br><span class="line">    │   ├── lualine.lua</span><br><span class="line">    │   ├── nvim-autopairs.lua</span><br><span class="line">    │   ├── nvim-tree.lua</span><br><span class="line">    │   ├── nvim-treesitter.lua</span><br><span class="line">    │   ├── project.lua</span><br><span class="line">    │   ├── surround.lua</span><br><span class="line">    │   ├── telescope.lua</span><br><span class="line">    │   ├── toggleterm.lua</span><br><span class="line">    │   ├── vimspector.lua</span><br><span class="line">    │   └── which-key.lua</span><br><span class="line">    ├── plugins.lua</span><br><span class="line">    └── utils</span><br><span class="line">        ├── fix-yank.lua</span><br><span class="line">        ├── global.lua</span><br><span class="line">        └── im-select.lua</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>首先 <strong>init.lua</strong> 是整个配置的入口文件，负责引用所有其他的模块，基本上想要打开或关闭某个插件只要在这里修改一行代码即可。</p>
<ul>
<li><p><strong>basic.lua：</strong> 基础配置，是对默认配置的一个重置。</p>
</li>
<li><p><strong>colorscheme.lua：</strong> 我们安装的主题皮肤配置，在这里切换主题。</p>
</li>
<li><p><strong>keybindings.lua：</strong> 快捷键的设置，所有插件的快捷键也都会放在这里。</p>
</li>
<li><p><strong>plugins.lua：</strong> 插件安装管理，插件安装或卸载全在这里设置。</p>
</li>
<li><p>lsp 文件夹：</p>
<p>是对 Neovim 内置 LSP 功能的配置，包括常见编程语言与语法提示等。</p>
<ul>
<li><strong>config</strong> <strong>：</strong> 文件夹包含各种语言服务器单独的配置文件。</li>
<li><strong>setup.lua</strong> <strong>：</strong> 内置 LSP 的配置。</li>
<li><strong>cmp.lua</strong> <strong>：</strong> 语法自动补全补全的配置，包括各种补全源，与自定义代码段。</li>
<li><strong>ui.lua：</strong> 对内置 LSP 功能增强和 UI 美化。</li>
<li><strong>formatter.lua：</strong> 独立代码格式化功能。</li>
</ul>
</li>
<li><p><strong>plugin-config 文件夹：</strong> 是对第三方插件的配置，未来每添加一个插件，这里就多一个配置文件。</p>
</li>
<li><p><strong>utils 文件夹：</strong> 是对常见问题的修改，包括输入法切换，针对 windows 的特殊配置等。</p>
</li>
</ul>
<h4 id="配置-Nerd-Fonts"><a href="#配置-Nerd-Fonts" class="headerlink" title="配置 Nerd Fonts"></a>配置 Nerd Fonts</h4><p>官网：<a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts - Iconic font aggregator, glyphs&#x2F;icons collection, &amp; fonts patcher</a></p>
<p>下载字体文件<code>FiraCodeNerdFont-Regular.ttf</code>下载之后双击ttf文件点击安装即可添加到系统字体文件中</p>
<p>配置步骤：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230502100537624.png" alt="image-20230502100537624"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230502100559247.png" alt="image-20230502100559247"></p>
<p>最后点击保存</p>
<h3 id="安装-Neovim"><a href="#安装-Neovim" class="headerlink" title="安装 Neovim"></a>安装 Neovim</h3><p>旧版本卸载：<code>sudo apt-get remove neovim </code></p>
<p>官网：<a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">Installing Neovim · neovim&#x2F;neovim Wiki (github.com)</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:neovim-ppa/unstable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install neovim</span><br></pre></td></tr></table></figure>

<p>执行<code>nvim --version</code>，确保版本必须为 <strong>0.7</strong> 及以上。</p>
<p>执行<code>nvim ~/.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> vim=<span class="string">&#x27;nvim&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">&#x27;nvim&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> v=<span class="string">&#x27;nvim&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行<code>source ~/.bashrc</code>重新加载配置文件</p>
<h4 id="配置入口-init-lua"><a href="#配置入口-init-lua" class="headerlink" title="配置入口 init.lua"></a>配置入口 init.lua</h4><p><code>~/.config/nvim/init.lua</code> 写入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 基础设置</span><br><span class="line">require(<span class="string">&#x27;basic&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>require</code> 函数在 Lua 中用于加载一个模块，而这些模块通常位于 <code>runtimepath</code> 中的 <code>lua/</code> 目录下，也就是我们的 <code>~/.config/nvim/lua/</code> 目录。</p>
<p>所以上边的代码，就是加载 <code>~/.config/nvim/lua/basic.lua</code> 文件（注意：require 里没有 <code>.lua</code> 扩展名）。当然也可以创建 <code>~/.config/nvim/lua/basic/</code> 目录，在目录下边创建 <code>init.lua</code> 文件也是可以成功加载的。</p>
<p>创建基础配置文件<code>~/.config/nvim/lua/basic.lua</code>，并添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- utf8</span><br><span class="line">vim.g.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">vim.o.fileencoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">-- jkhl 移动时光标周围保留8行</span><br><span class="line">vim.o.scrolloff = 8</span><br><span class="line">vim.o.sidescrolloff = 8</span><br><span class="line">-- 使用相对行号</span><br><span class="line">vim.wo.number = <span class="literal">true</span></span><br><span class="line">vim.wo.relativenumber = <span class="literal">true</span></span><br><span class="line">-- 高亮所在行</span><br><span class="line">vim.wo.cursorline = <span class="literal">true</span></span><br><span class="line">-- 显示左侧图标指示列</span><br><span class="line">vim.wo.signcolumn = <span class="string">&quot;yes&quot;</span></span><br><span class="line">-- 右侧参考线，超过表示代码太长了，考虑换行</span><br><span class="line">vim.wo.colorcolumn = <span class="string">&quot;80&quot;</span></span><br><span class="line">-- 缩进2个空格等于一个Tab</span><br><span class="line">vim.o.tabstop = 2</span><br><span class="line">vim.bo.tabstop = 2</span><br><span class="line">vim.o.softtabstop = 2</span><br><span class="line">vim.o.shiftround = <span class="literal">true</span></span><br><span class="line">-- &gt;&gt; &lt;&lt; 时移动长度</span><br><span class="line">vim.o.shiftwidth = 2</span><br><span class="line">vim.bo.shiftwidth = 2</span><br><span class="line">-- 空格替代tab</span><br><span class="line">vim.o.expandtab = <span class="literal">true</span></span><br><span class="line">vim.bo.expandtab = <span class="literal">true</span></span><br><span class="line">-- 新行对齐当前行</span><br><span class="line">vim.o.autoindent = <span class="literal">true</span></span><br><span class="line">vim.bo.autoindent = <span class="literal">true</span></span><br><span class="line">vim.o.smartindent = <span class="literal">true</span></span><br><span class="line">-- 搜索大小写不敏感，除非包含大写</span><br><span class="line">vim.o.ignorecase = <span class="literal">true</span></span><br><span class="line">vim.o.smartcase = <span class="literal">true</span></span><br><span class="line">-- 搜索不要高亮</span><br><span class="line">vim.o.hlsearch = <span class="literal">false</span></span><br><span class="line">-- 边输入边搜索</span><br><span class="line">vim.o.incsearch = <span class="literal">true</span></span><br><span class="line">-- 命令行高为2，提供足够的显示空间</span><br><span class="line">vim.o.cmdheight = 2</span><br><span class="line">-- 当文件被外部程序修改时，自动加载</span><br><span class="line">vim.o.autoread = <span class="literal">true</span></span><br><span class="line">vim.bo.autoread = <span class="literal">true</span></span><br><span class="line">-- 禁止折行</span><br><span class="line">vim.wo.wrap = <span class="literal">false</span></span><br><span class="line">-- 光标在行首尾时&lt;Left&gt;&lt;Right&gt;可以跳到下一行</span><br><span class="line">vim.o.whichwrap = <span class="string">&#x27;&lt;,&gt;,[,]&#x27;</span></span><br><span class="line">-- 允许隐藏被修改过的buffer</span><br><span class="line">vim.o.hidden = <span class="literal">true</span></span><br><span class="line">-- 鼠标支持</span><br><span class="line">vim.o.mouse = <span class="string">&quot;a&quot;</span></span><br><span class="line">-- 禁止创建备份文件</span><br><span class="line">vim.o.backup = <span class="literal">false</span></span><br><span class="line">vim.o.writebackup = <span class="literal">false</span></span><br><span class="line">vim.o.swapfile = <span class="literal">false</span></span><br><span class="line">-- smaller updatetime</span><br><span class="line">vim.o.updatetime = 300</span><br><span class="line">-- 设置 timeoutlen 为等待键盘快捷键连击时间500毫秒，可根据需要设置</span><br><span class="line">vim.o.timeoutlen = 500</span><br><span class="line">-- <span class="built_in">split</span> window 从下边和右边出现</span><br><span class="line">vim.o.splitbelow = <span class="literal">true</span></span><br><span class="line">vim.o.splitright = <span class="literal">true</span></span><br><span class="line">-- 自动补全不自动选中</span><br><span class="line">vim.g.completeopt = <span class="string">&quot;menu,menuone,noselect,noinsert&quot;</span></span><br><span class="line">-- 样式</span><br><span class="line">vim.o.background = <span class="string">&quot;dark&quot;</span></span><br><span class="line">vim.o.termguicolors = <span class="literal">true</span></span><br><span class="line">vim.opt.termguicolors = <span class="literal">true</span></span><br><span class="line">-- 不可见字符的显示，这里只把空格显示为一个点</span><br><span class="line">vim.o.list = <span class="literal">true</span></span><br><span class="line">vim.o.listchars = <span class="string">&quot;space:·&quot;</span></span><br><span class="line">-- 补全增强</span><br><span class="line">vim.o.wildmenu = <span class="literal">true</span></span><br><span class="line">-- Dont<span class="string">&#x27; pass messages to |ins-completin menu|</span></span><br><span class="line"><span class="string">vim.o.shortmess = vim.o.shortmess .. &#x27;</span>c<span class="string">&#x27;</span></span><br><span class="line"><span class="string">-- 补全最多显示10行</span></span><br><span class="line"><span class="string">vim.o.pumheight = 10</span></span><br><span class="line"><span class="string">-- 永远显示 tabline</span></span><br><span class="line"><span class="string">vim.o.showtabline = 2</span></span><br><span class="line"><span class="string">-- 使用增强状态栏插件后不再需要 vim 的模式提示</span></span><br><span class="line"><span class="string">vim.o.showmode = false</span></span><br></pre></td></tr></table></figure>



<h3 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h3><p>创建<code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim.g.mapleader = <span class="string">&quot; &quot;</span></span><br><span class="line">vim.g.maplocalleader = <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> map = vim.api.nvim_set_keymap</span><br><span class="line">-- 复用 opt 参数</span><br><span class="line"><span class="built_in">local</span> opt = &#123;noremap = <span class="literal">true</span>, silent = <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">-- 取消 s 默认功能</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;&quot;</span>, opt)</span><br><span class="line">-- windows 分屏快捷键</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sv&quot;</span>, <span class="string">&quot;:vsp&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;:sp&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 关闭当前</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sc&quot;</span>, <span class="string">&quot;&lt;C-w&gt;c&quot;</span>, opt)</span><br><span class="line">-- 关闭其他</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;so&quot;</span>, <span class="string">&quot;&lt;C-w&gt;o&quot;</span>, opt)</span><br><span class="line">-- Alt + hjkl  窗口之间跳转</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-h&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;h&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-j&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;j&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-k&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;k&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-l&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;l&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 左右比例控制</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Left&gt;&quot;</span>, <span class="string">&quot;:vertical resize -2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Right&gt;&quot;</span>, <span class="string">&quot;:vertical resize +2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s,&quot;</span>, <span class="string">&quot;:vertical resize -20&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s.&quot;</span>, <span class="string">&quot;:vertical resize +20&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 上下比例</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sj&quot;</span>, <span class="string">&quot;:resize +10&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sk&quot;</span>, <span class="string">&quot;:resize -10&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Down&gt;&quot;</span>, <span class="string">&quot;:resize +2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Up&gt;&quot;</span>, <span class="string">&quot;:resize -2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 等比例</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s=&quot;</span>, <span class="string">&quot;&lt;C-w&gt;=&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- Terminal相关</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;t&quot;</span>, <span class="string">&quot;:sp | terminal&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;vt&quot;</span>, <span class="string">&quot;:vsp | terminal&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;Esc&gt;&quot;</span>, <span class="string">&quot;&lt;C-\\&gt;&lt;C-n&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-h&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;h ]], opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-j&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;j ]], opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-k&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;k ]], opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-l&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;l ]], opt)</span><br><span class="line"></span><br><span class="line">-- visual模式下缩进代码</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&lt;gv&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&gt;gv&quot;</span>, opt)</span><br><span class="line">-- 上下移动选中文本</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;:move &#x27;&gt;+1&lt;CR&gt;gv-gv&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;:move &#x27;&lt;-2&lt;CR&gt;gv-gv&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 上下滚动浏览</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-j&gt;&quot;</span>, <span class="string">&quot;4j&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-k&gt;&quot;</span>, <span class="string">&quot;4k&quot;</span>, opt)</span><br><span class="line">-- ctrl u / ctrl + d  只移动9行，默认移动半屏</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-u&gt;&quot;</span>, <span class="string">&quot;9k&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-d&gt;&quot;</span>, <span class="string">&quot;9j&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 在visual 模式里粘贴不要复制</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&#x27;&quot;_dP&#x27;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 退出</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;:q&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;qq&quot;</span>, <span class="string">&quot;:q!&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;:qa!&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- insert 模式下，跳到行首行尾</span><br><span class="line">map(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;&lt;C-h&gt;&quot;</span>, <span class="string">&quot;&lt;ESC&gt;I&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;&lt;C-l&gt;&quot;</span>, <span class="string">&quot;&lt;ESC&gt;A&quot;</span>, opt)</span><br></pre></td></tr></table></figure>



<p>最后在<code>init.lua</code>中引入快捷键文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 快捷键映射</span><br><span class="line">require(<span class="string">&quot;keybindings&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>目前在 Neovim 最常见的插件管理器主要有 <a href="https://github.com/junegunn/vim-plug">vim-plug</a> 和 <a href="https://github.com/wbthomason/packer.nvim">packer</a> 两个。</p>
<p>安装步骤（请参照官网步骤）：</p>
<p>执行<code>git clone --depth 1 https://github.com/wbthomason/packer.nvim\ ~/.local/share/nvim/site/pack/packer/start/packer.nvim</code></p>
<p>安装成功后添加配置文件<code>lua/plugins.lua</code>，添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> packer = require(<span class="string">&quot;packer&quot;</span>)</span><br><span class="line">packer.startup(</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">   -- Packer 可以管理自己本身</span><br><span class="line">   use <span class="string">&#x27;wbthomason/packer.nvim&#x27;</span></span><br><span class="line">   -- 你的插件列表...</span><br><span class="line">end)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>中添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Packer 插件管理</span><br><span class="line">require(<span class="string">&quot;plugins&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>配置生效后，Neovim 会增加以下命令。</p>
<ul>
<li><code>:PackerCompile</code>： 每次改变插件配置时，必须运行此命令或 <code>PackerSync</code>, 重新生成编译的加载文件</li>
<li><code>:PackerClean</code> ： 清除所有不用的插件</li>
<li><code>:PackerInstall</code> ： 清除，然后安装缺失的插件</li>
<li><code>:PackerUpdate</code> ： 清除，然后更新并安装插件</li>
<li><code>:PackerSync</code> : 执行 <code>PackerUpdate</code> 后，再执行 <code>PackerCompile</code></li>
<li><code>:PackerLoad</code> : 立刻加载 opt 插件</li>
</ul>
<p>通过上边的说明，我们观察到 <code>:PackerSync</code> 命令包含了 <code>:PackerUpdate</code> 和<code>:PackerCompile</code>，而 <code>:PackerUpdate</code> 又包含了 <code>:PackerClean</code> 和 <code>:PackerInstall</code> 流程。</p>
<p>所以通常情况下，无论<strong>安装</strong>还是<strong>更新</strong>插件，我只需要下边这一条命令就够：<code>:PackerSync</code></p>
<p>每次修改完 <code>lua/plugins.lua</code> 这个文件后，保存退出，重新打开并调用 <code>:PackerSync</code> 就可以了</p>
<h4 id="添加自动安装"><a href="#添加自动安装" class="headerlink" title="添加自动安装"></a>添加自动安装</h4><p><code>lua/plugins.lua</code> 文件，在最后添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 每次保存 plugins.lua 自动安装插件</span><br><span class="line">pcall(</span><br><span class="line">  vim.cmd,</span><br><span class="line">  [[</span><br><span class="line">    augroup packer_user_config</span><br><span class="line">    autocmd!</span><br><span class="line">    autocmd BufWritePost plugins.lua <span class="built_in">source</span> &lt;afile&gt; | PackerSync</span><br><span class="line">    augroup end</span><br><span class="line">  ]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：保证自己可以ping 通 github 的情况下，但是仍旧执行<code>:PackerSync</code>失败，按 R 多次拉取失败插件，如果依旧失败则在错误插件处点击回车，查看问题，具体问题具体分析，我一般多试几次 R 就会成功</p>
</blockquote>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p><code>init.lua</code>中添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 主题设置 （新增）</span><br><span class="line">require(<span class="string">&quot;colorscheme&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>lua/colorscheme.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> colorscheme = <span class="string">&quot;tokyonight&quot;</span></span><br><span class="line"><span class="built_in">local</span> status_ok, _ = pcall(vim.cmd, <span class="string">&quot;colorscheme &quot;</span> .. colorscheme)</span><br><span class="line"><span class="keyword">if</span> not status_ok <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;colorscheme &quot;</span> .. colorscheme .. <span class="string">&quot; 没有找到！&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h4 id="安装第三方主题"><a href="#安装第三方主题" class="headerlink" title="安装第三方主题"></a>安装第三方主题</h4><p><code>lua/plugins.lua</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">packer.startup(&#123;</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">    -- Packer 可以升级自己</span><br><span class="line">    use(<span class="string">&quot;wbthomason/packer.nvim&quot;</span>)</span><br><span class="line">    --------------------- colorschemes --------------------</span><br><span class="line">    -- tokyonight</span><br><span class="line">    use(<span class="string">&quot;folke/tokyonight.nvim&quot;</span>)</span><br><span class="line">    -------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    -- 略...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>:w</code>保存  <code>p</code>退出</p>
<p>其他主体配色链接：<a href="https://github.com/topics/neovim-colorscheme">neovim-colorscheme · GitHub Topics</a></p>
<p><code>lua/plugins.lua</code>添加插件配置后，修改 <code>lua/colorscheme.lua</code> 内 <code>colorscheme</code> 变量为相应的主题即可</p>
<h3 id="侧边栏文件浏览器"><a href="#侧边栏文件浏览器" class="headerlink" title="侧边栏文件浏览器"></a>侧边栏文件浏览器</h3><p>相关插件：</p>
<ul>
<li><a href="https://github.com/nvim-tree/nvim-tree.lua">nvim-tree&#x2F;nvim-tree.lua: A file explorer tree for neovim written in lua (github.com)</a></li>
</ul>
<p><code>lua/plugins.lua</code> 中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">packer.startup(&#123;</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">    -- Packer 可以升级自己</span><br><span class="line">    use(<span class="string">&quot;wbthomason/packer.nvim&quot;</span>)</span><br><span class="line">    -------------------------- plugins -------------------------------------------</span><br><span class="line">    -- nvim-tree (新增)</span><br><span class="line">    use(&#123; <span class="string">&quot;kyazdani42/nvim-tree.lua&quot;</span>, requires = <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line">...略</span><br></pre></td></tr></table></figure>



<h4 id="配置-nvim-tree"><a href="#配置-nvim-tree" class="headerlink" title="配置 nvim-tree"></a>配置 nvim-tree</h4><p><code>lua/plugin-config/nvim-tree.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, nvim_tree = pcall(require, <span class="string">&quot;nvim-tree&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 nvim-tree&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 列表操作快捷键</span><br><span class="line"><span class="built_in">local</span> list_keys = require(<span class="string">&#x27;keybindings&#x27;</span>).nvimTreeList</span><br><span class="line">nvim_tree.setup(&#123;</span><br><span class="line">    -- 不显示 git 状态图标</span><br><span class="line">    git = &#123;</span><br><span class="line">        <span class="built_in">enable</span> = <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- project plugin 需要这样设置</span><br><span class="line">    update_cwd = <span class="literal">true</span>,</span><br><span class="line">    update_focused_file = &#123;</span><br><span class="line">        <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">        update_cwd = <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- 隐藏 .文件 和 node_modules 文件夹</span><br><span class="line">    filters = &#123;</span><br><span class="line">        dotfiles = <span class="literal">true</span>,</span><br><span class="line">        custom = &#123; <span class="string">&#x27;node_modules&#x27;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    view = &#123;</span><br><span class="line">        -- 宽度</span><br><span class="line">        width = 40,</span><br><span class="line">        -- 也可以 <span class="string">&#x27;right&#x27;</span></span><br><span class="line">        side = <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        -- 隐藏根目录</span><br><span class="line">        hide_root_folder = <span class="literal">false</span>,</span><br><span class="line">        -- 自定义列表中快捷键</span><br><span class="line">        mappings = &#123;</span><br><span class="line">            custom_only = <span class="literal">false</span>,</span><br><span class="line">            list = list_keys,</span><br><span class="line">        &#125;,</span><br><span class="line">        -- 不显示行数</span><br><span class="line">        number = <span class="literal">false</span>,</span><br><span class="line">        relativenumber = <span class="literal">false</span>,</span><br><span class="line">        -- 显示图标</span><br><span class="line">        signcolumn = <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    actions = &#123;</span><br><span class="line">        open_file = &#123;</span><br><span class="line">            -- 首次打开大小适配</span><br><span class="line">            resize_window = <span class="literal">true</span>,</span><br><span class="line">            -- 打开文件时关闭</span><br><span class="line">            quit_on_open = <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- wsl install -g wsl-open</span><br><span class="line">    -- https://github.com/4U6U57/wsl-open/</span><br><span class="line">    system_open = &#123;</span><br><span class="line">        cmd = <span class="string">&#x27;wsl-open&#x27;</span>, -- mac 直接设置为 open</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">-- 自动关闭</span><br><span class="line">vim.cmd([[</span><br><span class="line">  autocmd BufEnter * ++nested <span class="keyword">if</span> winnr(<span class="string">&#x27;$&#x27;</span>) == 1 &amp;&amp; bufname() == <span class="string">&#x27;NvimTree_&#x27;</span> . tabpagenr() | quit | endif</span><br><span class="line">]])</span><br></pre></td></tr></table></figure>

<p>上边代码就是 nvim-tree 的配置，可以根据注释进行修改。这里简单解释一下，值得注意的是 <code>system_open</code> 项，如果想要在 <code>WSL</code> 中用 Windows 系统默认设置打开文件，需要使用 <code>Node.js</code> 全局安装一个 <code>wsl-open</code> 包，使用命令 <code>npm install -g wsl-open</code>，如果不需要这个功能，也可以不用安装。 如果不是 Windows 系统也就不需要安装。</p>
<p>nvim-tree 初始化支持很多参数，如果想知道还有哪些其他的参数，可以运行 <code>:h nvim-tree.setup</code> 调出帮助文档查看。</p>
<p><code>lua/keybindings.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 插件快捷键</span><br><span class="line"><span class="built_in">local</span> pluginKeys = &#123;&#125;</span><br><span class="line"></span><br><span class="line">-- nvim-tree</span><br><span class="line">-- alt + m 键打开关闭tree</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-m&gt;&quot;</span>, <span class="string">&quot;:NvimTreeToggle&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 列表快捷键</span><br><span class="line">pluginKeys.nvimTreeList = &#123;</span><br><span class="line">  -- 打开文件或文件夹</span><br><span class="line">  &#123; key = &#123;<span class="string">&quot;&lt;CR&gt;&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;&lt;2-LeftMouse&gt;&quot;</span>&#125;, action = <span class="string">&quot;edit&quot;</span> &#125;,</span><br><span class="line">  -- 分屏打开文件</span><br><span class="line">  &#123; key = <span class="string">&quot;v&quot;</span>, action = <span class="string">&quot;vsplit&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;h&quot;</span>, action = <span class="string">&quot;split&quot;</span> &#125;,</span><br><span class="line">  -- 显示隐藏文件</span><br><span class="line">  &#123; key = <span class="string">&quot;i&quot;</span>, action = <span class="string">&quot;toggle_custom&quot;</span> &#125;, -- 对应 filters 中的 custom (node_modules)</span><br><span class="line">  &#123; key = <span class="string">&quot;.&quot;</span>, action = <span class="string">&quot;toggle_dotfiles&quot;</span> &#125;, -- Hide (dotfiles)</span><br><span class="line">  -- 文件操作</span><br><span class="line">  &#123; key = <span class="string">&quot;&lt;F5&gt;&quot;</span>, action = <span class="string">&quot;refresh&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;a&quot;</span>, action = <span class="string">&quot;create&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;d&quot;</span>, action = <span class="string">&quot;remove&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;r&quot;</span>, action = <span class="string">&quot;rename&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;x&quot;</span>, action = <span class="string">&quot;cut&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;c&quot;</span>, action = <span class="string">&quot;copy&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;p&quot;</span>, action = <span class="string">&quot;paste&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;s&quot;</span>, action = <span class="string">&quot;system_open&quot;</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> pluginKeys</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 插件配置</span><br><span class="line">require(<span class="string">&quot;plugin-config.nvim-tree&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>但是出现问题<code>view.mappings.list has been deprecated in favour of on_attach.please run</code>，应该是某些插件更新：相关链接：<a href="https://github.com/nvim-tree/nvim-tree.lua/wiki/Migrating-To-on_attach">Migrating To on_attach · nvim-tree&#x2F;nvim-tree.lua Wiki (github.com)</a></p>
<p>表明<code>view.mappings</code> and <code>remove_keymaps</code>已经启用需要移除</p>
<p>解决方案：</p>
<p>注释掉<code>view.mappings</code></p>
<p>执行<code>:NvimTreeGenerateOnAttach</code>，复制<code>nvim-tree-on-attach.lua</code>中的内容粘贴到<code> nvim-tree.lua</code>中（需要添加在setup之前）</p>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;nvim-tree&quot;</span>).setup(&#123;</span><br><span class="line">  ...</span><br><span class="line">  on_attach = on_attach,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>问题解决~</p>
<h4 id="顶部标签页和底部信息栏"><a href="#顶部标签页和底部信息栏" class="headerlink" title="顶部标签页和底部信息栏"></a>顶部标签页和底部信息栏</h4><p>相关插件：</p>
<ul>
<li><a href="https://github.com/akinsho/bufferline.nvim">akinsho&#x2F;bufferline.nvim: A snazzy bufferline for Neovim (github.com)</a></li>
<li><a href="https://github.com/nvim-lualine/lualine.nvim">nvim-lualine&#x2F;lualine.nvim: A blazing fast and easy to configure neovim statusline plugin written in pure lua. (github.com)</a></li>
</ul>
<h5 id="顶部标签页"><a href="#顶部标签页" class="headerlink" title="顶部标签页"></a>顶部标签页</h5><p><code>lua/plugins.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">packer.startup(&#123;</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">    -- Packer 可以升级自己</span><br><span class="line">    use(<span class="string">&quot;wbthomason/packer.nvim&quot;</span>)</span><br><span class="line">    -------------------------- plugins -------------------------------------------</span><br><span class="line">    -- nvim-tree</span><br><span class="line">    use(&#123; <span class="string">&quot;kyazdani42/nvim-tree.lua&quot;</span>, requires = <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span> &#125;)</span><br><span class="line">    -- bufferline (新增)</span><br><span class="line">    use(&#123; <span class="string">&quot;akinsho/bufferline.nvim&quot;</span>, requires = &#123; <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span>, <span class="string">&quot;moll/vim-bbye&quot;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line">...略</span><br></pre></td></tr></table></figure>

<p><code>:w</code> 保存，自动安装，安装完整按 <code>q</code> 退出</p>
<p>出现**GnuTLS recv error (-110)**问题</p>
<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依次执行</span></span><br><span class="line">apt-get install gnutls-bin</span><br><span class="line"><span class="comment"># 关闭 SSL 验证</span></span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line"><span class="comment"># 第二个命令是用于设置缓冲区大小</span></span><br><span class="line">git config --global http.postBuffer 1048576000</span><br><span class="line"><span class="comment"># 或是</span></span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> fakeroot /usr/bin/fakeroot-tcp</span><br></pre></td></tr></table></figure>



<p>这里我增加了一个 <a href="https://github.com/moll/vim-bbye">moll&#x2F;vim-bbye</a> 依赖，因为这个插件安装后会增加一个 <code>:Bdelete</code> 命令，相比内置的 <code>:bdelete</code>, 它删除 buffer 的同时，并不会搞乱布局 。 待会儿我们会配置 <code>Bdelete</code> 为关闭 Tab 的命令。</p>
<p>新建<code>lua/plugin-config/bufferline.lua</code>文件并添加内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, bufferline = pcall(require, <span class="string">&quot;bufferline&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 bufferline&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- bufferline 配置</span><br><span class="line">-- https://github.com/akinsho/bufferline.nvim<span class="comment">#configuration</span></span><br><span class="line">bufferline.setup(&#123;</span><br><span class="line">  options = &#123;</span><br><span class="line">    -- 关闭 Tab 的命令，这里使用 moll/vim-bbye 的 :Bdelete 命令</span><br><span class="line">    close_command = <span class="string">&quot;Bdelete! %d&quot;</span>,</span><br><span class="line">    right_mouse_command = <span class="string">&quot;Bdelete! %d&quot;</span>,</span><br><span class="line">    -- 侧边栏配置</span><br><span class="line">    -- 左侧让出 nvim-tree 的位置，显示文字 File Explorer</span><br><span class="line">    offsets = &#123;</span><br><span class="line">      &#123;</span><br><span class="line">        filetype = <span class="string">&quot;NvimTree&quot;</span>,</span><br><span class="line">        text = <span class="string">&quot;File Explorer&quot;</span>,</span><br><span class="line">        highlight = <span class="string">&quot;Directory&quot;</span>,</span><br><span class="line">        text_align = <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- 使用 nvim 内置 LSP  后续课程会配置</span><br><span class="line">    diagnostics = <span class="string">&quot;nvim_lsp&quot;</span>,</span><br><span class="line">    -- 可选，显示 LSP 报错图标</span><br><span class="line">    ---@diagnostic disable-next-line: unused-local</span><br><span class="line">    diagnostics_indicator = <span class="keyword">function</span>(count, level, diagnostics_dict, context)</span><br><span class="line">      <span class="built_in">local</span> s = <span class="string">&quot; &quot;</span></span><br><span class="line">      <span class="keyword">for</span> e, n <span class="keyword">in</span> pairs(diagnostics_dict) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">local</span> sym = e == <span class="string">&quot;error&quot;</span> and <span class="string">&quot; &quot;</span> or (e == <span class="string">&quot;warning&quot;</span> and <span class="string">&quot; &quot;</span> or <span class="string">&quot;&quot;</span>)</span><br><span class="line">        s = s .. n .. sym</span><br><span class="line">      end</span><br><span class="line">      <span class="built_in">return</span> s</span><br><span class="line">    end,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- bufferline</span><br><span class="line">-- 左右Tab切换</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-h&gt;&quot;</span>, <span class="string">&quot;:BufferLineCyclePrev&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-l&gt;&quot;</span>, <span class="string">&quot;:BufferLineCycleNext&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 关闭</span><br><span class="line">--<span class="string">&quot;moll/vim-bbye&quot;</span></span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-w&gt;&quot;</span>, <span class="string">&quot;:Bdelete!&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;bl&quot;</span>, <span class="string">&quot;:BufferLineCloseRight&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;bh&quot;</span>, <span class="string">&quot;:BufferLineCloseLeft&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;bc&quot;</span>, <span class="string">&quot;:BufferLinePickClose&lt;CR&gt;&quot;</span>, opt)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.bufferline&quot;</span>)</span><br></pre></td></tr></table></figure>





<h5 id="底部信息栏"><a href="#底部信息栏" class="headerlink" title="底部信息栏"></a>底部信息栏</h5><p><code>lua/plugins.lua</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- lualine (新增)</span><br><span class="line">use(&#123; <span class="string">&quot;nvim-lualine/lualine.nvim&quot;</span>, requires = &#123; <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span> &#125; &#125;)</span><br><span class="line">use(<span class="string">&quot;arkav/lualine-lsp-progress&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>新建<code>lua/plugin-config/lualine.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 如果找不到lualine 组件，就不继续执行</span><br><span class="line"><span class="built_in">local</span> status, lualine = pcall(require, <span class="string">&quot;lualine&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 lualine&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">lualine.setup(&#123;</span><br><span class="line">  options = &#123;</span><br><span class="line">    theme = <span class="string">&quot;tokyonight&quot;</span>,</span><br><span class="line">    component_separators = &#123; left = <span class="string">&quot;|&quot;</span>, right = <span class="string">&quot;|&quot;</span> &#125;,</span><br><span class="line">    -- https://github.com/ryanoasis/powerline-extra-symbols</span><br><span class="line">    section_separators = &#123; left = <span class="string">&quot; &quot;</span>, right = <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  extensions = &#123; <span class="string">&quot;nvim-tree&quot;</span>, <span class="string">&quot;toggleterm&quot;</span> &#125;,</span><br><span class="line">  sections = &#123;</span><br><span class="line">    lualine_c = &#123;</span><br><span class="line">      <span class="string">&quot;filename&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;lsp_progress&quot;</span>,</span><br><span class="line">        spinner_symbols = &#123; <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    lualine_x = &#123;</span><br><span class="line">      <span class="string">&quot;filesize&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;fileformat&quot;</span>,</span><br><span class="line">        -- symbols = &#123;</span><br><span class="line">        --   unix = <span class="string">&#x27;&#x27;</span>, -- e712</span><br><span class="line">        --   dos = <span class="string">&#x27;&#x27;</span>, -- e70f</span><br><span class="line">        --   mac = <span class="string">&#x27;&#x27;</span>, -- e711</span><br><span class="line">        -- &#125;,</span><br><span class="line">        symbols = &#123;</span><br><span class="line">          unix = <span class="string">&quot;LF&quot;</span>,</span><br><span class="line">          dos = <span class="string">&quot;CRLF&quot;</span>,</span><br><span class="line">          mac = <span class="string">&quot;CR&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;encoding&quot;</span>,</span><br><span class="line">      <span class="string">&quot;filetype&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.lualine&quot;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="模糊搜索快速查找文件"><a href="#模糊搜索快速查找文件" class="headerlink" title="模糊搜索快速查找文件"></a>模糊搜索快速查找文件</h4><p>相关插件：<a href="https://github.com/nvim-telescope/telescope.nvim">nvim-telescope&#x2F;telescope.nvim: Find, Filter, Preview, Pick. All lua, all the time. (github.com)</a> 	</p>
<p><code>lua/plugins.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- telescope （新增）</span><br><span class="line">use &#123; <span class="string">&#x27;nvim-telescope/telescope.nvim&#x27;</span>, requires = &#123; <span class="string">&quot;nvim-lua/plenary.nvim&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p><code>:checkhealth telescope</code> 检查依赖情况，这里通常会提示 <code>ripgrep</code> 不存在，因为 <code>telescope</code> 依赖以下两个项目。</p>
<ul>
<li><a href="https://github.com/sharkdp/fd">sharkdp&#x2F;fd: A simple, fast and user-friendly alternative to ‘find’ (github.com)</a></li>
<li><a href="https://github.com/BurntSushi/ripgrep">BurntSushi&#x2F;ripgrep: ripgrep recursively searches directories for a regex pattern while respecting your gitignore (github.com)</a></li>
</ul>
<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 20.04 安装 repgrep</span></span><br><span class="line">sudo apt install ripgrep</span><br><span class="line"><span class="comment"># 18.04 安装 repgrep</span></span><br><span class="line">sudo add-apt-repository ppa:x4121/ripgrep</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install ripgrep</span><br><span class="line"><span class="comment"># 安装 fd</span></span><br><span class="line">npm install -g fd-find</span><br></pre></td></tr></table></figure>

<h5 id="配置-node-环境"><a href="#配置-node-环境" class="headerlink" title="配置 node 环境"></a>配置 node 环境</h5><h6 id="node"><a href="#node" class="headerlink" title="node"></a>node</h6><p>配置源，需要哪个版本可以将16替换为相应版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure>

<p>如果不想要自己配置指定版本源的情况下，可以直接执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install nodejs npm</span><br></pre></td></tr></table></figure>

<h6 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h6><p>官网：<a href="https://github.com/nvm-sh/nvm">nvm-sh&#x2F;nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)</a></p>
<p>git clone nvm仓库时遇到如下错误</p>
<blockquote>
<p>GnuTLS recv error (-110): The TLS connection 。。。</p>
</blockquote>
<p>我是因为Ipv6的问题，可以git clone -4 指定使用Ipv4连接</p>
<p>但是执行<code>ap-get update</code>遇到问题：</p>
<blockquote>
<p>Err:12 <a href="http://ppa.launchpad.net/x4121/ripgrep/ubuntu">http://ppa.launchpad.net/x4121/ripgrep/ubuntu</a> focal Release<br>  404  Not Found [IP: 185.125.190.52 80]<br>Reading package lists…<br>E: The repository ‘<a href="http://ppa.launchpad.net/x4121/ripgrep/ubuntu">http://ppa.launchpad.net/x4121/ripgrep/ubuntu</a> focal Release’ does not have a Release file.</p>
</blockquote>
<p>这是因为之前我执行过<code>sudo add-apt-repository ppa:x4121/ripgrep</code>所以可以直接手动删除</p>
<p>解决方案（自动移除再更新）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository -r ppa:x4121/ripgrep</span><br><span class="line"><span class="comment"># 指的是先移除armagetronad-dev这个ppa包，再添加这个ppa包</span></span><br><span class="line">sudo apt update -q</span><br></pre></td></tr></table></figure>

<p>手动删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/sources.list.d</span><br><span class="line"><span class="built_in">rm</span> x4121-ubuntu-ripgrep-focal.list</span><br><span class="line"><span class="comment"># .save 文件是备份，不需要管</span></span><br></pre></td></tr></table></figure>



<p>后面我在使用更新插件包时爆出：<code>Could not resolve host github.com</code></p>
<p>解决1（失败）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从全局配置文件中删除代理设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<p>解决2（成功）：</p>
<p>我直接ping了下网络，发现不只是github连不上，而是整个WSL网络都不能使用，在宿主机中我查看WSL网络配置，发现未修复之前两个红框中的ip地址是没有的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230509091607416.png" alt="image-20230509091607416"></p>
<p>直接在宿主机上使用管理员权限执行<code>netsh winsock reset</code>重启网络即可（注意：不需要重启）</p>
<blockquote>
<p>下面解决方案没有试过，仅作为备用方案</p>
</blockquote>
<p>解决3：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启 WSL 指令 </span></span><br><span class="line">$ wsl --shutdown </span><br><span class="line"><span class="comment"># 之后就重新启动进入即可 </span></span><br><span class="line">$ wsl</span><br></pre></td></tr></table></figure>







<h4 id="自定义启动页与项目列表"><a href="#自定义启动页与项目列表" class="headerlink" title="自定义启动页与项目列表"></a>自定义启动页与项目列表</h4><p>当我们在命令行中输入 <code>nvim</code> 不带任何路径并敲击回车的时候，就会打开这个界面，通常我们会在这个界面中配置最常用功能，比如打开最近编辑过的文件，快速打开项目文件夹，快速修改快捷键等。</p>
<p>使用官方配置的图像：	<a href="https://github.com/nvimdev/dashboard-nvim/wiki/Ascii-Header-Text">Ascii Header Text · nvimdev&#x2F;dashboard-nvim Wiki (github.com)</a></p>
<p>使用字体生成器：[Text to ASCII Art Generator (TAAG) (patorjk.com)](<a href="http://patorjk.com/software/taag/#p=display&f=ANSI">http://patorjk.com/software/taag/#p=display&amp;f=ANSI</a> Shadow&amp;t&#x3D;rettmp)</p>
<p>同样 plugins.lua 中添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- dashboard-nvim (新增)</span><br><span class="line">use(<span class="string">&quot;glepnir/dashboard-nvim&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>创建 lua&#x2F;plugin-config&#x2F;dashboard.lua ，并添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, db = pcall(require, <span class="string">&quot;dashboard&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 dashboard&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">db.setup(&#123;</span><br><span class="line">  theme = <span class="string">&#x27;doom&#x27;</span>,</span><br><span class="line">  config = &#123;</span><br><span class="line">    header = &#123;</span><br><span class="line">[[                                                     ]],</span><br><span class="line">[[                                                     ]],</span><br><span class="line">[[██████╗ ███████╗████████╗████████╗███╗   ███╗██████╗ ]],</span><br><span class="line">[[██╔══██╗██╔════╝╚══██╔══╝╚══██╔══╝████╗ ████║██╔══██╗]],</span><br><span class="line">[[██████╔╝█████╗     ██║      ██║   ██╔████╔██║██████╔╝]],</span><br><span class="line">[[██╔══██╗██╔══╝     ██║      ██║   ██║╚██╔╝██║██╔═══╝ ]],</span><br><span class="line">[[██║  ██║███████╗   ██║      ██║   ██║ ╚═╝ ██║██║     ]],</span><br><span class="line">[[╚═╝  ╚═╝╚══════╝   ╚═╝      ╚═╝   ╚═╝     ╚═╝╚═╝     ]],</span><br><span class="line">[[                                                     ]],</span><br><span class="line">[[                [ version : 1.0.0 ]                  ]],</span><br><span class="line">[[                                                     ]],</span><br><span class="line">    &#125;, --your header</span><br><span class="line">    center = &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Projects                            &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;Telescope projects&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Recently files                      &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;Telescope oldfiles&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Edit keybindings                    &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;edit ~/.config/nvim/lua/keybindings.lua&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Edit Projects                       &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;edit ~/.local/share/nvim/project_nvim/project_history&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    footer = &#123;&#125;  --your footer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是里面的 <code>Telescope projects</code> 并不是 telescope 内置的命令。需要安装<code>ahmedkhalf/project.nvim</code>插件，执行如下步骤</p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- project</span><br><span class="line">use(<span class="string">&quot;ahmedkhalf/project.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>确保<code>lua/plugin-config/nvim-tree.lua</code>文件中有如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvim_tree.setup(&#123;</span><br><span class="line">  --- 上略</span><br><span class="line"></span><br><span class="line">  -- project plugin 需要这样设置</span><br><span class="line">  update_cwd = <span class="literal">true</span>,</span><br><span class="line">  update_focused_file = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">    update_cwd = <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  -- 下略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>创建<code>lua/plugin-config/project.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, project = pcall(require, <span class="string">&quot;project_nvim&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 project_nvim&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- nvim-tree 支持</span><br><span class="line">vim.g.nvim_tree_respect_buf_cwd = 1</span><br><span class="line"></span><br><span class="line">project.setup(&#123;</span><br><span class="line">  detection_methods = &#123; <span class="string">&quot;pattern&quot;</span> &#125;,</span><br><span class="line">  patterns = &#123; <span class="string">&quot;.git&quot;</span>, <span class="string">&quot;_darcs&quot;</span>, <span class="string">&quot;.hg&quot;</span>, <span class="string">&quot;.bzr&quot;</span>, <span class="string">&quot;.svn&quot;</span>, <span class="string">&quot;Makefile&quot;</span>, <span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;.sln&quot;</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, telescope = pcall(require, <span class="string">&quot;telescope&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 telescope&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line">pcall(telescope.load_extension, <span class="string">&quot;projects&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.dashboard&quot;</span>)</span><br><span class="line">require(<span class="string">&quot;plugin-config.project&quot;</span>)</span><br></pre></td></tr></table></figure>



<h6 id="手动编辑-project-history-列表"><a href="#手动编辑-project-history-列表" class="headerlink" title="手动编辑 project_history 列表"></a>手动编辑 <code>project_history</code> 列表</h6><p>执行<code>:lua print(require(&quot;project_nvim.utils.path&quot;).historyfile)</code></p>
<p>我得到了<code>~/.local/share/nvim/project_nvim/project_history</code>这个文件，直接编辑即可</p>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/root/.config/nvim</span><br></pre></td></tr></table></figure>

<p>以后的话可以方便编写nvim项目配置 :)</p>
<h4 id="语法高亮安装及配置"><a href="#语法高亮安装及配置" class="headerlink" title="语法高亮安装及配置"></a>语法高亮安装及配置</h4><p>相关插件：<a href="https://github.com/nvim-treesitter/nvim-treesitter">nvim-treesitter&#x2F;nvim-treesitter: Nvim Treesitter configurations and abstraction layer (github.com)</a></p>
<p>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- treesitter （新增）</span><br><span class="line">use(&#123; <span class="string">&quot;nvim-treesitter/nvim-treesitter&quot;</span>, run = <span class="string">&quot;:TSUpdate&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="手动安装Language-parser"><a href="#手动安装Language-parser" class="headerlink" title="手动安装Language parser"></a>手动安装Language parser</h5><p>运行 <code>:TSInstallInfo</code> 命令查看 language parsers 列表与安装状态</p>
<p><img src="C:\Users\86150\AppData\Roaming\Typora\typora-user-images\image-20230509193140841.png" alt="image-20230509193140841"></p>
<p>安装：:TSInstall javascript</p>
<p>卸载：:TSUninstall javascript</p>
<p>安装后会在 packer 中生成相应语言的so文件</p>
<h5 id="自动安装配置"><a href="#自动安装配置" class="headerlink" title="自动安装配置"></a>自动安装配置</h5><p><code>lua/plugin-config/nvim-treesitter.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, treesitter = pcall(require, <span class="string">&quot;nvim-treesitter.configs&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 nvim-treesitter&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">treesitter.setup(&#123;</span><br><span class="line">  -- 安装 language parser</span><br><span class="line">  -- :TSInstallInfo 命令查看支持的语言</span><br><span class="line">  ensure_installed = &#123; <span class="string">&quot;json&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;vim&quot;</span>, <span class="string">&quot;lua&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;typescript&quot;</span>, <span class="string">&quot;tsx&quot;</span> &#125;,</span><br><span class="line">  -- 启用代码高亮模块</span><br><span class="line">  highlight = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">    additional_vim_regex_highlighting = <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.nvim-treesitter&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>稍微说下里面 nvim-treesitter 中的配置</p>
<h5 id="增量选择模块"><a href="#增量选择模块" class="headerlink" title="增量选择模块"></a>增量选择模块</h5><p>当你的光标在一个语法结点上时，可以设置一个增加键和一个减少键，敲击这两个，在表现上为不断外扩和收缩选中代码。</p>
<p>增加和减少结点的快捷键设置成了 <strong>回车</strong> 和 <strong>退格</strong> 。通过不断的按 Enter 选择区域会从里层不断外扩， Backspace 则相反不断内收。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 启用增量选择模块</span><br><span class="line">incremental_selection = &#123;</span><br><span class="line">  <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">  keymaps = &#123;</span><br><span class="line">    init_selection = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">    node_incremental = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">    node_decremental = <span class="string">&quot;&lt;BS&gt;&quot;</span>,</span><br><span class="line">    scope_incremental = <span class="string">&quot;&lt;TAB&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h5 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h5><p>在 visual 模式中按 &#x3D; 即可实现代码缩进</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 启用代码缩进模块 (=)</span><br><span class="line">indent = &#123;</span><br><span class="line">  <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h5 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h5><p>快捷键中设置了<code>zc</code> 组合键来折叠 <code>&#123;&#125;</code> 中的内容，还使用 <code>zo</code> 组合键来打开对应的折叠。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 开启 Folding 模块</span><br><span class="line">vim.opt.foldmethod = <span class="string">&quot;expr&quot;</span></span><br><span class="line">vim.opt.foldexpr = <span class="string">&quot;nvim_treesitter#foldexpr()&quot;</span></span><br><span class="line">-- 默认不要折叠</span><br><span class="line">-- https://stackoverflow.com/questions/8316139/how-to-set-the-default-to-unfolded-when-you-open-a-file</span><br><span class="line">vim.opt.foldlevel = 99</span><br></pre></td></tr></table></figure>



<p>执行<code>:TSModuleInfo</code>查看是否成功</p>
<p>如果出现问题先执行<code>TSUpdate</code>看是否可以解决，无法解决查看官方issues或wiki</p>
<h4 id="LSP-基础配置"><a href="#LSP-基础配置" class="headerlink" title="LSP 基础配置"></a>LSP 基础配置</h4><p>目的：实现类似IDE的智能提示、语法检查和解析、悬停文档等交互体验</p>
<p>定义：<strong>LSP</strong>(Language Server Protocol) 语言服务协议，该协议定义了在编辑器或IDE与语言服务器之间使用的协议，该语言服务器提供了例如自动补全，转到定义，查找所有引用等的功能；语言服务器索引格式的目标是支持在开发工具中进行丰富的代码导航或者一个无需本地源码副本的WebUI。</p>
<h5 id="开启-neovim-内置LSP"><a href="#开启-neovim-内置LSP" class="headerlink" title="开启 neovim 内置LSP"></a>开启 neovim 内置LSP</h5><p>执行<code>:h lsp</code>查看quick start，里面的步骤如下</p>
<ul>
<li>使用包管理器安装语言服务器</li>
<li>为每一种语言服务器配置LSP客户端</li>
<li>配置快捷键(keymaps)和自动命令(autocmds)</li>
</ul>
<h6 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h6><p>安装插件：<a href="https://github.com/neovim/nvim-lspconfig">neovim&#x2F;nvim-lspconfig: Quickstart configs for Nvim LSP (github.com)</a></p>
<h6 id="配置语言服务器"><a href="#配置语言服务器" class="headerlink" title="配置语言服务器"></a>配置语言服务器</h6><p>安装插件：<a href="https://github.com/williamboman/nvim-lsp-installer">williamboman&#x2F;nvim-lsp-installer: Further development has moved to https://github.com/williamboman/mason.nvim!</a></p>
<p>配置插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------------- LSP --------------------</span><br><span class="line">use(<span class="string">&quot;williamboman/nvim-lsp-installer&quot;</span>)</span><br><span class="line">-- Lspconfig</span><br><span class="line">use(&#123; <span class="string">&quot;neovim/nvim-lspconfig&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="安装-LSP-Server"><a href="#安装-LSP-Server" class="headerlink" title="安装 LSP Server"></a>安装 LSP Server</h5><p>运行<code>:LspInstallInfo</code> ，点击 i 即可安装相应的 Server ，进入之后安装 Lua server</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230509232347556.png" alt="image-20230509232347556"></p>
<p>从最上面的介绍得知作者未来会用 <strong>mason.nvim</strong> 取代 <strong>nvim-lsp-installer</strong>，<strong>mason.nvim</strong> 项目支持更多的 server 安装，不仅仅是LSP Server 还支持 DAP servers、 linters、formatters 等等超过 150 个包，100+ 种编程语言，并且升级也是非常简单的</p>
<p>但是安装失败，直接重新安装即可成功</p>
<p>但是有时遇到<code>could not find executable &quot;unzip&quot; in path</code> 问题，可以使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zip unzip</span><br></pre></td></tr></table></figure>

<p>但是安装成功之后发现问题，我从issues中了解到是因为lua server的仓库地址发生变化</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230510000325530.png" alt="image-20230510000325530"></p>
<p>鉴于<strong>nvim-lsp-installer</strong>出现的各种问题，现在使用<strong>mason.nvim</strong>代替<strong>nvim-lsp-installer</strong></p>
<p>步骤：</p>
<ul>
<li>运行<code>:LspUninstallAll</code>卸载<code>nvim-lsp-installer </code></li>
<li>plugins.lua 替换 <strong>nvim-lsp-installer</strong> 插件为 <strong>mason.nvim</strong> 和 <strong>mason-lspconfig.nvim</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(&#123; <span class="string">&quot;williamboman/mason.nvim&quot;</span> &#125;)</span><br><span class="line">use(&#123; <span class="string">&quot;williamboman/mason-lspconfig.nvim&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>lua/lsp/setup.lua</code> 相应部分替换为（这个文件后面会创建，现在先讲下）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, mason = pcall(require, <span class="string">&quot;mason&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, mason_config = pcall(require, <span class="string">&quot;mason-lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason-lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, lspconfig = pcall(require, <span class="string">&quot;lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- :h mason-default-settings</span><br><span class="line">-- ~/.local/share/nvim/mason</span><br><span class="line">mason.setup(&#123;</span><br><span class="line">  ui = &#123;</span><br><span class="line">    icons = &#123;</span><br><span class="line">      package_installed = <span class="string">&quot;✓&quot;</span>,</span><br><span class="line">      package_pending = <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">      package_uninstalled = <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- mason-lspconfig uses the `lspconfig` server names <span class="keyword">in</span> the APIs it exposes - not `mason.nvim` package names</span><br><span class="line">-- https://github.com/williamboman/mason-lspconfig.nvim/blob/main/doc/server-mapping.md</span><br><span class="line">mason_config.setup(&#123;</span><br><span class="line">  ensure_installed = &#123;</span><br><span class="line">    <span class="string">&quot;lua_ls&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- 安装列表</span><br><span class="line">-- &#123; key: 服务器名， value: 配置文件 &#125;</span><br><span class="line">-- key 必须为下列网址列出的 server name，不可以随便写</span><br><span class="line">-- https://github.com/williamboman/nvim-lsp-installer<span class="comment">#available-lsps</span></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">  lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>), -- lua/lsp/config/lua.lua</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, config <span class="keyword">in</span> pairs(servers) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> config ~= nil and <span class="built_in">type</span>(config) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">    -- 自定义初始化配置文件必须实现on_setup 方法</span><br><span class="line">    config.on_setup(lspconfig[name])</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    -- 使用默认参数</span><br><span class="line">    lspconfig[name].setup(&#123;&#125;)</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">require(<span class="string">&quot;lsp.ui&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>保存之后默认安装到  ~&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;mason </p>
</blockquote>
<p>执行<code>:Mason</code>即可打开，操作基本和上面的一样，只不过多了 1，2，3，4，5 是上边TAB快捷键，按 <code>2</code> 即可切换到 LSP</p>
<p>Mason 仓库地址：<a href="https://github.com/williamboman/mason.nvim">Mason </a></p>
<h5 id="配置-LSP-Server"><a href="#配置-LSP-Server" class="headerlink" title="配置 LSP Server"></a>配置 LSP Server</h5><p>创建一个新的目录 <code>lua/lsp/</code> 专门存放 lsp 相关的配置，使用<code>:h mason-lspconfig-automatic-server-setup</code>查看如何配置setup，或是直接看官网</p>
<p>创建<code>lua/lsp/setup.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, mason = pcall(require, <span class="string">&quot;mason&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, mason_config = pcall(require, <span class="string">&quot;mason-lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason-lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, lspconfig = pcall(require, <span class="string">&quot;lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- :h mason-default-settings</span><br><span class="line">-- ~/.local/share/nvim/mason</span><br><span class="line">mason.setup(&#123;</span><br><span class="line">  ui = &#123;</span><br><span class="line">    icons = &#123;</span><br><span class="line">      package_installed = <span class="string">&quot;✓&quot;</span>,</span><br><span class="line">      package_pending = <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">      package_uninstalled = <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- mason-lspconfig uses the `lspconfig` server names <span class="keyword">in</span> the APIs it exposes - not `mason.nvim` package names</span><br><span class="line">-- https://github.com/williamboman/mason-lspconfig.nvim/blob/main/doc/server-mapping.md</span><br><span class="line">mason_config.setup(&#123;</span><br><span class="line">  ensure_installed = &#123;</span><br><span class="line">    <span class="string">&quot;lua_ls&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- 安装列表</span><br><span class="line">-- &#123; key: 服务器名， value: 配置文件 &#125;</span><br><span class="line">-- key 必须为下列网址列出的 server name，不可以随便写</span><br><span class="line">-- https://github.com/williamboman/nvim-lsp-installer<span class="comment">#available-lsps</span></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">  lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>), -- lua/lsp/config/lua.lua</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, config <span class="keyword">in</span> pairs(servers) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> config ~= nil and <span class="built_in">type</span>(config) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">    -- 自定义初始化配置文件必须实现on_setup 方法</span><br><span class="line">    config.on_setup(lspconfig[name])</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    -- 使用默认参数</span><br><span class="line">    lspconfig[name].setup(&#123;&#125;)</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">require(<span class="string">&quot;lsp.ui&quot;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="配置-lua-Server"><a href="#配置-lua-Server" class="headerlink" title="配置 lua Server"></a>配置 lua Server</h5><p>创建<code>/lua/lsp/config/lua.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md</span><br><span class="line"><span class="built_in">local</span> runtime_path = vim.split(package.path, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">table.insert(runtime_path, <span class="string">&#x27;lua/?.lua&#x27;</span>)</span><br><span class="line">table.insert(runtime_path, <span class="string">&#x27;lua/?/init.lua&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">    settings = &#123;</span><br><span class="line">        Lua = &#123;</span><br><span class="line">            runtime = &#123;</span><br><span class="line">                -- Tell the language server <span class="built_in">which</span> version of Lua you<span class="string">&#x27;re using (most likely LuaJIT in the case of Neovim)</span></span><br><span class="line"><span class="string">                version = &#x27;</span>LuaJIT<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                -- Setup your lua path</span></span><br><span class="line"><span class="string">                path = runtime_path,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            diagnostics = &#123;</span></span><br><span class="line"><span class="string">                -- Get the language server to recognize the `vim` global</span></span><br><span class="line"><span class="string">                globals = &#123; &#x27;</span>vim<span class="string">&#x27; &#125;,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            workspace = &#123;</span></span><br><span class="line"><span class="string">                -- Make the server aware of Neovim runtime files</span></span><br><span class="line"><span class="string">                library = vim.api.nvim_get_runtime_file(&#x27;</span><span class="string">&#x27;, true),</span></span><br><span class="line"><span class="string">                checkThirdParty = false,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            -- Do not send telemetry data containing a randomized but unique identifier</span></span><br><span class="line"><span class="string">            telemetry = &#123;</span></span><br><span class="line"><span class="string">                enable = false,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    flags = &#123;</span></span><br><span class="line"><span class="string">        debounce_text_changes = 150,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    on_attach = function(client, bufnr)</span></span><br><span class="line"><span class="string">        -- 禁用格式化功能，交给专门插件插件处理</span></span><br><span class="line"><span class="string">        client.resolved_capabilities.document_formatting = false</span></span><br><span class="line"><span class="string">        client.resolved_capabilities.document_range_formatting = false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        local function buf_set_keymap(...)</span></span><br><span class="line"><span class="string">            vim.api.nvim_buf_set_keymap(bufnr, ...)</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        -- 绑定快捷键</span></span><br><span class="line"><span class="string">        require(&#x27;</span>keybindings<span class="string">&#x27;).mapLSP(buf_set_keymap)</span></span><br><span class="line"><span class="string">        -- 保存时自动格式化</span></span><br><span class="line"><span class="string">        vim.cmd(&#x27;</span>autocmd BufWritePre &lt;buffer&gt; lua vim.lsp.buf.formatting_sync()<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    end,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 查看目录等信息</span></span><br><span class="line"><span class="string">return &#123;</span></span><br><span class="line"><span class="string">    on_setup = function(server)</span></span><br><span class="line"><span class="string">        server:setup(opts)</span></span><br><span class="line"><span class="string">    end,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



<h5 id="配置-LSP-快捷键"><a href="#配置-LSP-快捷键" class="headerlink" title="配置 LSP 快捷键"></a>配置 LSP 快捷键</h5><p><code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- lsp 回调函数快捷键设置</span><br><span class="line">pluginKeys.mapLSP = <span class="keyword">function</span>(mapbuf)</span><br><span class="line">  -- rename</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;rn&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- code action</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;ca&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- go xx</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gd&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gh&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gD&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- diagnostic</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gp&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gk&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gj&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;f&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- 没用到</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;q&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-k&gt;&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wa&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wr&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wl&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;D&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>





<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 内置LSP (新增)</span><br><span class="line">require(<span class="string">&quot;lsp.setup&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>这里记录下：使用:verbose map可以查看所有生效的快捷键</p>
</blockquote>
<h4 id="基于-LSP-代码补全及自定义代码段"><a href="#基于-LSP-代码补全及自定义代码段" class="headerlink" title="基于 LSP 代码补全及自定义代码段"></a>基于 LSP 代码补全及自定义代码段</h4><h5 id="相关插件：hrsh7th-x2F-nvim-cmp-A-completion-plugin-for-neovim-coded-in-Lua-github-com"><a href="#相关插件：hrsh7th-x2F-nvim-cmp-A-completion-plugin-for-neovim-coded-in-Lua-github-com" class="headerlink" title="相关插件：hrsh7th&#x2F;nvim-cmp: A completion plugin for neovim coded in Lua. (github.com)"></a>相关插件：<a href="https://github.com/hrsh7th/nvim-cmp">hrsh7th&#x2F;nvim-cmp: A completion plugin for neovim coded in Lua. (github.com)</a></h5><h5 id="相关概念："><a href="#相关概念：" class="headerlink" title="相关概念："></a>相关概念：</h5><ol>
<li><p>补全引擎</p>
<p>补全引擎就是为 Neovim 提供代码补全核心功能的插件，比如 nvim-cmp</p>
</li>
<li><p>补全源</p>
<p>补全源就是补全引擎需要的数据来源，最常见的来源是来自 Language Server 提供的数据，它会知道某个类有哪些属性和方法等。</p>
</li>
<li><p>snippet 引擎</p>
<p>snippet 引擎就是自定义代码段的引擎，常见的有 <code>vsnip</code>、<code>luasnip</code> 等</p>
</li>
</ol>
<h5 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 补全引擎</span><br><span class="line">use(<span class="string">&quot;hrsh7th/nvim-cmp&quot;</span>)</span><br><span class="line">-- snippet 引擎</span><br><span class="line">use(<span class="string">&quot;hrsh7th/vim-vsnip&quot;</span>)</span><br><span class="line">-- 补全源</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-vsnip&quot;</span>)</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-nvim-lsp&quot;</span>) -- &#123; name = nvim_lsp &#125;</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-buffer&quot;</span>) -- &#123; name = <span class="string">&#x27;buffer&#x27;</span> &#125;,</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-path&quot;</span>) -- &#123; name = <span class="string">&#x27;path&#x27;</span> &#125;</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-cmdline&quot;</span>) -- &#123; name = <span class="string">&#x27;cmdline&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">-- 常见编程语言代码段</span><br><span class="line">use(<span class="string">&quot;rafamadriz/friendly-snippets&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：只有 <code>hrsh7th/nvim-cmp</code> 是补全引擎插件本身，其他 <code>cmp-xxx</code> 基本都是插件补全来源，也就是说当你输入一个变量的时候，可以从多个来源显示补全的内容。</p>
<p>像 hrsh7th&#x2F;cmp-nvim-lsp 就是 Neovim 内置 LSP 提供的补全内容，hrsh7th&#x2F;cmp-buffer 补全当前 buffer 的内容， hrsh7th&#x2F;cmp-cmdline 是命令行的补全，hrsh7th&#x2F;cmp-path 则是用来补全路径，如果配置了这个，当输入一个路径的时候会补全路径</p>
</blockquote>
<p>创建<code>lua/lsp/cmp.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> cmp = require(<span class="string">&quot;cmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">cmp.setup(&#123;</span><br><span class="line">  -- 指定 snippet 引擎</span><br><span class="line">  snippet = &#123;</span><br><span class="line">    <span class="built_in">expand</span> = <span class="keyword">function</span>(args)</span><br><span class="line">      -- For `vsnip` <span class="built_in">users</span>.</span><br><span class="line">      vim.fn[<span class="string">&quot;vsnip#anonymous&quot;</span>](args.body)</span><br><span class="line"></span><br><span class="line">      -- For `luasnip` <span class="built_in">users</span>.</span><br><span class="line">      -- require(<span class="string">&#x27;luasnip&#x27;</span>).lsp_expand(args.body)</span><br><span class="line"></span><br><span class="line">      -- For `ultisnips` <span class="built_in">users</span>.</span><br><span class="line">      -- vim.fn[<span class="string">&quot;UltiSnips#Anon&quot;</span>](args.body)</span><br><span class="line"></span><br><span class="line">      -- For `snippy` <span class="built_in">users</span>.</span><br><span class="line">      -- require<span class="string">&#x27;snippy&#x27;</span>.expand_snippet(args.body)</span><br><span class="line">    end,</span><br><span class="line">  &#125;,</span><br><span class="line">  -- 补全源</span><br><span class="line">  sources = cmp.config.sources(&#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;nvim_lsp&quot;</span> &#125;,</span><br><span class="line">    -- For vsnip <span class="built_in">users</span>.</span><br><span class="line">    &#123; name = <span class="string">&quot;vsnip&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    -- For luasnip <span class="built_in">users</span>.</span><br><span class="line">    -- &#123; name = <span class="string">&#x27;luasnip&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    --For ultisnips <span class="built_in">users</span>.</span><br><span class="line">    -- &#123; name = <span class="string">&#x27;ultisnips&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    -- -- For snippy <span class="built_in">users</span>.</span><br><span class="line">    -- &#123; name = <span class="string">&#x27;snippy&#x27;</span> &#125;,</span><br><span class="line">  &#125;, &#123; &#123; name = <span class="string">&quot;buffer&quot;</span> &#125;, &#123; name = <span class="string">&quot;path&quot;</span> &#125; &#125;),</span><br><span class="line"></span><br><span class="line">  -- 快捷键设置</span><br><span class="line">  mapping = require(<span class="string">&quot;keybindings&quot;</span>).cmp(cmp),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- / 查找模式使用 buffer 源</span><br><span class="line">cmp.setup.cmdline(<span class="string">&quot;/&quot;</span>, &#123;</span><br><span class="line">  mapping = cmp.mapping.preset.cmdline(),</span><br><span class="line">  sources = &#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;buffer&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- : 命令行模式中使用 path 和 cmdline 源.</span><br><span class="line">cmp.setup.cmdline(<span class="string">&quot;:&quot;</span>, &#123;</span><br><span class="line">  mapping = cmp.mapping.preset.cmdline(),</span><br><span class="line">  sources = cmp.config.sources(&#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;path&quot;</span> &#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;cmdline&quot;</span> &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>lua/keybindings.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nvim-cmp 自动补全</span><br><span class="line">pluginKeys.cmp = <span class="keyword">function</span>(cmp)</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        -- 出现补全</span><br><span class="line">        [<span class="string">&quot;&lt;A-.&gt;&quot;</span>] = cmp.mapping(cmp.mapping.complete(), &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;),</span><br><span class="line">        -- 取消补全</span><br><span class="line">        [<span class="string">&quot;&lt;A-,&gt;&quot;</span>] = cmp.mapping(&#123;</span><br><span class="line">            i = cmp.mapping.abort(),</span><br><span class="line">            c = cmp.mapping.close()</span><br><span class="line">        &#125;),</span><br><span class="line">        -- 上一个</span><br><span class="line">        [<span class="string">&quot;&lt;C-k&gt;&quot;</span>] = cmp.mapping.select_prev_item(),</span><br><span class="line">        -- 下一个</span><br><span class="line">        [<span class="string">&quot;&lt;C-j&gt;&quot;</span>] = cmp.mapping.select_next_item(),</span><br><span class="line">        -- 确认</span><br><span class="line">        [<span class="string">&quot;&lt;CR&gt;&quot;</span>] = cmp.mapping.confirm(&#123;</span><br><span class="line">            select = <span class="literal">true</span>,</span><br><span class="line">            behavior = cmp.ConfirmBehavior.Replace</span><br><span class="line">        &#125;),</span><br><span class="line">        -- 如果窗口内容太多，可以滚动</span><br><span class="line">        [<span class="string">&quot;&lt;C-u&gt;&quot;</span>] = cmp.mapping(cmp.mapping.scroll_docs(-4), &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;),</span><br><span class="line">        [<span class="string">&quot;&lt;C-d&gt;&quot;</span>] = cmp.mapping(cmp.mapping.scroll_docs(4), &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;lsp.cmp&quot;</span>) --  (新增)</span><br></pre></td></tr></table></figure>





<h4 id="LSP-功能增强"><a href="#LSP-功能增强" class="headerlink" title="LSP 功能增强"></a>LSP 功能增强</h4><p>UI 插件，同时 lspage还可以自定义快捷键，对于我自己而言我认为有些地方文字更加直观，如果有些朋友需要美化可自行查找</p>
<h5 id="弹窗显示错误"><a href="#弹窗显示错误" class="headerlink" title="弹窗显示错误"></a>弹窗显示错误</h5><blockquote>
<p>当一行代码很长的时候，右侧的提示文字就会显示不全</p>
</blockquote>
<p>之前配置过 gp 快捷键使用弹窗显示错误，可以有效解决</p>
<h5 id="功能增强"><a href="#功能增强" class="headerlink" title="功能增强"></a>功能增强</h5><h5 id="相关插件：kkharji-x2F-lspsaga-nvim-The-neovim-language-server-client-UI-github-com"><a href="#相关插件：kkharji-x2F-lspsaga-nvim-The-neovim-language-server-client-UI-github-com" class="headerlink" title="相关插件：kkharji&#x2F;lspsaga.nvim: The neovim language-server-client UI (github.com)"></a>相关插件：<a href="https://github.com/kkharji/lspsaga.nvim">kkharji&#x2F;lspsaga.nvim: The neovim language-server-client UI (github.com)</a></h5><h5 id="添加插件-1"><a href="#添加插件-1" class="headerlink" title="添加插件"></a>添加插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(<span class="string">&quot;tami5/lspsaga.nvim&quot;</span> )</span><br></pre></td></tr></table></figure>

<p>创建<code>lua/lsp/ui.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> lspsaga = require <span class="string">&#x27;lspsaga&#x27;</span></span><br><span class="line">lspsaga.setup &#123; -- defaults ...</span><br><span class="line">  debug = <span class="literal">false</span>,</span><br><span class="line">  use_saga_diagnostic_sign = <span class="literal">true</span>,</span><br><span class="line">  -- diagnostic sign</span><br><span class="line">  error_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  warn_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  hint_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  infor_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  diagnostic_header_icon = <span class="string">&quot;   &quot;</span>,</span><br><span class="line">  -- code action title icon</span><br><span class="line">  code_action_icon = <span class="string">&quot; &quot;</span>,</span><br><span class="line">  code_action_prompt = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">    sign = <span class="literal">true</span>,</span><br><span class="line">    sign_priority = 40,</span><br><span class="line">    virtual_text = <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  finder_definition_icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">  finder_reference_icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">  max_preview_lines = 10,</span><br><span class="line">  finder_action_keys = &#123;</span><br><span class="line">    -- open = <span class="string">&quot;o&quot;</span>,</span><br><span class="line">    open = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">    vsplit = <span class="string">&quot;s&quot;</span>,</span><br><span class="line">    <span class="built_in">split</span> = <span class="string">&quot;i&quot;</span>,</span><br><span class="line">    -- quit = <span class="string">&quot;q&quot;</span>,</span><br><span class="line">    quit = <span class="string">&quot;&lt;ESC&gt;&quot;</span>,</span><br><span class="line">    scroll_down = <span class="string">&quot;&lt;C-f&gt;&quot;</span>,</span><br><span class="line">    scroll_up = <span class="string">&quot;&lt;C-b&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  code_action_keys = &#123;</span><br><span class="line">    -- quit = <span class="string">&quot;q&quot;</span>,</span><br><span class="line">    quit = <span class="string">&quot;&lt;ESC&gt;&quot;</span>,</span><br><span class="line">    <span class="built_in">exec</span> = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  rename_action_keys = &#123;</span><br><span class="line">    -- quit = <span class="string">&quot;&lt;C-c&gt;&quot;</span>,</span><br><span class="line">    quit = <span class="string">&quot;&lt;ESC&gt;&quot;</span>,</span><br><span class="line">    <span class="built_in">exec</span> = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  definition_preview_icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">  border_style = <span class="string">&quot;single&quot;</span>,</span><br><span class="line">  rename_prompt_prefix = <span class="string">&quot;➤&quot;</span>,</span><br><span class="line">  rename_output_qflist = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">false</span>,</span><br><span class="line">    auto_open_qflist = <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  server_filetype_map = &#123;&#125;,</span><br><span class="line">  diagnostic_prefix_format = <span class="string">&quot;%d. &quot;</span>,</span><br><span class="line">  diagnostic_message_format = <span class="string">&quot;%m %c&quot;</span>,</span><br><span class="line">  highlight_prefix = <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>lua/keybindings.lua</code>中的mapLSP 函数替换为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- lsp 回调函数快捷键设置</span><br><span class="line">pluginKeys.mapLSP = <span class="keyword">function</span>(mapbuf)</span><br><span class="line">  -- rename</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 rn</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;rn&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;rn&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga rename&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- code action</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 ca</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;ca&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;ca&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga code_action&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- go xx</span><br><span class="line">  --[[</span><br><span class="line">    mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;gd&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;Lspsaga preview_definition&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gd&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 gh</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gh&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gh&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga hover_doc&lt;cr&gt;&quot;</span>, opt)</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 gr</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga lsp_finder&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 gp, gj, gk</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gp&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gj&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gk&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  -- diagnostic</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gp&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga show_line_diagnostics&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gj&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga diagnostic_jump_next&lt;cr&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gk&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga diagnostic_jump_prev&lt;cr&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;f&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.format(&#123; bufnr = bufnr &#125;)&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- 未用</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gD&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;q&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-k&gt;&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wa&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wr&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wl&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;D&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;lsp.ui&quot;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><p>之前<code>lua/keybindings.lua</code>定义过格式化快捷键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;f&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.format(&#123; bufnr = bufnr &#125;)&lt;CR&gt;&quot;</span>, opt)</span><br></pre></td></tr></table></figure>

<p>但是你会发现格式化不起作用，这是因为使用的 Lua Language Server 并没有实现格式化功能。</p>
<p>格式化方案有如下两种：</p>
<ul>
<li>第一种是使用专门的格式化插件；</li>
<li>第二种是给 Language Server 注入格式化功能。</li>
</ul>
<p>这里只讲解第二种</p>
<h5 id="相关插件：jose-elias-alvarez-x2F-null-ls-nvim-Use-Neovim-as-a-language-server-to-inject-LSP-diagnostics-code-actions-and-more-via-Lua-github-com"><a href="#相关插件：jose-elias-alvarez-x2F-null-ls-nvim-Use-Neovim-as-a-language-server-to-inject-LSP-diagnostics-code-actions-and-more-via-Lua-github-com" class="headerlink" title="相关插件：jose-elias-alvarez&#x2F;null-ls.nvim: Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua. (github.com)"></a>相关插件：<a href="https://github.com/jose-elias-alvarez/null-ls.nvim">jose-elias-alvarez&#x2F;null-ls.nvim: Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua. (github.com)</a></h5><h5 id="添加插件-2"><a href="#添加插件-2" class="headerlink" title="添加插件"></a>添加插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 代码格式化</span><br><span class="line">use(&#123; <span class="string">&quot;jose-elias-alvarez/null-ls.nvim&quot;</span>, requires = <span class="string">&quot;nvim-lua/plenary.nvim&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="添加配置文件-lua-lsp-null-ls-lua"><a href="#添加配置文件-lua-lsp-null-ls-lua" class="headerlink" title="添加配置文件 lua/lsp/null-ls.lua"></a>添加配置文件 <code>lua/lsp/null-ls.lua</code></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, null_ls = pcall(require, <span class="string">&quot;null-ls&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 null-ls&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">       <span class="built_in">local</span> formatting = null_ls.builtins.formatting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">null_ls.setup(&#123;</span><br><span class="line">  debug = <span class="literal">false</span>,</span><br><span class="line">  sources = &#123;</span><br><span class="line">    -- Formatting ---------------------</span><br><span class="line">    --  brew install shfmt</span><br><span class="line">    formatting.shfmt,</span><br><span class="line">    -- StyLua</span><br><span class="line">    formatting.stylua,</span><br><span class="line">    -- frontend</span><br><span class="line">    formatting.prettier.with(&#123; -- 只比默认配置少了 markdown</span><br><span class="line">      filetypes = &#123;</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;css&quot;</span>,</span><br><span class="line">        <span class="string">&quot;scss&quot;</span>,</span><br><span class="line">        <span class="string">&quot;less&quot;</span>,</span><br><span class="line">        <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;yaml&quot;</span>,</span><br><span class="line">        <span class="string">&quot;graphql&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    -- formatting.fixjson,</span><br><span class="line">    -- formatting.black.with(&#123; extra_args = &#123; <span class="string">&quot;--fast&quot;</span> &#125; &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  -- 保存自动格式化</span><br><span class="line">    on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">        <span class="keyword">if</span> client.supports_method(<span class="string">&quot;textDocument/formatting&quot;</span>) <span class="keyword">then</span></span><br><span class="line">            vim.api.nvim_clear_autocmds(&#123; group = augroup, buffer = bufnr &#125;)</span><br><span class="line">            vim.api.nvim_create_autocmd(<span class="string">&quot;BufWritePre&quot;</span>, &#123;</span><br><span class="line">                group = augroup,</span><br><span class="line">                buffer = bufnr,</span><br><span class="line">                callback = <span class="keyword">function</span>()</span><br><span class="line">                    -- on 0.8, you should use vim.lsp.buf.format(&#123; bufnr = bufnr &#125;) instead</span><br><span class="line">                    vim.lsp.buf.format(&#123; bufnr = bufnr &#125;)</span><br><span class="line">                    -- vim.lsp.buf.formatting_sync()</span><br><span class="line">                end,</span><br><span class="line">            &#125;)</span><br><span class="line">        end</span><br><span class="line">    end,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;lsp.null-ls&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>安装之后可以运行<code>:LspInfo</code>查看绑定的Language Server</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230512122954608.png" alt="image-20230512122954608"></p>
<p>然后我们可以看到有两个 LSP 了，null-ls 作为通用 LSP，可以在任何 filetypes 中运行。</p>
<p>然后执行<code>:NullLsInfo</code>查看源的激活情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230512123229442.png" alt="image-20230512123229442"></p>
<p>之后的话即可使用<code>:lua vim.lsp.buf.format()</code>命令或是直接使用快捷键<code>&lt;leader&gt;f</code>进行格式化</p>
<p>但是我们会发现包如下错误，这是因为相应语言应该配置相应的Code Formatter，显示报错就是缺少Lua语言的StyLua，其它语言可以自行配置相应的Formatter</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230512140107402.png" alt="image-20230512140107402"></p>
<p>下面展示如何配置stylua</p>
<h5 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h5><p>stylua 需要配置 rust 环境 ，rust官网：<a href="https://www.rust-lang.org/zh-CN/tools/install">安装 Rust - Rust 程序设计语言 (rust-lang.org)</a></p>
<p>因为我是使用WSL，因此直接执行如下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure>

<p>执行<code>source &quot;$HOME/.cargo/env&quot;</code></p>
<p>执行<code>rustc --version</code>看是否成功，失败则看是否添加<code>~/.cargo/bin</code>路径到环境变量中</p>
<h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo install stylua</span><br></pre></td></tr></table></figure>

<p>输出<code>stylua -V</code>看是否成功</p>
<h5 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h5><blockquote>
<p>格式化之后里面的空格就都变成了”^I”, 原本应该是“·”的</p>
</blockquote>
<p>直接将<code>basic.lua</code>文件中设置<code>vim.o.listchars = &quot;space:·,tab:··&quot;</code>或是设置<code>vim.o.list = false</code></p>
<h4 id="前端开发必要配置"><a href="#前端开发必要配置" class="headerlink" title="前端开发必要配置"></a>前端开发必要配置</h4><h5 id="配置语法高亮"><a href="#配置语法高亮" class="headerlink" title="配置语法高亮"></a>配置语法高亮</h5><p>执行<code>:TSInstall css scss json html vue javascript typescript</code></p>
<p>执行<code>:TSInstallInfo</code>查看安装情况</p>
<h5 id="配置-LSP"><a href="#配置-LSP" class="headerlink" title="配置 LSP"></a>配置 LSP</h5><p><code>lua/lsp/setup.lua</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<code>lsp/common-config.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line">M.keyAttach = <span class="keyword">function</span>(bufnr)</span><br><span class="line">  <span class="built_in">local</span> <span class="keyword">function</span> buf_set_keymap(mode, lhs, rhs)</span><br><span class="line">    vim.keymap.set(mode, lhs, rhs, &#123; noremap = <span class="literal">true</span>, silent = <span class="literal">true</span>, buffer = bufnr &#125;)</span><br><span class="line">  end</span><br><span class="line">  -- 绑定快捷键</span><br><span class="line">  require(<span class="string">&quot;keybindings&quot;</span>).mapLSP(buf_set_keymap)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 禁用格式化功能，交给专门插件插件处理</span><br><span class="line">M.disableFormat = <span class="keyword">function</span>(client)</span><br><span class="line">  <span class="keyword">if</span> vim.fn.has(<span class="string">&quot;nvim-0.8&quot;</span>) == 1 <span class="keyword">then</span></span><br><span class="line">    client.server_capabilities.documentFormattingProvider = <span class="literal">false</span></span><br><span class="line">    client.server_capabilities.documentRangeFormattingProvider = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    client.resolved_capabilities.document_formatting = <span class="literal">false</span></span><br><span class="line">    client.resolved_capabilities.document_range_formatting = <span class="literal">false</span></span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- M.capabilities = require(<span class="string">&quot;cmp_nvim_lsp&quot;</span>).update_capabilities(vim.lsp.protocol.make_client_capabilities())</span><br><span class="line">M.capabilities = require(<span class="string">&quot;cmp_nvim_lsp&quot;</span>).default_capabilities()</span><br><span class="line"></span><br><span class="line">M.flags = &#123;</span><br><span class="line">  debounce_text_changes = 150,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> M</span><br></pre></td></tr></table></figure>





<p>创建<code>lsp/config/html.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">  	-- 禁用本身语言格式化</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>创建<code>lsp/config/css.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">  end,</span><br><span class="line">  settings = &#123;</span><br><span class="line">    css = &#123;</span><br><span class="line">      validate = <span class="literal">true</span>,</span><br><span class="line">      -- tailwindcss</span><br><span class="line">      lint = &#123;</span><br><span class="line">        unknownAtRules = <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    less = &#123;</span><br><span class="line">      validate = <span class="literal">true</span>,</span><br><span class="line">      lint = &#123;</span><br><span class="line">        unknownAtRules = <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    scss = &#123;</span><br><span class="line">      validate = <span class="literal">true</span>,</span><br><span class="line">      lint = &#123;</span><br><span class="line">        unknownAtRules = <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>上面不禁用的话也是可以的，只不过会和默认的null-ls中的 prettier 格式化冲突，每次格式化都需要选择</p>
</blockquote>
<p>注意html、css文件均是需要项目根目录有<code>package.json</code>文件和prettier依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建package.json并安装prettier依赖，顺便把eslint也配置上</span></span><br><span class="line">npm init -y &amp;&amp; npm i -D prettier eslint</span><br></pre></td></tr></table></figure>











<h5 id="Emmet-LSP-配置"><a href="#Emmet-LSP-配置" class="headerlink" title="Emmet LSP 配置"></a>Emmet LSP 配置</h5><p>使用 emmet 可是使用简单的语法可以快速打出 HTML 结构标签</p>
<p>创建<code>lua/lsp/config/emmet.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  filetypes = &#123; <span class="string">&quot;html&quot;</span>, <span class="string">&quot;typescriptreact&quot;</span>, <span class="string">&quot;javascriptreact&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;sass&quot;</span>, <span class="string">&quot;scss&quot;</span>, <span class="string">&quot;less&quot;</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>lua/lsp/setup.lua</code>修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    emmet_ls = require(<span class="string">&quot;lsp.config.emmet&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="配置-jsonls"><a href="#配置-jsonls" class="headerlink" title="配置 jsonls"></a>配置 jsonls</h5><p>JSON Schema Store 插件，即JSON增强包</p>
<p><code>plugins.lua</code>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- JSON 增强</span><br><span class="line">use(<span class="string">&quot;b0o/schemastore.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>





<p>新建<code>lua/lsp/config/json.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">    -- use fixjson to format</span><br><span class="line">    -- https://github.com/rhysd/fixjson</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">  end,</span><br><span class="line">  settings = &#123;</span><br><span class="line">    json = &#123;</span><br><span class="line">      schemas = require(<span class="string">&quot;schemastore&quot;</span>).json.schemas(),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>lsp/config/setup.lua</code>修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>,<span class="string">&quot;jsonls&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>),</span><br><span class="line">    emmet_ls = require(<span class="string">&quot;lsp.config.emmet&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    jsonls = require(<span class="string">&quot;lsp.config.json&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="配置-tssserver"><a href="#配置-tssserver" class="headerlink" title="配置 tssserver"></a>配置 tssserver</h5><p>添加TS增强包插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(&#123; <span class="string">&quot;jose-elias-alvarez/nvim-lsp-ts-utils&quot;</span>, requires = <span class="string">&quot;nvim-lua/plenary.nvim&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<p>创建<code>lsp/config/ts.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> keybindings = require(<span class="string">&quot;keybindings&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> ts_utils = require(<span class="string">&quot;nvim-lsp-ts-utils&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line"></span><br><span class="line">  -- https://github.com/jose-elias-alvarez/nvim-lsp-ts-utils/blob/main/lua/nvim-lsp-ts-utils/utils.lua</span><br><span class="line">  -- 传入 tsserver 初始化参数</span><br><span class="line">  -- make inlay hints work</span><br><span class="line">  init_options = &#123;</span><br><span class="line">    hostInfo = <span class="string">&quot;neovim&quot;</span>,</span><br><span class="line">    preferences = &#123;</span><br><span class="line">      includeInlayParameterNameHints = <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      includeInlayParameterNameHintsWhenArgumentMatchesName = <span class="literal">true</span>,</span><br><span class="line">      includeInlayFunctionParameterTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayVariableTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayPropertyDeclarationTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayFunctionLikeReturnTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayEnumMemberValueHints = <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">    -- defaults</span><br><span class="line">    ts_utils.setup(&#123;</span><br><span class="line">      debug = <span class="literal">false</span>,</span><br><span class="line">      disable_commands = <span class="literal">false</span>,</span><br><span class="line">      enable_import_on_completion = <span class="literal">false</span>,</span><br><span class="line">      -- import all</span><br><span class="line">      import_all_timeout = 5000, -- ms</span><br><span class="line">      -- lower numbers = higher priority</span><br><span class="line">      import_all_priorities = &#123;</span><br><span class="line">        same_file = 1, -- add to existing import statement</span><br><span class="line">        local_files = 2, -- git files or files with relative path markers</span><br><span class="line">        buffer_content = 3, -- loaded buffer content</span><br><span class="line">        buffers = 4, -- loaded buffer names</span><br><span class="line">      &#125;,</span><br><span class="line">      import_all_scan_buffers = 100,</span><br><span class="line">      import_all_select_source = <span class="literal">false</span>,</span><br><span class="line">      -- <span class="keyword">if</span> <span class="literal">false</span> will avoid organizing imports</span><br><span class="line">      always_organize_imports = <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      -- filter diagnostics</span><br><span class="line">      filter_out_diagnostics_by_severity = &#123;&#125;,</span><br><span class="line">      -- https://github.com/microsoft/TypeScript/blob/main/src/compiler/diagnosticMessages.json</span><br><span class="line">      filter_out_diagnostics_by_code = &#123;</span><br><span class="line">        80001,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      -- inlay hints</span><br><span class="line">      auto_inlay_hints = <span class="literal">true</span>,</span><br><span class="line">      inlay_hints_highlight = <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">      inlay_hints_priority = 200, -- priority of the hint extmarks</span><br><span class="line">      inlay_hints_throttle = 150, -- throttle the inlay hint request</span><br><span class="line">      inlay_hints_format = &#123; -- format options <span class="keyword">for</span> individual hint kind</span><br><span class="line">        Type = &#123;&#125;,</span><br><span class="line">        Parameter = &#123;&#125;,</span><br><span class="line">        Enum = &#123;&#125;,</span><br><span class="line">        -- Example format customization <span class="keyword">for</span> `Type` kind:</span><br><span class="line">        -- Type = &#123;</span><br><span class="line">        --     highlight = <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">        --     text = <span class="keyword">function</span>(text)</span><br><span class="line">        --         <span class="built_in">return</span> <span class="string">&quot;-&gt;&quot;</span> .. text:sub(2)</span><br><span class="line">        --     end,</span><br><span class="line">        -- &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      -- update imports on file move</span><br><span class="line">      update_imports_on_move = <span class="literal">false</span>,</span><br><span class="line">      require_confirmation_on_move = <span class="literal">false</span>,</span><br><span class="line">      watch_dir = nil,</span><br><span class="line">    &#125;)</span><br><span class="line">    -- required to fix code action ranges and filter diagnostics</span><br><span class="line">    ts_utils.setup_client(client)</span><br><span class="line">    -- no default maps, so you may want to define some here</span><br><span class="line">    keybindings.mapTsLSP(bufnr)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>同样<code>setup.lua</code>修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>, <span class="string">&quot;jsonls&quot;</span>, <span class="string">&quot;tsserver&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- 安装列表</span><br><span class="line">-- &#123; key: 服务器名， value: 配置文件 &#125;</span><br><span class="line">-- key 必须为下列网址列出的 server name，不可以随便写</span><br><span class="line">-- https://github.com/williamboman/nvim-lsp-installer<span class="comment">#available-lsps</span></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>),</span><br><span class="line">    emmet_ls = require(<span class="string">&quot;lsp.config.emmet&quot;</span>),</span><br><span class="line">    jsonls = require(<span class="string">&quot;lsp.config.json&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    tsserver = require(<span class="string">&quot;lsp.config.ts&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加快捷键<code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- typescript 快捷键</span><br><span class="line">pluginKeys.mapTsLSP = <span class="keyword">function</span>(mapbuf)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gs&quot;</span>, <span class="string">&quot;:TSLspOrganize&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;:TSLspRenameFile&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;:TSLspImportAll&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<ul>
<li>gs 删除不用的 import 语句并重新排序。</li>
<li>gr 用于改变文件名，同时其他文件中引用该文件的文件名也会被修改。</li>
<li>gi 导入当前文件的所有依赖，并且会自动排序</li>
</ul>
<h5 id="ESLint-和-Prettier-配置"><a href="#ESLint-和-Prettier-配置" class="headerlink" title="ESLint 和 Prettier 配置"></a>ESLint 和 Prettier 配置</h5><p>null-ls 中除了格式化 Formatting，还有Diagnostics（红字错误提示） 和 Code Actions（代码触发的行为）</p>
<p><code>lsp/null-ls.lua</code>修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, null_ls = pcall(require, <span class="string">&quot;null-ls&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 null-ls&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> formatting = null_ls.builtins.formatting</span><br><span class="line"><span class="built_in">local</span> diagnostics = null_ls.builtins.diagnostics</span><br><span class="line"><span class="built_in">local</span> code_actions = null_ls.builtins.code_actions</span><br><span class="line"></span><br><span class="line">null_ls.setup(&#123;</span><br><span class="line">    debug = <span class="literal">false</span>,</span><br><span class="line">    sources = &#123; -- Formatting ---------------------</span><br><span class="line">    --  brew install shfmt</span><br><span class="line">    formatting.shfmt, -- StyLua</span><br><span class="line">    formatting.stylua, -- frontend</span><br><span class="line">    formatting.prettier.with(&#123; -- 只比默认配置少了 markdown</span><br><span class="line">        filetypes = &#123;<span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;javascriptreact&quot;</span>, <span class="string">&quot;typescript&quot;</span>, <span class="string">&quot;typescriptreact&quot;</span>, <span class="string">&quot;vue&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;scss&quot;</span>, <span class="string">&quot;less&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;html&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;yaml&quot;</span>, <span class="string">&quot;graphql&quot;</span>&#125;,</span><br><span class="line">        prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span></span><br><span class="line">    &#125;), -- Diagnostics  ---------------------</span><br><span class="line">    diagnostics.eslint.with(&#123;</span><br><span class="line">        prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span></span><br><span class="line">    &#125;), -- code actions ---------------------</span><br><span class="line">    code_actions.gitsigns, code_actions.eslint.with(&#123;</span><br><span class="line">        prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span></span><br><span class="line">    &#125;)&#125;,</span><br><span class="line">    -- <span class="comment">#&#123;m&#125;: message</span></span><br><span class="line">    -- <span class="comment">#&#123;s&#125;: source name (defaults to null-ls if not specified)</span></span><br><span class="line">    -- <span class="comment">#&#123;c&#125;: code (if available)</span></span><br><span class="line">    diagnostics_format = <span class="string">&quot;[#&#123;s&#125;] #&#123;m&#125;&quot;</span>,</span><br><span class="line">    -- 保存自动格式化</span><br><span class="line">    on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">        <span class="keyword">if</span> client.supports_method(<span class="string">&quot;textDocument/formatting&quot;</span>) <span class="keyword">then</span></span><br><span class="line">            vim.api.nvim_clear_autocmds(&#123;</span><br><span class="line">                group = augroup,</span><br><span class="line">                buffer = bufnr</span><br><span class="line">            &#125;)</span><br><span class="line">            vim.api.nvim_create_autocmd(<span class="string">&quot;BufWritePre&quot;</span>, &#123;</span><br><span class="line">                group = augroup,</span><br><span class="line">                buffer = bufnr,</span><br><span class="line">                callback = <span class="keyword">function</span>()</span><br><span class="line">                    -- on 0.8, you should use vim.lsp.buf.format(&#123; bufnr = bufnr &#125;) instead</span><br><span class="line">                    vim.lsp.buf.format(&#123;</span><br><span class="line">                        bufnr = bufnr</span><br><span class="line">                    &#125;)</span><br><span class="line">                    -- vim.lsp.buf.formatting_sync()</span><br><span class="line">                end</span><br><span class="line">            &#125;)</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>code_actions.gitsigns 没有安装可以注释掉</p>
</blockquote>
<p>使用<code>&lt;leader&gt;ca</code>调用 Code Action 自动修复快捷键  </p>
<h4 id="Rust-开发配置"><a href="#Rust-开发配置" class="headerlink" title="Rust 开发配置"></a>Rust 开发配置</h4><p>前文已安装rust环境，此处不赘述</p>
<h5 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h5><p><code>plugin-config/nvim-treesitter.lua</code>中的ensure_installed中添加”rust”</p>
<p>或是执行<code>:TSInstall rust</code></p>
<h5 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h5><p><code>lsp/setup.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>, <span class="string">&quot;jsonls&quot;</span>, <span class="string">&quot;rust_analyzer&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">  -- 新增</span><br><span class="line">  rust_analyzer = require(<span class="string">&quot;lsp.config.rust&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><code>lsp/config/rust.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">        capabilities = common.capabilities,</span><br><span class="line">        flags = common.flags,</span><br><span class="line">        on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">                common.disableFormat(client)</span><br><span class="line">                common.keyAttach(bufnr)</span><br><span class="line">        end,</span><br><span class="line">        settings = &#123;</span><br><span class="line">                -- to <span class="built_in">enable</span> rust-analyzer settings visit:</span><br><span class="line">                -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc</span><br><span class="line">                [<span class="string">&quot;rust-analyzer&quot;</span>] = &#123;</span><br><span class="line">                        -- <span class="built_in">enable</span> clippy on save</span><br><span class="line">                        checkOnSave = &#123;</span><br><span class="line">                                <span class="built_in">command</span> = <span class="string">&quot;clippy&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">        on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">                <span class="built_in">local</span> ok_rt, rust_tools = pcall(require, <span class="string">&quot;rust-tools&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> not ok_rt <span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Failed to load rust tools, will set up `rust_analyzer` without `rust-tools`.&quot;</span>)</span><br><span class="line">                        server.setup(opts)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        -- We don<span class="string">&#x27;t want to call lspconfig.rust_analyzer.setup() when using rust-tools</span></span><br><span class="line"><span class="string">                        rust_tools.setup(&#123;</span></span><br><span class="line"><span class="string">                                server = opts,</span></span><br><span class="line"><span class="string">                                -- dap = require(&quot;dap.nvim-dap.config.rust&quot;),</span></span><br><span class="line"><span class="string">                        &#125;)</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">        end,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<p>添加 Rust 增强包插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Rust 增强</span><br><span class="line">use(<span class="string">&quot;simrat39/rust-tools.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="代码格式化-1"><a href="#代码格式化-1" class="headerlink" title="代码格式化"></a>代码格式化</h5><p>安装相应 Formtter</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup component add rustfmt</span><br></pre></td></tr></table></figure>

<p><code>null-ls.lua</code></p>
<p>source中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- rustfmt</span><br><span class="line">formatting.rustfmt,</span><br></pre></td></tr></table></figure>

<p>filetypes中添加<code>&quot;rust&quot;</code></p>
<h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><h5 id="自动补全括号"><a href="#自动补全括号" class="headerlink" title="自动补全括号"></a>自动补全括号</h5><p>插件仓库：<a href="https://github.com/windwp/nvim-autopairs">windwp&#x2F;nvim-autopairs: autopairs for neovim written by lua (github.com)</a></p>
<p>引入插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(<span class="string">&quot;windwp/nvim-autopairs&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>创建<code>lua/plugin-config/nvim-autopairs.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- https://github.com/windwp/nvim-autopairs</span><br><span class="line"><span class="built_in">local</span> status, autopairs = pcall(require, <span class="string">&quot;nvim-autopairs&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 nvim-autopairs&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line">autopairs.setup(&#123;</span><br><span class="line">  check_ts = <span class="literal">true</span>,</span><br><span class="line">  ts_config = &#123;</span><br><span class="line">    lua = &#123; <span class="string">&quot;string&quot;</span> &#125;, -- it will not add a pair on that treesitter node</span><br><span class="line">    javascript = &#123; <span class="string">&quot;template_string&quot;</span> &#125;,</span><br><span class="line">    java = <span class="literal">false</span>, -- don<span class="string">&#x27;t check treesitter on java</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">-- If you want insert `(` after select function or method item</span></span><br><span class="line"><span class="string">local cmp_autopairs = require(&quot;nvim-autopairs.completion.cmp&quot;)</span></span><br><span class="line"><span class="string">local cmp = require(&quot;cmp&quot;)</span></span><br><span class="line"><span class="string">cmp.event:on(&quot;confirm_done&quot;, cmp_autopairs.on_confirm_done(&#123; map_char = &#123; tex = &quot;&quot; &#125; &#125;))</span></span><br></pre></td></tr></table></figure>

<p><code>init.lua</code></p>
<h5 id="快速注释插件"><a href="#快速注释插件" class="headerlink" title="快速注释插件"></a>快速注释插件</h5><p>插件仓库：<a href="https://github.com/numToStr/Comment.nvim">numToStr&#x2F;Comment.nvim: &#x2F;&#x2F; Smart and powerful comment plugin for neovim. Supports treesitter, dot repeat, left-right&#x2F;up-down motions, hooks, and more (github.com)</a></p>
<p>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(<span class="string">&quot;numToStr/Comment.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>创建<code>lua/plugin-config/comment.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, comment = pcall(require, <span class="string">&quot;Comment&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 Comment&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> default_opts = &#123;</span><br><span class="line">  ---Add a space b/w comment and the line</span><br><span class="line">  ---@<span class="built_in">type</span> boolean|fun():boolean</span><br><span class="line">  padding = <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  ---Whether the cursor should stay at its position</span><br><span class="line">  ---NOTE: This only affects NORMAL mode mappings and doesn<span class="string">&#x27;t work with dot-repeat</span></span><br><span class="line"><span class="string">  ---@type boolean</span></span><br><span class="line"><span class="string">  sticky = true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---Lines to be ignored while comment/uncomment.</span></span><br><span class="line"><span class="string">  ---Could be a regex string or a function that returns a regex string.</span></span><br><span class="line"><span class="string">  ---Example: Use &#x27;</span>^$<span class="string">&#x27; to ignore empty lines</span></span><br><span class="line"><span class="string">  ---@type string|fun():string</span></span><br><span class="line"><span class="string">  ignore = nil,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---LHS of toggle mappings in NORMAL + VISUAL mode</span></span><br><span class="line"><span class="string">  ---@type table</span></span><br><span class="line"><span class="string">  toggler = &#123;</span></span><br><span class="line"><span class="string">    ---Line-comment toggle keymap</span></span><br><span class="line"><span class="string">    line = &quot;gcc&quot;,</span></span><br><span class="line"><span class="string">    ---Block-comment toggle keymap</span></span><br><span class="line"><span class="string">    block = &quot;gbc&quot;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---LHS of operator-pending mappings in NORMAL + VISUAL mode</span></span><br><span class="line"><span class="string">  ---@type table</span></span><br><span class="line"><span class="string">  opleader = &#123;</span></span><br><span class="line"><span class="string">    ---Line-comment keymap</span></span><br><span class="line"><span class="string">    line = &quot;gc&quot;,</span></span><br><span class="line"><span class="string">    ---Block-comment keymap</span></span><br><span class="line"><span class="string">    block = &quot;gb&quot;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---LHS of extra mappings</span></span><br><span class="line"><span class="string">  ---@type table</span></span><br><span class="line"><span class="string">  extra = &#123;</span></span><br><span class="line"><span class="string">    ---Add comment on the line above</span></span><br><span class="line"><span class="string">    above = &quot;gcO&quot;,</span></span><br><span class="line"><span class="string">    ---Add comment on the line below</span></span><br><span class="line"><span class="string">    below = &quot;gco&quot;,</span></span><br><span class="line"><span class="string">    ---Add comment at the end of line</span></span><br><span class="line"><span class="string">    eol = &quot;gcA&quot;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---Create basic (operator-pending) and extended mappings for NORMAL + VISUAL mode</span></span><br><span class="line"><span class="string">  ---NOTE: If `mappings = false` then the plugin won&#x27;</span>t create any mappings</span><br><span class="line">  ---@<span class="built_in">type</span> boolean|table</span><br><span class="line">  mappings = &#123;</span><br><span class="line">    ---Operator-pending mapping</span><br><span class="line">    ---Includes `gcc`, `gbc`, `gc[count]&#123;motion&#125;` and `gb[count]&#123;motion&#125;`</span><br><span class="line">    ---NOTE: These mappings can be changed individually by `opleader` and `toggler` config</span><br><span class="line">    basic = <span class="literal">true</span>,</span><br><span class="line">    ---Extra mapping</span><br><span class="line">    ---Includes `gco`, `gcO`, `gcA`</span><br><span class="line">    extra = <span class="literal">false</span>,</span><br><span class="line">    ---Extended mapping</span><br><span class="line">    ---Includes `g&gt;`, `g&lt;`, `g&gt;[count]&#123;motion&#125;` and `g&lt;[count]&#123;motion&#125;`</span><br><span class="line">    extended = <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  ---Pre-hook, called before commenting the line</span><br><span class="line">  ---@<span class="built_in">type</span> fun(ctx: Ctx):string</span><br><span class="line">  pre_hook = nil,</span><br><span class="line"></span><br><span class="line">  ---Post-hook, called after commenting is <span class="keyword">done</span></span><br><span class="line">  ---@<span class="built_in">type</span> fun(ctx: Ctx)</span><br><span class="line">  post_hook = nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-- 关闭了extra快捷键，只用keybindings里定义的基础快捷键</span><br><span class="line">comment.setup(vim.tbl_deep_extend(<span class="string">&quot;force&quot;</span>, default_opts, require(<span class="string">&quot;keybindings&quot;</span>).comment))</span><br></pre></td></tr></table></figure>



<p>定义快捷键 <code>keybindings.lua</code> gcc 快捷键作为行注释，gbc 快捷键作为块注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 代码注释插件</span><br><span class="line">-- see ./lua/plugin-config/comment.lua</span><br><span class="line">pluginKeys.comment = &#123;</span><br><span class="line">  -- Normal 模式快捷键</span><br><span class="line">  toggler = &#123;</span><br><span class="line">    line = <span class="string">&quot;gcc&quot;</span>, -- 行注释</span><br><span class="line">    block = <span class="string">&quot;gbc&quot;</span>, -- 块注释</span><br><span class="line">  &#125;,</span><br><span class="line">  -- Visual 模式</span><br><span class="line">  opleader = &#123;</span><br><span class="line">    line = <span class="string">&quot;gc&quot;</span>,</span><br><span class="line">    bock = <span class="string">&quot;gb&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>中引入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.comment&quot;</span>)</span><br></pre></td></tr></table></figure>





<h5 id="Surround-配置"><a href="#Surround-配置" class="headerlink" title="Surround 配置"></a>Surround 配置</h5><p>引入插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- surround</span><br><span class="line">use(<span class="string">&quot;ur4ltz/surround.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>lua/plugin-config/surround.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, surround = pcall(require, <span class="string">&quot;surround&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 surround&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">surround.setup(&#123;</span><br><span class="line">  mappings_style = <span class="string">&quot;surround&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code></p>
<p>surround 官方快捷键如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Normal Mode - Sandwich Mode</span><br><span class="line">Provides key mapping to add surrounding characters.( visually select <span class="keyword">then</span> press s&lt;char&gt; or press sa&#123;motion&#125;&#123;char&#125;)</span><br><span class="line">Provides key mapping to replace surrounding characters.( sr&lt;from&gt;&lt;to&gt; )</span><br><span class="line">Provides key mapping to delete surrounding characters.( sd&lt;char&gt; )</span><br><span class="line">ss repeats last surround <span class="built_in">command</span>.</span><br><span class="line">Normal Mode - Surround Mode</span><br><span class="line">Provides key mapping to add surrounding characters.( visually select <span class="keyword">then</span> press s&lt;char&gt; or press ys&#123;motion&#125;&#123;char&#125;)</span><br><span class="line">Provides key mapping to replace surrounding characters.( cs&lt;from&gt;&lt;to&gt; )</span><br><span class="line">Provides key mapping to delete surrounding characters.( ds&lt;char&gt; )</span><br><span class="line">Insert Mode</span><br><span class="line">&lt;c-s&gt;&lt;char&gt; will insert both pairs <span class="keyword">in</span> insert mode.</span><br><span class="line">&lt;c-s&gt;&lt;char&gt;&lt;space&gt; will insert both pairs <span class="keyword">in</span> insert mode with surrounding whitespace.</span><br><span class="line">&lt;c-s&gt;&lt;char&gt;&lt;c-s&gt; will insert both pairs on newlines insert mode.</span><br></pre></td></tr></table></figure>

<p>常用快捷键</p>
<ul>
<li><code>ds&lt;char&gt;</code></li>
<li><code>cs&lt;from&gt;&lt;to&gt;</code></li>
<li><code>ys&#123;motion&#125;&#123;char&#125;</code></li>
</ul>
<p>我在推送仓库时频繁遇到<code>GnuTLS recv error (-110)</code></p>
<p>解决链接：<a href="https://stackoverflow.com/questions/52529639/gnutls-recv-error-110-the-tls-connection-was-non-properly-terminated#">git - GnuTLS recv error (-110)</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line">sudo apt-get install build-essential fakeroot dpkg-dev -y</span><br><span class="line">sudo apt-get build-dep git -y</span><br><span class="line">sudo apt-get install libcurl4-openssl-dev -y</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> source-git</span><br><span class="line"><span class="built_in">cd</span> source-git/</span><br><span class="line">apt-get <span class="built_in">source</span> git</span><br><span class="line"><span class="built_in">cd</span> git-2.*.*/</span><br><span class="line">sed -i -- <span class="string">&#x27;s/libcurl4-gnutls-dev/libcurl4-openssl-dev/&#x27;</span> ./debian/control</span><br><span class="line">sed -i -- <span class="string">&#x27;/TEST\s*=\s*test/d&#x27;</span> ./debian/rules</span><br><span class="line">dpkg-buildpackage -rfakeroot -b -uc -us</span><br><span class="line">sudo dpkg -i ../git_*ubuntu*.deb</span><br></pre></td></tr></table></figure>

<p>直接运行这个脚本即可</p>
<p>之后推送遇到<code>remote: Support for password authentication was removed on August 13, 2021</code>问题，虽然我不太清楚我配了SSH key，为什么还是走的密码验证，但是我还是按照他的提示来做获取<code>token</code>，直接github首页中Setting-&gt;Developer settings-&gt;Personal access tokens 生成token</p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</span><br></pre></td></tr></table></figure>

<p>最后即可免密推送</p>
<p>本篇博客示例配置仓库：<a href="https://github.com/ReturnTmp/rettmp-nvim">ReturnTmp&#x2F;rettmp-nvim</a></p>
<p>对我自己而言，配置的这些功能虽然少，但是暂时够用，如果追求更多的功能，可以直接看小册作者的仓库，或是其他优秀仓库</p>
<p>掘金小册作者仓库：<a href="https://github.com/nshen/learn-neovim-lua">https://github.com/nshen/learn-neovim-lua</a></p>
<blockquote>
<p>注意：v2分支是neovim 8.0+适用</p>
</blockquote>
<p>或是直接使用作者的新仓库：<a href="https://github.com/nshen/InsisVim">nshen&#x2F;InsisVim: 🗃 An out-of-the-box Neovim IDE solution that setup development environment in an incredibly simple way. (github.com)</a></p>
<p>其实作为个人使用来说，不是很推荐自己配置，只需要看懂本篇博客，然后可以做到更改别人写好的配置即可</p>
<blockquote>
<p>除了小册作者的配置仓库，这里再推荐一个优秀Neovim配置仓库：<a href="https://github.com/ayamir/nvimdots">ayamir&#x2F;nvimdots: A well configured and structured Neovim. (github.com)</a></p>
</blockquote>
<p>至此Neovim配置学习就结束了:smile:</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
