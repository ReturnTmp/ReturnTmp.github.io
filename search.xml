<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android学习笔记</title>
    <url>/2023/04/04/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>本文需要有一定开发基础，对纯小白并不友好，仅作个人学习笔记，配置环境及安装应用省略~</p>
</blockquote>
<h3 id="应用资源概览"><a href="#应用资源概览" class="headerlink" title="应用资源概览"></a>应用资源概览</h3><p>资源是指代码使用的附加文件和静态内容，例如位图、布局定义、界面字符串、动画说明等。将应用资源分离之后，您便可使用在项目的 <code>R</code> 类中生成的资源 ID 对其进行访问。</p>
<h4 id="分组资源类型"><a href="#分组资源类型" class="headerlink" title="分组资源类型"></a>分组资源类型</h4><p>常见分组类型：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MyProject/</span><br><span class="line">    src/</span><br><span class="line">        MyActivity.java</span><br><span class="line">    res/</span><br><span class="line">        drawable/</span><br><span class="line">            graphic.png</span><br><span class="line">        layout/</span><br><span class="line">            main.xml</span><br><span class="line">            info.xml</span><br><span class="line">        mipmap/</span><br><span class="line">            icon.png</span><br><span class="line">        values/</span><br><span class="line">            strings.xml</span><br></pre></td></tr></table></figure>

<p><code>res/</code> 目录中支持的资源目录，详细请看：<a href="https://developer.android.google.cn/guide/topics/resources/providing-resources?hl=zh-cn#ResourceTypes">链接</a></p>
<p><em>切勿将资源文件直接保存在 <code>res/</code> 目录内，否则会导致编译器错误</em></p>
<h3 id="访问应用资源"><a href="#访问应用资源" class="headerlink" title="访问应用资源"></a>访问应用资源</h3><p>在应用中提供资源后，您可通过引用其资源 ID 来应用该资源。所有资源 ID 都在您项目的 <code>R</code> 类中进行定义，该类由 <code>aapt</code> 工具自动生成。</p>
<p>编译应用时，<code>aapt</code> 会生成 <code>R</code> 类，其中包含 <code>res/</code> 目录中所有资源的资源 ID。每种类型的资源都有对应的 <code>R</code> 子类（例如，<code>R.drawable</code> 对应所有可绘制资源），且相应类型的每个资源都有对应的静态整数（例如 <code>R.drawable.icon</code>）。该整数是可用于检索资源的资源 ID。</p>
<h4 id="访问资源两种方式："><a href="#访问资源两种方式：" class="headerlink" title="访问资源两种方式："></a>访问资源两种方式：</h4><ul>
<li><p>在代码中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R.string.hello</span><br></pre></td></tr></table></figure>

<p><code>string</code> 为资源类型，<code>hello</code> 为资源名称。当您提供此格式的资源 ID 时，有许多 Android API 可以访问您的资源。请参阅<a href="https://developer.android.google.cn/guide/topics/resources/providing-resources?hl=zh-cn#ResourcesFromCode">在代码中访问资源</a>。</p>
</li>
<li><p>在 XML 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@string/hello</span><br></pre></td></tr></table></figure>

<p><code>string</code> 为资源类型，<code>hello</code> 为资源名称。只要 XML 资源中的某处拥有您在资源中提供的值，您便可在该 XML 资源中使用此语法。请参阅<a href="https://developer.android.google.cn/guide/topics/resources/providing-resources?hl=zh-cn#ResourcesFromXml">在 XML 中访问资源</a>。</p>
</li>
</ul>
<h5 id="特殊资源访问方式："><a href="#特殊资源访问方式：" class="headerlink" title="特殊资源访问方式："></a>特殊资源访问方式：</h5><p><a href="https://developer.android.google.cn/guide/topics/resources/string-resource?hl=zh-cn">字符串资源</a></p>
<p>定义字符串、字符串数组和复数形式（且包括字符串格式和样式设置）。<br>保存在 <code>res/values/</code> 中，可通过 <code>R.string</code>、<code>R.array</code> 和 <code>R.plurals</code> 类访问。</p>
<p><a href="https://developer.android.google.cn/guide/topics/resources/style-resource?hl=zh-cn">样式资源</a></p>
<p>定义界面元素的外观和格式。<br>保存在 <code>res/values/</code> 中，可通过 <code>R.style</code> 类访问。</p>
<h4 id="代码中访问资源"><a href="#代码中访问资源" class="headerlink" title="代码中访问资源"></a>代码中访问资源</h4><h5 id="findViewById"><a href="#findViewById" class="headerlink" title="findViewById"></a>findViewById</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ImageView</span> <span class="variable">imageView</span> <span class="operator">=</span> (ImageView) findViewById(R.id.myimageview);</span><br><span class="line">imageView.setImageResource(R.drawable.myimage);</span><br></pre></td></tr></table></figure>



<h5 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getWindow().setTitle(getResources().getText(R.string.main_title));</span><br><span class="line"><span class="comment">// R.string.main_title 返回的是一个资源ID，是一个int值，然后通过getResources()得到Resource对象，Resource调用getText方法（内置参数校验注解@StringRes，保证参数为资源ID）得到CharSequence接口，该接口是java中统一char类型访问的统一接口，之后通过setTitle设置window标题</span></span><br></pre></td></tr></table></figure>

<h4 id="在-XML-中访问资源"><a href="#在-XML-中访问资源" class="headerlink" title="在 XML 中访问资源"></a>在 XML 中访问资源</h4><h5 id="引用自己软件包中资源"><a href="#引用自己软件包中资源" class="headerlink" title="引用自己软件包中资源"></a>引用自己软件包中资源</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@string/submit&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="引用系统资源："><a href="#引用系统资源：" class="headerlink" title="引用系统资源："></a>引用系统资源：</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">EditText</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/secondary_text_dark&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@string/hello&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="引用样式属性："><a href="#引用样式属性：" class="headerlink" title="引用样式属性："></a>引用样式属性：</h5><h5 id="访问原始文件"><a href="#访问原始文件" class="headerlink" title="访问原始文件"></a>访问原始文件</h5><p>尽管并不常见，但您可能会需要访问原始文件和目录。如果确有需要，将文件保存在 <code>res/</code> 中并没有用，因为从 <code>res/</code> 读取资源的唯一方法是使用资源 ID。您可以改为将资源保存在 <code>assets/</code> 目录中。</p>
<p>保存在 <code>assets/</code> 目录中的文件没有资源 ID，因此您无法通过 <code>R</code> 类或在 XML 资源中引用它们。您可以改为采用类似常见文件系统的方式查询 <code>assets/</code> 目录中的文件，并利用 <code>AssetManager</code> 读取原始数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> assetManager.open(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line"><span class="comment">// filename 默认是在assets目录下</span></span><br></pre></td></tr></table></figure>

<p>不过，如果您只需要能够读取原始数据（例如视频文件或音频文件），则可将文件保存在 <code>res/raw/</code> 目录中，并利用 <code>openRawResource()</code> 读取字节流。</p>
<h6 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h6><p><a href="https://developer.android.google.cn/guide/topics/resources/providing-resources?hl=zh-cn">应用资源概览  | Android 开发者  | Android Developers (google.cn)</a></p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Webview</title>
    <url>/2023/04/04/Android-Webview/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>我们团队有一个Electron桌面应用需要我移植到安卓应用中，分析之后我觉得本身桌面应用基本没有采用复杂框架，同时electron的原生模块并不多，所以选用直接内嵌webview，同时使用原生安卓模块替换electron模块</p>
</blockquote>
<span id="more"></span>


<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Android WebView组件是一个成熟的浏览器，作为子类实现，以将其嵌入到我们的Android应用程序中。</p>
<h5 id="layout-xml嵌入方式"><a href="#layout-xml嵌入方式" class="headerlink" title="layout xml嵌入方式"></a>layout xml嵌入方式</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/webview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="type">WebView</span> <span class="variable">webView</span> <span class="operator">=</span> (WebView) findViewById(R.id.webview);</span><br><span class="line">    webView.loadUrl(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h5><ul>
<li><strong>支持</strong> JavaScript：默认情况下，JavaScript 在 WebView 小部件中处于关闭状态。因此，包含javascript引用的网页将无法正常工作。要启用 java 脚本，需要在 Web 视图实例上调用以下代码片段：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">webView.getSettings().setJavaScriptEnabled(true);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>添加权限</strong>：要在 WebView 中获取和加载 URL，我们需要添加从应用程序内访问互联网<a href="https://www.digitalocean.com/community/tutorials/android-runtime-permissions-example">的权限</a>，否则它将无法加载网页。需要在应用程序标记上方的文件中添加以下代码行，如下所示：<code>AndroidManifest.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;https://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.journaldev.webview&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主要是添加<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p>
<blockquote>
<p>需要使用https协议，使用http就会报错，若是需要使用http协议，请进行如下配置</p>
</blockquote>
<p>相关命令：</p>
<p>webView.getSettings().setAllowContentAccess(true)用于允许WebView在加载内容时访问其他资源的内容，例如地理位置、摄像头等等。如果你希望WebView能够访问这些资源，你需要将这个设置设置为true。默认情况下，这个设置是关闭的。</p>
<p>webView.getSettings().setAllowFileAccess(true)用于允许WebView访问本地文件系统中的文件。如果你的应用程序需要在WebView中加载本地的HTML文件或者其他文件，你需要将这个设置设置为true。默认情况下，这个设置是关闭的，因为它可能会导致安全问题。</p>
<p>android:usesCleartextTraffic&#x3D;”true”是一个AndroidManifest.xml文件中的属性，用于控制应用程序是否允许使用明文流量。</p>
<p>在Android 9.0及以上版本中，默认情况下，应用程序不允许使用明文流量，只允许使用加密的HTTPS协议。这是为了保护用户的隐私和安全。但是，在一些特殊情况下，你可能需要允许应用程序使用明文流量，例如与某些旧版的服务器进行通信。</p>
<p>为了允许应用程序使用明文流量，你可以在AndroidManifest.xml文件中添加android:usesCleartextTraffic&#x3D;”true”属性，允许使用明文流量可能会导致安全问题，因为所有的数据都是明文传输的，可能会被黑客窃取或篡改。</p>
<h6 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h6><p><a href="https://developer.android.google.cn/reference/android/webkit/WebView">WebView  | Android Developers (google.cn)</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/android-webview-example-tutorial">安卓网页视图示例教程 |数字海洋 (digitalocean.com)</a></p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
