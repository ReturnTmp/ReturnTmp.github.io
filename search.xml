<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Neovim 配置教程</title>
    <url>/2023/05/01/Neovim-%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>环境：Ubuntu 20.04 </p>
<p>宿主机：windows （windows terminal）WSL2</p>
<p>NVIM：v0.10.0-dev</p>
<p>配置Neovim 需要保证流畅的github环境（以便于快速拉取插件），可以使用代理或是配置Github SSH key</p>
</blockquote>
<span id="more"></span>



<p>本篇博客是学习掘金小册的学习笔记，有兴趣的朋友可以直接点击下文链接了解详情</p>
<p>小册链接：<a href="https://juejin.cn/book/7051157342770954277">Neovim 配置实战：从0到1打造自己的IDE - nshen - 掘金小册 (juejin.cn)</a></p>
<h4 id="成品示例图"><a href="#成品示例图" class="headerlink" title="成品示例图"></a>成品示例图</h4><p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/output.gif" alt="output"></p>
<h3 id="配置文件整体结构"><a href="#配置文件整体结构" class="headerlink" title="配置文件整体结构"></a>配置文件整体结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── init.lua</span><br><span class="line">└── lua</span><br><span class="line">    ├── autocmds.lua</span><br><span class="line">    ├── basic.lua</span><br><span class="line">    ├── colorscheme.lua</span><br><span class="line">    ├── keybindings.lua</span><br><span class="line">    ├── lsp</span><br><span class="line">    │   ├── cmp.lua</span><br><span class="line">    │   ├── config</span><br><span class="line">    │   │   ├── bash.lua</span><br><span class="line">    │   │   ├── emmet.lua</span><br><span class="line">    │   │   ├── html.lua</span><br><span class="line">    │   │   ├── json.lua</span><br><span class="line">    │   │   ├── lua.lua</span><br><span class="line">    │   │   ├── markdown.lua</span><br><span class="line">    │   │   ├── pyright.lua</span><br><span class="line">    │   │   ├── rust.lua</span><br><span class="line">    │   │   └── ts.lua</span><br><span class="line">    │   ├── formatter.lua</span><br><span class="line">    │   ├── null-ls.lua</span><br><span class="line">    │   ├── setup.lua</span><br><span class="line">    │   └── ui.lua</span><br><span class="line">    ├── plugin-config</span><br><span class="line">    │   ├── bufferline.lua</span><br><span class="line">    │   ├── comment.lua</span><br><span class="line">    │   ├── dashboard.lua</span><br><span class="line">    │   ├── gitsigns.lua</span><br><span class="line">    │   ├── indent-blankline.lua</span><br><span class="line">    │   ├── lualine.lua</span><br><span class="line">    │   ├── nvim-autopairs.lua</span><br><span class="line">    │   ├── nvim-tree.lua</span><br><span class="line">    │   ├── nvim-treesitter.lua</span><br><span class="line">    │   ├── project.lua</span><br><span class="line">    │   ├── surround.lua</span><br><span class="line">    │   ├── telescope.lua</span><br><span class="line">    │   ├── toggleterm.lua</span><br><span class="line">    │   ├── vimspector.lua</span><br><span class="line">    │   └── which-key.lua</span><br><span class="line">    ├── plugins.lua</span><br><span class="line">    └── utils</span><br><span class="line">        ├── fix-yank.lua</span><br><span class="line">        ├── global.lua</span><br><span class="line">        └── im-select.lua</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>首先 <strong>init.lua</strong> 是整个配置的入口文件，负责引用所有其他的模块，基本上想要打开或关闭某个插件只要在这里修改一行代码即可。</p>
<ul>
<li><p><strong>basic.lua：</strong> 基础配置，是对默认配置的一个重置。</p>
</li>
<li><p><strong>colorscheme.lua：</strong> 我们安装的主题皮肤配置，在这里切换主题。</p>
</li>
<li><p><strong>keybindings.lua：</strong> 快捷键的设置，所有插件的快捷键也都会放在这里。</p>
</li>
<li><p><strong>plugins.lua：</strong> 插件安装管理，插件安装或卸载全在这里设置。</p>
</li>
<li><p>lsp 文件夹：</p>
<p>是对 Neovim 内置 LSP 功能的配置，包括常见编程语言与语法提示等。</p>
<ul>
<li><strong>config</strong> <strong>：</strong> 文件夹包含各种语言服务器单独的配置文件。</li>
<li><strong>setup.lua</strong> <strong>：</strong> 内置 LSP 的配置。</li>
<li><strong>cmp.lua</strong> <strong>：</strong> 语法自动补全补全的配置，包括各种补全源，与自定义代码段。</li>
<li><strong>ui.lua：</strong> 对内置 LSP 功能增强和 UI 美化。</li>
<li><strong>formatter.lua：</strong> 独立代码格式化功能。</li>
</ul>
</li>
<li><p><strong>plugin-config 文件夹：</strong> 是对第三方插件的配置，未来每添加一个插件，这里就多一个配置文件。</p>
</li>
<li><p><strong>utils 文件夹：</strong> 是对常见问题的修改，包括输入法切换，针对 windows 的特殊配置等。</p>
</li>
</ul>
<h4 id="配置-Nerd-Fonts"><a href="#配置-Nerd-Fonts" class="headerlink" title="配置 Nerd Fonts"></a>配置 Nerd Fonts</h4><p>官网：<a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts - Iconic font aggregator, glyphs&#x2F;icons collection, &amp; fonts patcher</a></p>
<p>下载字体文件<code>FiraCodeNerdFont-Regular.ttf</code>下载之后双击ttf文件点击安装即可添加到系统字体文件中</p>
<p>配置步骤：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230502100537624.png" alt="image-20230502100537624"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230502100559247.png" alt="image-20230502100559247"></p>
<p>最后点击保存</p>
<h3 id="安装-Neovim"><a href="#安装-Neovim" class="headerlink" title="安装 Neovim"></a>安装 Neovim</h3><p>旧版本卸载：<code>sudo apt-get remove neovim </code></p>
<p>官网：<a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">Installing Neovim · neovim&#x2F;neovim Wiki (github.com)</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:neovim-ppa/unstable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install neovim</span><br></pre></td></tr></table></figure>

<p>执行<code>nvim --version</code>，确保版本必须为 <strong>0.7</strong> 及以上。</p>
<p>执行<code>nvim ~/.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> vim=<span class="string">&#x27;nvim&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">&#x27;nvim&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> v=<span class="string">&#x27;nvim&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行<code>source ~/.bashrc</code>重新加载配置文件</p>
<h4 id="配置入口-init-lua"><a href="#配置入口-init-lua" class="headerlink" title="配置入口 init.lua"></a>配置入口 init.lua</h4><p><code>~/.config/nvim/init.lua</code> 写入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 基础设置</span><br><span class="line">require(<span class="string">&#x27;basic&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>require</code> 函数在 Lua 中用于加载一个模块，而这些模块通常位于 <code>runtimepath</code> 中的 <code>lua/</code> 目录下，也就是我们的 <code>~/.config/nvim/lua/</code> 目录。</p>
<p>所以上边的代码，就是加载 <code>~/.config/nvim/lua/basic.lua</code> 文件（注意：require 里没有 <code>.lua</code> 扩展名）。当然也可以创建 <code>~/.config/nvim/lua/basic/</code> 目录，在目录下边创建 <code>init.lua</code> 文件也是可以成功加载的。</p>
<p>创建基础配置文件<code>~/.config/nvim/lua/basic.lua</code>，并添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- utf8</span><br><span class="line">vim.g.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">vim.o.fileencoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">-- jkhl 移动时光标周围保留8行</span><br><span class="line">vim.o.scrolloff = 8</span><br><span class="line">vim.o.sidescrolloff = 8</span><br><span class="line">-- 使用相对行号</span><br><span class="line">vim.wo.number = <span class="literal">true</span></span><br><span class="line">vim.wo.relativenumber = <span class="literal">true</span></span><br><span class="line">-- 高亮所在行</span><br><span class="line">vim.wo.cursorline = <span class="literal">true</span></span><br><span class="line">-- 显示左侧图标指示列</span><br><span class="line">vim.wo.signcolumn = <span class="string">&quot;yes&quot;</span></span><br><span class="line">-- 右侧参考线，超过表示代码太长了，考虑换行</span><br><span class="line">vim.wo.colorcolumn = <span class="string">&quot;80&quot;</span></span><br><span class="line">-- 缩进2个空格等于一个Tab</span><br><span class="line">vim.o.tabstop = 2</span><br><span class="line">vim.bo.tabstop = 2</span><br><span class="line">vim.o.softtabstop = 2</span><br><span class="line">vim.o.shiftround = <span class="literal">true</span></span><br><span class="line">-- &gt;&gt; &lt;&lt; 时移动长度</span><br><span class="line">vim.o.shiftwidth = 2</span><br><span class="line">vim.bo.shiftwidth = 2</span><br><span class="line">-- 空格替代tab</span><br><span class="line">vim.o.expandtab = <span class="literal">true</span></span><br><span class="line">vim.bo.expandtab = <span class="literal">true</span></span><br><span class="line">-- 新行对齐当前行</span><br><span class="line">vim.o.autoindent = <span class="literal">true</span></span><br><span class="line">vim.bo.autoindent = <span class="literal">true</span></span><br><span class="line">vim.o.smartindent = <span class="literal">true</span></span><br><span class="line">-- 搜索大小写不敏感，除非包含大写</span><br><span class="line">vim.o.ignorecase = <span class="literal">true</span></span><br><span class="line">vim.o.smartcase = <span class="literal">true</span></span><br><span class="line">-- 搜索不要高亮</span><br><span class="line">vim.o.hlsearch = <span class="literal">false</span></span><br><span class="line">-- 边输入边搜索</span><br><span class="line">vim.o.incsearch = <span class="literal">true</span></span><br><span class="line">-- 命令行高为2，提供足够的显示空间</span><br><span class="line">vim.o.cmdheight = 2</span><br><span class="line">-- 当文件被外部程序修改时，自动加载</span><br><span class="line">vim.o.autoread = <span class="literal">true</span></span><br><span class="line">vim.bo.autoread = <span class="literal">true</span></span><br><span class="line">-- 禁止折行</span><br><span class="line">vim.wo.wrap = <span class="literal">false</span></span><br><span class="line">-- 光标在行首尾时&lt;Left&gt;&lt;Right&gt;可以跳到下一行</span><br><span class="line">vim.o.whichwrap = <span class="string">&#x27;&lt;,&gt;,[,]&#x27;</span></span><br><span class="line">-- 允许隐藏被修改过的buffer</span><br><span class="line">vim.o.hidden = <span class="literal">true</span></span><br><span class="line">-- 鼠标支持</span><br><span class="line">vim.o.mouse = <span class="string">&quot;a&quot;</span></span><br><span class="line">-- 禁止创建备份文件</span><br><span class="line">vim.o.backup = <span class="literal">false</span></span><br><span class="line">vim.o.writebackup = <span class="literal">false</span></span><br><span class="line">vim.o.swapfile = <span class="literal">false</span></span><br><span class="line">-- smaller updatetime</span><br><span class="line">vim.o.updatetime = 300</span><br><span class="line">-- 设置 timeoutlen 为等待键盘快捷键连击时间500毫秒，可根据需要设置</span><br><span class="line">vim.o.timeoutlen = 500</span><br><span class="line">-- <span class="built_in">split</span> window 从下边和右边出现</span><br><span class="line">vim.o.splitbelow = <span class="literal">true</span></span><br><span class="line">vim.o.splitright = <span class="literal">true</span></span><br><span class="line">-- 自动补全不自动选中</span><br><span class="line">vim.g.completeopt = <span class="string">&quot;menu,menuone,noselect,noinsert&quot;</span></span><br><span class="line">-- 样式</span><br><span class="line">vim.o.background = <span class="string">&quot;dark&quot;</span></span><br><span class="line">vim.o.termguicolors = <span class="literal">true</span></span><br><span class="line">vim.opt.termguicolors = <span class="literal">true</span></span><br><span class="line">-- 不可见字符的显示，这里只把空格显示为一个点</span><br><span class="line">vim.o.list = <span class="literal">true</span></span><br><span class="line">vim.o.listchars = <span class="string">&quot;space:·&quot;</span></span><br><span class="line">-- 补全增强</span><br><span class="line">vim.o.wildmenu = <span class="literal">true</span></span><br><span class="line">-- Dont<span class="string">&#x27; pass messages to |ins-completin menu|</span></span><br><span class="line"><span class="string">vim.o.shortmess = vim.o.shortmess .. &#x27;</span>c<span class="string">&#x27;</span></span><br><span class="line"><span class="string">-- 补全最多显示10行</span></span><br><span class="line"><span class="string">vim.o.pumheight = 10</span></span><br><span class="line"><span class="string">-- 永远显示 tabline</span></span><br><span class="line"><span class="string">vim.o.showtabline = 2</span></span><br><span class="line"><span class="string">-- 使用增强状态栏插件后不再需要 vim 的模式提示</span></span><br><span class="line"><span class="string">vim.o.showmode = false</span></span><br></pre></td></tr></table></figure>

<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><ul>
<li><code>vim.g.&#123;name&#125;</code>: 全局变量</li>
<li><code>vim.b.&#123;name&#125;</code>: 缓冲区变量</li>
<li><code>vim.w.&#123;name&#125;</code>: 窗口变量</li>
<li><code>vim.bo.&#123;option&#125;</code>: buffer-local 选项</li>
<li><code>vim.wo.&#123;option&#125;</code>: window-local 选项</li>
</ul>
<p>一般来说，全部设置在 <code>vim.opt</code> 下也是可以的，例如 <code>vim.opt.number = true</code> 也是有效的，只是我们上边设置到了比较详细位置而已，具体每个变量的分类可以在 :help 文档中查看。</p>
<h3 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h3><p>创建<code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim.g.mapleader = <span class="string">&quot; &quot;</span></span><br><span class="line">vim.g.maplocalleader = <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> map = vim.api.nvim_set_keymap</span><br><span class="line">-- 复用 opt 参数</span><br><span class="line"><span class="built_in">local</span> opt = &#123;noremap = <span class="literal">true</span>, silent = <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">-- 取消 s 默认功能</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;&quot;</span>, opt)</span><br><span class="line">-- windows 分屏快捷键</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sv&quot;</span>, <span class="string">&quot;:vsp&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;:sp&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 关闭当前</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sc&quot;</span>, <span class="string">&quot;&lt;C-w&gt;c&quot;</span>, opt)</span><br><span class="line">-- 关闭其他</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;so&quot;</span>, <span class="string">&quot;&lt;C-w&gt;o&quot;</span>, opt)</span><br><span class="line">-- Alt + hjkl  窗口之间跳转</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-h&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;h&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-j&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;j&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-k&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;k&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-l&gt;&quot;</span>, <span class="string">&quot;&lt;C-w&gt;l&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 左右比例控制</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Left&gt;&quot;</span>, <span class="string">&quot;:vertical resize -2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Right&gt;&quot;</span>, <span class="string">&quot;:vertical resize +2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s,&quot;</span>, <span class="string">&quot;:vertical resize -20&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s.&quot;</span>, <span class="string">&quot;:vertical resize +20&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 上下比例</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sj&quot;</span>, <span class="string">&quot;:resize +10&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;sk&quot;</span>, <span class="string">&quot;:resize -10&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Down&gt;&quot;</span>, <span class="string">&quot;:resize +2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-Up&gt;&quot;</span>, <span class="string">&quot;:resize -2&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 等比例</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;s=&quot;</span>, <span class="string">&quot;&lt;C-w&gt;=&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- Terminal相关</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;t&quot;</span>, <span class="string">&quot;:sp | terminal&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;vt&quot;</span>, <span class="string">&quot;:vsp | terminal&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;Esc&gt;&quot;</span>, <span class="string">&quot;&lt;C-\\&gt;&lt;C-n&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-h&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;h ]], opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-j&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;j ]], opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-k&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;k ]], opt)</span><br><span class="line">map(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;&lt;A-l&gt;&quot;</span>, [[ &lt;C-\&gt;&lt;C-N&gt;&lt;C-w&gt;l ]], opt)</span><br><span class="line"></span><br><span class="line">-- visual模式下缩进代码</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&lt;gv&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&gt;gv&quot;</span>, opt)</span><br><span class="line">-- 上下移动选中文本</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;:move &#x27;&gt;+1&lt;CR&gt;gv-gv&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;:move &#x27;&lt;-2&lt;CR&gt;gv-gv&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 上下滚动浏览</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-j&gt;&quot;</span>, <span class="string">&quot;4j&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-k&gt;&quot;</span>, <span class="string">&quot;4k&quot;</span>, opt)</span><br><span class="line">-- ctrl u / ctrl + d  只移动9行，默认移动半屏</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-u&gt;&quot;</span>, <span class="string">&quot;9k&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-d&gt;&quot;</span>, <span class="string">&quot;9j&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 在visual 模式里粘贴不要复制</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&#x27;&quot;_dP&#x27;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- 退出</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;:q&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;qq&quot;</span>, <span class="string">&quot;:q!&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;:qa!&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line"></span><br><span class="line">-- insert 模式下，跳到行首行尾</span><br><span class="line">map(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;&lt;C-h&gt;&quot;</span>, <span class="string">&quot;&lt;ESC&gt;I&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;&lt;C-l&gt;&quot;</span>, <span class="string">&quot;&lt;ESC&gt;A&quot;</span>, opt)</span><br></pre></td></tr></table></figure>



<p>最后在<code>init.lua</code>中引入快捷键文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 快捷键映射</span><br><span class="line">require(<span class="string">&quot;keybindings&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>目前在 Neovim 最常见的插件管理器主要有 <a href="https://github.com/junegunn/vim-plug">vim-plug</a> 和 <a href="https://github.com/wbthomason/packer.nvim">packer</a> 两个。</p>
<p>安装步骤（请参照官网步骤）：</p>
<p>执行<code>git clone --depth 1 https://github.com/wbthomason/packer.nvim\ ~/.local/share/nvim/site/pack/packer/start/packer.nvim</code></p>
<p>安装成功后添加配置文件<code>lua/plugins.lua</code>，添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> packer = require(<span class="string">&quot;packer&quot;</span>)</span><br><span class="line">packer.startup(</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">   -- Packer 可以管理自己本身</span><br><span class="line">   use <span class="string">&#x27;wbthomason/packer.nvim&#x27;</span></span><br><span class="line">   -- 你的插件列表...</span><br><span class="line">end)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>中添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Packer 插件管理</span><br><span class="line">require(<span class="string">&quot;plugins&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>配置生效后，Neovim 会增加以下命令。</p>
<ul>
<li><code>:PackerCompile</code>： 每次改变插件配置时，必须运行此命令或 <code>PackerSync</code>, 重新生成编译的加载文件</li>
<li><code>:PackerClean</code> ： 清除所有不用的插件</li>
<li><code>:PackerInstall</code> ： 清除，然后安装缺失的插件</li>
<li><code>:PackerUpdate</code> ： 清除，然后更新并安装插件</li>
<li><code>:PackerSync</code> : 执行 <code>PackerUpdate</code> 后，再执行 <code>PackerCompile</code></li>
<li><code>:PackerLoad</code> : 立刻加载 opt 插件</li>
</ul>
<p>通过上边的说明，我们观察到 <code>:PackerSync</code> 命令包含了 <code>:PackerUpdate</code> 和<code>:PackerCompile</code>，而 <code>:PackerUpdate</code> 又包含了 <code>:PackerClean</code> 和 <code>:PackerInstall</code> 流程。</p>
<p>所以通常情况下，无论<strong>安装</strong>还是<strong>更新</strong>插件，我只需要下边这一条命令就够：<code>:PackerSync</code></p>
<p>每次修改完 <code>lua/plugins.lua</code> 这个文件后，保存退出，重新打开并调用 <code>:PackerSync</code> 就可以了</p>
<h4 id="添加自动安装"><a href="#添加自动安装" class="headerlink" title="添加自动安装"></a>添加自动安装</h4><p><code>lua/plugins.lua</code> 文件，在最后添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 每次保存 plugins.lua 自动安装插件</span><br><span class="line">pcall(</span><br><span class="line">  vim.cmd,</span><br><span class="line">  [[</span><br><span class="line">    augroup packer_user_config</span><br><span class="line">    autocmd!</span><br><span class="line">    autocmd BufWritePost plugins.lua <span class="built_in">source</span> &lt;afile&gt; | PackerSync</span><br><span class="line">    augroup end</span><br><span class="line">  ]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：保证自己可以ping 通 github 的情况下，但是仍旧执行<code>:PackerSync</code>失败，按 R 多次拉取失败插件，如果依旧失败则在错误插件处点击回车，查看问题，具体问题具体分析，我一般多试几次 R 就会成功</p>
</blockquote>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p><code>init.lua</code>中添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 主题设置 （新增）</span><br><span class="line">require(<span class="string">&quot;colorscheme&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>lua/colorscheme.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> colorscheme = <span class="string">&quot;tokyonight&quot;</span></span><br><span class="line"><span class="built_in">local</span> status_ok, _ = pcall(vim.cmd, <span class="string">&quot;colorscheme &quot;</span> .. colorscheme)</span><br><span class="line"><span class="keyword">if</span> not status_ok <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;colorscheme &quot;</span> .. colorscheme .. <span class="string">&quot; 没有找到！&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h4 id="安装第三方主题"><a href="#安装第三方主题" class="headerlink" title="安装第三方主题"></a>安装第三方主题</h4><p><code>lua/plugins.lua</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">packer.startup(&#123;</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">    -- Packer 可以升级自己</span><br><span class="line">    use(<span class="string">&quot;wbthomason/packer.nvim&quot;</span>)</span><br><span class="line">    --------------------- colorschemes --------------------</span><br><span class="line">    -- tokyonight</span><br><span class="line">    use(<span class="string">&quot;folke/tokyonight.nvim&quot;</span>)</span><br><span class="line">    -------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    -- 略...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>:w</code>保存  <code>p</code>退出</p>
<p>其他主体配色链接：<a href="https://github.com/topics/neovim-colorscheme">neovim-colorscheme · GitHub Topics</a></p>
<p><code>lua/plugins.lua</code>添加插件配置后，修改 <code>lua/colorscheme.lua</code> 内 <code>colorscheme</code> 变量为相应的主题即可</p>
<h3 id="侧边栏文件浏览器"><a href="#侧边栏文件浏览器" class="headerlink" title="侧边栏文件浏览器"></a>侧边栏文件浏览器</h3><p>相关插件：</p>
<ul>
<li><a href="https://github.com/nvim-tree/nvim-tree.lua">nvim-tree&#x2F;nvim-tree.lua: A file explorer tree for neovim written in lua (github.com)</a></li>
</ul>
<p><code>lua/plugins.lua</code> 中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">packer.startup(&#123;</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">    -- Packer 可以升级自己</span><br><span class="line">    use(<span class="string">&quot;wbthomason/packer.nvim&quot;</span>)</span><br><span class="line">    -------------------------- plugins -------------------------------------------</span><br><span class="line">    -- nvim-tree (新增)</span><br><span class="line">    use(&#123; <span class="string">&quot;kyazdani42/nvim-tree.lua&quot;</span>, requires = <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line">...略</span><br></pre></td></tr></table></figure>



<h4 id="配置-nvim-tree"><a href="#配置-nvim-tree" class="headerlink" title="配置 nvim-tree"></a>配置 nvim-tree</h4><p><code>lua/plugin-config/nvim-tree.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, nvim_tree = pcall(require, <span class="string">&quot;nvim-tree&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 nvim-tree&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 列表操作快捷键</span><br><span class="line"><span class="built_in">local</span> list_keys = require(<span class="string">&#x27;keybindings&#x27;</span>).nvimTreeList</span><br><span class="line">nvim_tree.setup(&#123;</span><br><span class="line">    -- 不显示 git 状态图标</span><br><span class="line">    git = &#123;</span><br><span class="line">        <span class="built_in">enable</span> = <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- project plugin 需要这样设置</span><br><span class="line">    update_cwd = <span class="literal">true</span>,</span><br><span class="line">    update_focused_file = &#123;</span><br><span class="line">        <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">        update_cwd = <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- 隐藏 .文件 和 node_modules 文件夹</span><br><span class="line">    filters = &#123;</span><br><span class="line">        dotfiles = <span class="literal">true</span>,</span><br><span class="line">        custom = &#123; <span class="string">&#x27;node_modules&#x27;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    view = &#123;</span><br><span class="line">        -- 宽度</span><br><span class="line">        width = 40,</span><br><span class="line">        -- 也可以 <span class="string">&#x27;right&#x27;</span></span><br><span class="line">        side = <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        -- 隐藏根目录</span><br><span class="line">        hide_root_folder = <span class="literal">false</span>,</span><br><span class="line">        -- 自定义列表中快捷键</span><br><span class="line">        mappings = &#123;</span><br><span class="line">            custom_only = <span class="literal">false</span>,</span><br><span class="line">            list = list_keys,</span><br><span class="line">        &#125;,</span><br><span class="line">        -- 不显示行数</span><br><span class="line">        number = <span class="literal">false</span>,</span><br><span class="line">        relativenumber = <span class="literal">false</span>,</span><br><span class="line">        -- 显示图标</span><br><span class="line">        signcolumn = <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    actions = &#123;</span><br><span class="line">        open_file = &#123;</span><br><span class="line">            -- 首次打开大小适配</span><br><span class="line">            resize_window = <span class="literal">true</span>,</span><br><span class="line">            -- 打开文件时关闭</span><br><span class="line">            quit_on_open = <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- wsl install -g wsl-open</span><br><span class="line">    -- https://github.com/4U6U57/wsl-open/</span><br><span class="line">    system_open = &#123;</span><br><span class="line">        cmd = <span class="string">&#x27;wsl-open&#x27;</span>, -- mac 直接设置为 open</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">-- 自动关闭</span><br><span class="line">vim.cmd([[</span><br><span class="line">  autocmd BufEnter * ++nested <span class="keyword">if</span> winnr(<span class="string">&#x27;$&#x27;</span>) == 1 &amp;&amp; bufname() == <span class="string">&#x27;NvimTree_&#x27;</span> . tabpagenr() | quit | endif</span><br><span class="line">]])</span><br></pre></td></tr></table></figure>

<p>上边代码就是 nvim-tree 的配置，可以根据注释进行修改。这里简单解释一下，值得注意的是 <code>system_open</code> 项，如果想要在 <code>WSL</code> 中用 Windows 系统默认设置打开文件，需要使用 <code>Node.js</code> 全局安装一个 <code>wsl-open</code> 包，使用命令 <code>npm install -g wsl-open</code>，如果不需要这个功能，也可以不用安装。 如果不是 Windows 系统也就不需要安装。</p>
<p>nvim-tree 初始化支持很多参数，如果想知道还有哪些其他的参数，可以运行 <code>:h nvim-tree.setup</code> 调出帮助文档查看。</p>
<p><code>lua/keybindings.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 插件快捷键</span><br><span class="line"><span class="built_in">local</span> pluginKeys = &#123;&#125;</span><br><span class="line"></span><br><span class="line">-- nvim-tree</span><br><span class="line">-- alt + m 键打开关闭tree</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;A-m&gt;&quot;</span>, <span class="string">&quot;:NvimTreeToggle&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 列表快捷键</span><br><span class="line">pluginKeys.nvimTreeList = &#123;</span><br><span class="line">  -- 打开文件或文件夹</span><br><span class="line">  &#123; key = &#123;<span class="string">&quot;&lt;CR&gt;&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;&lt;2-LeftMouse&gt;&quot;</span>&#125;, action = <span class="string">&quot;edit&quot;</span> &#125;,</span><br><span class="line">  -- 分屏打开文件</span><br><span class="line">  &#123; key = <span class="string">&quot;v&quot;</span>, action = <span class="string">&quot;vsplit&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;h&quot;</span>, action = <span class="string">&quot;split&quot;</span> &#125;,</span><br><span class="line">  -- 显示隐藏文件</span><br><span class="line">  &#123; key = <span class="string">&quot;i&quot;</span>, action = <span class="string">&quot;toggle_custom&quot;</span> &#125;, -- 对应 filters 中的 custom (node_modules)</span><br><span class="line">  &#123; key = <span class="string">&quot;.&quot;</span>, action = <span class="string">&quot;toggle_dotfiles&quot;</span> &#125;, -- Hide (dotfiles)</span><br><span class="line">  -- 文件操作</span><br><span class="line">  &#123; key = <span class="string">&quot;&lt;F5&gt;&quot;</span>, action = <span class="string">&quot;refresh&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;a&quot;</span>, action = <span class="string">&quot;create&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;d&quot;</span>, action = <span class="string">&quot;remove&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;r&quot;</span>, action = <span class="string">&quot;rename&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;x&quot;</span>, action = <span class="string">&quot;cut&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;c&quot;</span>, action = <span class="string">&quot;copy&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;p&quot;</span>, action = <span class="string">&quot;paste&quot;</span> &#125;,</span><br><span class="line">  &#123; key = <span class="string">&quot;s&quot;</span>, action = <span class="string">&quot;system_open&quot;</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> pluginKeys</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 插件配置</span><br><span class="line">require(<span class="string">&quot;plugin-config.nvim-tree&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>但是出现问题<code>view.mappings.list has been deprecated in favour of on_attach.please run</code>，应该是某些插件更新：相关链接：<a href="https://github.com/nvim-tree/nvim-tree.lua/wiki/Migrating-To-on_attach">Migrating To on_attach · nvim-tree&#x2F;nvim-tree.lua Wiki (github.com)</a></p>
<p>表明<code>view.mappings</code> and <code>remove_keymaps</code>已经启用需要移除</p>
<p>解决方案：</p>
<p>注释掉<code>view.mappings</code></p>
<p>执行<code>:NvimTreeGenerateOnAttach</code>，复制<code>nvim-tree-on-attach.lua</code>中的内容粘贴到<code> nvim-tree.lua</code>中（需要添加在setup之前）</p>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;nvim-tree&quot;</span>).setup(&#123;</span><br><span class="line">  ...</span><br><span class="line">  on_attach = on_attach,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>问题解决~</p>
<h3 id="顶部标签页和底部信息栏"><a href="#顶部标签页和底部信息栏" class="headerlink" title="顶部标签页和底部信息栏"></a>顶部标签页和底部信息栏</h3><p>相关插件：</p>
<ul>
<li><a href="https://github.com/akinsho/bufferline.nvim">akinsho&#x2F;bufferline.nvim: A snazzy bufferline for Neovim (github.com)</a></li>
<li><a href="https://github.com/nvim-lualine/lualine.nvim">nvim-lualine&#x2F;lualine.nvim: A blazing fast and easy to configure neovim statusline plugin written in pure lua. (github.com)</a></li>
</ul>
<h5 id="顶部标签页"><a href="#顶部标签页" class="headerlink" title="顶部标签页"></a>顶部标签页</h5><p><code>lua/plugins.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">packer.startup(&#123;</span><br><span class="line">  <span class="keyword">function</span>(use)</span><br><span class="line">    -- Packer 可以升级自己</span><br><span class="line">    use(<span class="string">&quot;wbthomason/packer.nvim&quot;</span>)</span><br><span class="line">    -------------------------- plugins -------------------------------------------</span><br><span class="line">    -- nvim-tree</span><br><span class="line">    use(&#123; <span class="string">&quot;kyazdani42/nvim-tree.lua&quot;</span>, requires = <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span> &#125;)</span><br><span class="line">    -- bufferline (新增)</span><br><span class="line">    use(&#123; <span class="string">&quot;akinsho/bufferline.nvim&quot;</span>, requires = &#123; <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span>, <span class="string">&quot;moll/vim-bbye&quot;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line">...略</span><br></pre></td></tr></table></figure>

<p><code>:w</code> 保存，自动安装，安装完整按 <code>q</code> 退出</p>
<p>出现**GnuTLS recv error (-110)**问题</p>
<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依次执行</span></span><br><span class="line">apt-get install gnutls-bin</span><br><span class="line"><span class="comment"># 关闭 SSL 验证</span></span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line"><span class="comment"># 第二个命令是用于设置缓冲区大小</span></span><br><span class="line">git config --global http.postBuffer 1048576000</span><br><span class="line"><span class="comment"># 或是</span></span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> fakeroot /usr/bin/fakeroot-tcp</span><br></pre></td></tr></table></figure>



<p>这里我增加了一个 <a href="https://github.com/moll/vim-bbye">moll&#x2F;vim-bbye</a> 依赖，因为这个插件安装后会增加一个 <code>:Bdelete</code> 命令，相比内置的 <code>:bdelete</code>, 它删除 buffer 的同时，并不会搞乱布局 。 待会儿我们会配置 <code>Bdelete</code> 为关闭 Tab 的命令。</p>
<p>新建<code>lua/plugin-config/bufferline.lua</code>文件并添加内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, bufferline = pcall(require, <span class="string">&quot;bufferline&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 bufferline&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- bufferline 配置</span><br><span class="line">-- https://github.com/akinsho/bufferline.nvim<span class="comment">#configuration</span></span><br><span class="line">bufferline.setup(&#123;</span><br><span class="line">  options = &#123;</span><br><span class="line">    -- 关闭 Tab 的命令，这里使用 moll/vim-bbye 的 :Bdelete 命令</span><br><span class="line">    close_command = <span class="string">&quot;Bdelete! %d&quot;</span>,</span><br><span class="line">    right_mouse_command = <span class="string">&quot;Bdelete! %d&quot;</span>,</span><br><span class="line">    -- 侧边栏配置</span><br><span class="line">    -- 左侧让出 nvim-tree 的位置，显示文字 File Explorer</span><br><span class="line">    offsets = &#123;</span><br><span class="line">      &#123;</span><br><span class="line">        filetype = <span class="string">&quot;NvimTree&quot;</span>,</span><br><span class="line">        text = <span class="string">&quot;File Explorer&quot;</span>,</span><br><span class="line">        highlight = <span class="string">&quot;Directory&quot;</span>,</span><br><span class="line">        text_align = <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    -- 使用 nvim 内置 LSP  后续课程会配置</span><br><span class="line">    diagnostics = <span class="string">&quot;nvim_lsp&quot;</span>,</span><br><span class="line">    -- 可选，显示 LSP 报错图标</span><br><span class="line">    ---@diagnostic disable-next-line: unused-local</span><br><span class="line">    diagnostics_indicator = <span class="keyword">function</span>(count, level, diagnostics_dict, context)</span><br><span class="line">      <span class="built_in">local</span> s = <span class="string">&quot; &quot;</span></span><br><span class="line">      <span class="keyword">for</span> e, n <span class="keyword">in</span> pairs(diagnostics_dict) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">local</span> sym = e == <span class="string">&quot;error&quot;</span> and <span class="string">&quot; &quot;</span> or (e == <span class="string">&quot;warning&quot;</span> and <span class="string">&quot; &quot;</span> or <span class="string">&quot;&quot;</span>)</span><br><span class="line">        s = s .. n .. sym</span><br><span class="line">      end</span><br><span class="line">      <span class="built_in">return</span> s</span><br><span class="line">    end,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- bufferline</span><br><span class="line">-- 左右Tab切换</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-h&gt;&quot;</span>, <span class="string">&quot;:BufferLineCyclePrev&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-l&gt;&quot;</span>, <span class="string">&quot;:BufferLineCycleNext&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">-- 关闭</span><br><span class="line">--<span class="string">&quot;moll/vim-bbye&quot;</span></span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-w&gt;&quot;</span>, <span class="string">&quot;:Bdelete!&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;bl&quot;</span>, <span class="string">&quot;:BufferLineCloseRight&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;bh&quot;</span>, <span class="string">&quot;:BufferLineCloseLeft&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;bc&quot;</span>, <span class="string">&quot;:BufferLinePickClose&lt;CR&gt;&quot;</span>, opt)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.bufferline&quot;</span>)</span><br></pre></td></tr></table></figure>





<h5 id="底部信息栏"><a href="#底部信息栏" class="headerlink" title="底部信息栏"></a>底部信息栏</h5><p><code>lua/plugins.lua</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- lualine (新增)</span><br><span class="line">use(&#123; <span class="string">&quot;nvim-lualine/lualine.nvim&quot;</span>, requires = &#123; <span class="string">&quot;kyazdani42/nvim-web-devicons&quot;</span> &#125; &#125;)</span><br><span class="line">use(<span class="string">&quot;arkav/lualine-lsp-progress&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>新建<code>lua/plugin-config/lualine.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 如果找不到lualine 组件，就不继续执行</span><br><span class="line"><span class="built_in">local</span> status, lualine = pcall(require, <span class="string">&quot;lualine&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 lualine&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">lualine.setup(&#123;</span><br><span class="line">  options = &#123;</span><br><span class="line">    theme = <span class="string">&quot;tokyonight&quot;</span>,</span><br><span class="line">    component_separators = &#123; left = <span class="string">&quot;|&quot;</span>, right = <span class="string">&quot;|&quot;</span> &#125;,</span><br><span class="line">    -- https://github.com/ryanoasis/powerline-extra-symbols</span><br><span class="line">    section_separators = &#123; left = <span class="string">&quot; &quot;</span>, right = <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  extensions = &#123; <span class="string">&quot;nvim-tree&quot;</span>, <span class="string">&quot;toggleterm&quot;</span> &#125;,</span><br><span class="line">  sections = &#123;</span><br><span class="line">    lualine_c = &#123;</span><br><span class="line">      <span class="string">&quot;filename&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;lsp_progress&quot;</span>,</span><br><span class="line">        spinner_symbols = &#123; <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    lualine_x = &#123;</span><br><span class="line">      <span class="string">&quot;filesize&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;fileformat&quot;</span>,</span><br><span class="line">        -- symbols = &#123;</span><br><span class="line">        --   unix = <span class="string">&#x27;&#x27;</span>, -- e712</span><br><span class="line">        --   dos = <span class="string">&#x27;&#x27;</span>, -- e70f</span><br><span class="line">        --   mac = <span class="string">&#x27;&#x27;</span>, -- e711</span><br><span class="line">        -- &#125;,</span><br><span class="line">        symbols = &#123;</span><br><span class="line">          unix = <span class="string">&quot;LF&quot;</span>,</span><br><span class="line">          dos = <span class="string">&quot;CRLF&quot;</span>,</span><br><span class="line">          mac = <span class="string">&quot;CR&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;encoding&quot;</span>,</span><br><span class="line">      <span class="string">&quot;filetype&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.lualine&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="模糊搜索快速查找文件"><a href="#模糊搜索快速查找文件" class="headerlink" title="模糊搜索快速查找文件"></a>模糊搜索快速查找文件</h3><p>相关插件：<a href="https://github.com/nvim-telescope/telescope.nvim">nvim-telescope&#x2F;telescope.nvim: Find, Filter, Preview, Pick. All lua, all the time. (github.com)</a> 	</p>
<p><code>lua/plugins.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- telescope （新增）</span><br><span class="line">use &#123; <span class="string">&#x27;nvim-telescope/telescope.nvim&#x27;</span>, requires = &#123; <span class="string">&quot;nvim-lua/plenary.nvim&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p><code>:checkhealth telescope</code> 检查依赖情况，这里通常会提示 <code>ripgrep</code> 不存在，因为 <code>telescope</code> 依赖以下两个项目。</p>
<ul>
<li><a href="https://github.com/sharkdp/fd">sharkdp&#x2F;fd: A simple, fast and user-friendly alternative to ‘find’ (github.com)</a></li>
<li><a href="https://github.com/BurntSushi/ripgrep">BurntSushi&#x2F;ripgrep: ripgrep recursively searches directories for a regex pattern while respecting your gitignore (github.com)</a></li>
</ul>
<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 20.04 安装 repgrep</span></span><br><span class="line">sudo apt install ripgrep</span><br><span class="line"><span class="comment"># 18.04 安装 repgrep</span></span><br><span class="line">sudo add-apt-repository ppa:x4121/ripgrep</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install ripgrep</span><br><span class="line"><span class="comment"># 安装 fd</span></span><br><span class="line">npm install -g fd-find</span><br></pre></td></tr></table></figure>

<h4 id="配置-node-环境"><a href="#配置-node-环境" class="headerlink" title="配置 node 环境"></a>配置 node 环境</h4><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p>配置源，需要哪个版本可以将16替换为相应版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure>

<p>如果不想要自己配置指定版本源的情况下，可以直接执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update -y</span><br><span class="line">sudo apt install nodejs npm</span><br></pre></td></tr></table></figure>

<h4 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h4><p>官网：<a href="https://github.com/nvm-sh/nvm">nvm-sh&#x2F;nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)</a></p>
<p>git clone nvm仓库时遇到如下错误</p>
<blockquote>
<p>GnuTLS recv error (-110): The TLS connection 。。。</p>
</blockquote>
<p>我是因为Ipv6的问题，可以git clone -4 指定使用Ipv4连接</p>
<p>但是执行<code>ap-get update</code>遇到问题：</p>
<blockquote>
<p>Err:12 <a href="http://ppa.launchpad.net/x4121/ripgrep/ubuntu">http://ppa.launchpad.net/x4121/ripgrep/ubuntu</a> focal Release<br>  404  Not Found [IP: 185.125.190.52 80]<br>Reading package lists…<br>E: The repository ‘<a href="http://ppa.launchpad.net/x4121/ripgrep/ubuntu">http://ppa.launchpad.net/x4121/ripgrep/ubuntu</a> focal Release’ does not have a Release file.</p>
</blockquote>
<p>这是因为之前我执行过<code>sudo add-apt-repository ppa:x4121/ripgrep</code>所以可以直接手动删除</p>
<p>解决方案（自动移除再更新）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository -r ppa:x4121/ripgrep</span><br><span class="line"><span class="comment"># 指的是先移除armagetronad-dev这个ppa包，再添加这个ppa包</span></span><br><span class="line">sudo apt update -q</span><br></pre></td></tr></table></figure>

<p>手动删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/sources.list.d</span><br><span class="line"><span class="built_in">rm</span> x4121-ubuntu-ripgrep-focal.list</span><br><span class="line"><span class="comment"># .save 文件是备份，不需要管</span></span><br></pre></td></tr></table></figure>



<p>后面我在使用更新插件包时爆出：<code>Could not resolve host github.com</code></p>
<p>解决1（失败）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从全局配置文件中删除代理设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<p>解决2（成功）：</p>
<p>我直接ping了下网络，发现不只是github连不上，而是整个WSL网络都不能使用，在宿主机中我查看WSL网络配置，发现未修复之前两个红框中的ip地址是没有的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230509091607416.png" alt="image-20230509091607416"></p>
<p>直接在宿主机上使用管理员权限执行<code>netsh winsock reset</code>重启网络即可（注意：不需要重启）</p>
<blockquote>
<p>下面解决方案没有试过，仅作为备用方案</p>
</blockquote>
<p>解决3：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启 WSL 指令 </span></span><br><span class="line">$ wsl --shutdown </span><br><span class="line"><span class="comment"># 之后就重新启动进入即可 </span></span><br><span class="line">$ wsl</span><br></pre></td></tr></table></figure>







<h3 id="自定义启动页与项目列表"><a href="#自定义启动页与项目列表" class="headerlink" title="自定义启动页与项目列表"></a>自定义启动页与项目列表</h3><p>当我们在命令行中输入 <code>nvim</code> 不带任何路径并敲击回车的时候，就会打开这个界面，通常我们会在这个界面中配置最常用功能，比如打开最近编辑过的文件，快速打开项目文件夹，快速修改快捷键等。</p>
<p>使用官方配置的图像：	<a href="https://github.com/nvimdev/dashboard-nvim/wiki/Ascii-Header-Text">Ascii Header Text · nvimdev&#x2F;dashboard-nvim Wiki (github.com)</a></p>
<p>使用字体生成器：[Text to ASCII Art Generator (TAAG) (patorjk.com)](<a href="http://patorjk.com/software/taag/#p=display&f=ANSI">http://patorjk.com/software/taag/#p=display&amp;f=ANSI</a> Shadow&amp;t&#x3D;rettmp)</p>
<p>同样 plugins.lua 中添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- dashboard-nvim (新增)</span><br><span class="line">use(<span class="string">&quot;glepnir/dashboard-nvim&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>创建 lua&#x2F;plugin-config&#x2F;dashboard.lua ，并添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, db = pcall(require, <span class="string">&quot;dashboard&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 dashboard&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">db.setup(&#123;</span><br><span class="line">  theme = <span class="string">&#x27;doom&#x27;</span>,</span><br><span class="line">  config = &#123;</span><br><span class="line">    header = &#123;</span><br><span class="line">[[                                                     ]],</span><br><span class="line">[[                                                     ]],</span><br><span class="line">[[██████╗ ███████╗████████╗████████╗███╗   ███╗██████╗ ]],</span><br><span class="line">[[██╔══██╗██╔════╝╚══██╔══╝╚══██╔══╝████╗ ████║██╔══██╗]],</span><br><span class="line">[[██████╔╝█████╗     ██║      ██║   ██╔████╔██║██████╔╝]],</span><br><span class="line">[[██╔══██╗██╔══╝     ██║      ██║   ██║╚██╔╝██║██╔═══╝ ]],</span><br><span class="line">[[██║  ██║███████╗   ██║      ██║   ██║ ╚═╝ ██║██║     ]],</span><br><span class="line">[[╚═╝  ╚═╝╚══════╝   ╚═╝      ╚═╝   ╚═╝     ╚═╝╚═╝     ]],</span><br><span class="line">[[                                                     ]],</span><br><span class="line">[[                [ version : 1.0.0 ]                  ]],</span><br><span class="line">[[                                                     ]],</span><br><span class="line">    &#125;, --your header</span><br><span class="line">    center = &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Projects                            &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;Telescope projects&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Recently files                      &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;Telescope oldfiles&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Edit keybindings                    &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;edit ~/.config/nvim/lua/keybindings.lua&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">    desc = <span class="string">&quot;Edit Projects                       &quot;</span>,</span><br><span class="line">    action = <span class="string">&quot;edit ~/.local/share/nvim/project_nvim/project_history&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    footer = &#123;&#125;  --your footer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是里面的 <code>Telescope projects</code> 并不是 telescope 内置的命令。需要安装<code>ahmedkhalf/project.nvim</code>插件，执行如下步骤</p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- project</span><br><span class="line">use(<span class="string">&quot;ahmedkhalf/project.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>确保<code>lua/plugin-config/nvim-tree.lua</code>文件中有如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvim_tree.setup(&#123;</span><br><span class="line">  --- 上略</span><br><span class="line"></span><br><span class="line">  -- project plugin 需要这样设置</span><br><span class="line">  update_cwd = <span class="literal">true</span>,</span><br><span class="line">  update_focused_file = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">    update_cwd = <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  -- 下略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>创建<code>lua/plugin-config/project.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, project = pcall(require, <span class="string">&quot;project_nvim&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 project_nvim&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- nvim-tree 支持</span><br><span class="line">vim.g.nvim_tree_respect_buf_cwd = 1</span><br><span class="line"></span><br><span class="line">project.setup(&#123;</span><br><span class="line">  detection_methods = &#123; <span class="string">&quot;pattern&quot;</span> &#125;,</span><br><span class="line">  patterns = &#123; <span class="string">&quot;.git&quot;</span>, <span class="string">&quot;_darcs&quot;</span>, <span class="string">&quot;.hg&quot;</span>, <span class="string">&quot;.bzr&quot;</span>, <span class="string">&quot;.svn&quot;</span>, <span class="string">&quot;Makefile&quot;</span>, <span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;.sln&quot;</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, telescope = pcall(require, <span class="string">&quot;telescope&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 telescope&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line">pcall(telescope.load_extension, <span class="string">&quot;projects&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.dashboard&quot;</span>)</span><br><span class="line">require(<span class="string">&quot;plugin-config.project&quot;</span>)</span><br></pre></td></tr></table></figure>



<h6 id="手动编辑-project-history-列表"><a href="#手动编辑-project-history-列表" class="headerlink" title="手动编辑 project_history 列表"></a>手动编辑 <code>project_history</code> 列表</h6><p>执行<code>:lua print(require(&quot;project_nvim.utils.path&quot;).historyfile)</code></p>
<p>我得到了<code>~/.local/share/nvim/project_nvim/project_history</code>这个文件，直接编辑即可</p>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/root/.config/nvim</span><br></pre></td></tr></table></figure>

<p>以后的话可以方便编写nvim项目配置 :)</p>
<h3 id="语法高亮安装及配置"><a href="#语法高亮安装及配置" class="headerlink" title="语法高亮安装及配置"></a>语法高亮安装及配置</h3><p>相关插件：<a href="https://github.com/nvim-treesitter/nvim-treesitter">nvim-treesitter&#x2F;nvim-treesitter: Nvim Treesitter configurations and abstraction layer (github.com)</a></p>
<p>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- treesitter （新增）</span><br><span class="line">use(&#123; <span class="string">&quot;nvim-treesitter/nvim-treesitter&quot;</span>, run = <span class="string">&quot;:TSUpdate&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="手动安装Language-parser"><a href="#手动安装Language-parser" class="headerlink" title="手动安装Language parser"></a>手动安装Language parser</h5><p>运行 <code>:TSInstallInfo</code> 命令查看 language parsers 列表与安装状态</p>
<p><img src="C:\Users\86150\AppData\Roaming\Typora\typora-user-images\image-20230509193140841.png" alt="image-20230509193140841"></p>
<p>安装：:TSInstall javascript</p>
<p>卸载：:TSUninstall javascript</p>
<p>安装后会在 packer 中生成相应语言的so文件</p>
<h5 id="自动安装配置"><a href="#自动安装配置" class="headerlink" title="自动安装配置"></a>自动安装配置</h5><p><code>lua/plugin-config/nvim-treesitter.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, treesitter = pcall(require, <span class="string">&quot;nvim-treesitter.configs&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 nvim-treesitter&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">treesitter.setup(&#123;</span><br><span class="line">  -- 安装 language parser</span><br><span class="line">  -- :TSInstallInfo 命令查看支持的语言</span><br><span class="line">  ensure_installed = &#123; <span class="string">&quot;json&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;vim&quot;</span>, <span class="string">&quot;lua&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;typescript&quot;</span>, <span class="string">&quot;tsx&quot;</span> &#125;,</span><br><span class="line">  -- 启用代码高亮模块</span><br><span class="line">  highlight = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">    additional_vim_regex_highlighting = <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.nvim-treesitter&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>稍微说下里面 nvim-treesitter 中的配置</p>
<h5 id="增量选择模块"><a href="#增量选择模块" class="headerlink" title="增量选择模块"></a>增量选择模块</h5><p>当你的光标在一个语法结点上时，可以设置一个增加键和一个减少键，敲击这两个，在表现上为不断外扩和收缩选中代码。</p>
<p>增加和减少结点的快捷键设置成了 <strong>回车</strong> 和 <strong>退格</strong> 。通过不断的按 Enter 选择区域会从里层不断外扩， Backspace 则相反不断内收。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 启用增量选择模块</span><br><span class="line">incremental_selection = &#123;</span><br><span class="line">  <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">  keymaps = &#123;</span><br><span class="line">    init_selection = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">    node_incremental = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">    node_decremental = <span class="string">&quot;&lt;BS&gt;&quot;</span>,</span><br><span class="line">    scope_incremental = <span class="string">&quot;&lt;TAB&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h5 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h5><p>在 visual 模式中按 &#x3D; 即可实现代码缩进</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 启用代码缩进模块 (=)</span><br><span class="line">indent = &#123;</span><br><span class="line">  <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h5 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h5><p>快捷键中设置了<code>zc</code> 组合键来折叠 <code>&#123;&#125;</code> 中的内容，还使用 <code>zo</code> 组合键来打开对应的折叠。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 开启 Folding 模块</span><br><span class="line">vim.opt.foldmethod = <span class="string">&quot;expr&quot;</span></span><br><span class="line">vim.opt.foldexpr = <span class="string">&quot;nvim_treesitter#foldexpr()&quot;</span></span><br><span class="line">-- 默认不要折叠</span><br><span class="line">-- https://stackoverflow.com/questions/8316139/how-to-set-the-default-to-unfolded-when-you-open-a-file</span><br><span class="line">vim.opt.foldlevel = 99</span><br></pre></td></tr></table></figure>



<p>执行<code>:TSModuleInfo</code>查看是否成功</p>
<p>如果出现问题先执行<code>TSUpdate</code>看是否可以解决，无法解决查看官方issues或wiki</p>
<h3 id="LSP-基础配置"><a href="#LSP-基础配置" class="headerlink" title="LSP 基础配置"></a>LSP 基础配置</h3><p>目的：实现类似IDE的智能提示、语法检查和解析、悬停文档等交互体验</p>
<p>定义：<strong>LSP</strong>(Language Server Protocol) 语言服务协议，该协议定义了在编辑器或IDE与语言服务器之间使用的协议，该语言服务器提供了例如自动补全，转到定义，查找所有引用等的功能；语言服务器索引格式的目标是支持在开发工具中进行丰富的代码导航或者一个无需本地源码副本的WebUI。</p>
<h5 id="开启-neovim-内置LSP"><a href="#开启-neovim-内置LSP" class="headerlink" title="开启 neovim 内置LSP"></a>开启 neovim 内置LSP</h5><p>执行<code>:h lsp</code>查看quick start，里面的步骤如下</p>
<ul>
<li>使用包管理器安装语言服务器</li>
<li>为每一种语言服务器配置LSP客户端</li>
<li>配置快捷键(keymaps)和自动命令(autocmds)</li>
</ul>
<h6 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h6><p>安装插件：<a href="https://github.com/neovim/nvim-lspconfig">neovim&#x2F;nvim-lspconfig: Quickstart configs for Nvim LSP (github.com)</a></p>
<h6 id="配置语言服务器"><a href="#配置语言服务器" class="headerlink" title="配置语言服务器"></a>配置语言服务器</h6><p>安装插件：<a href="https://github.com/williamboman/nvim-lsp-installer">williamboman&#x2F;nvim-lsp-installer: Further development has moved to https://github.com/williamboman/mason.nvim!</a></p>
<p>配置插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--------------------- LSP --------------------</span><br><span class="line">use(<span class="string">&quot;williamboman/nvim-lsp-installer&quot;</span>)</span><br><span class="line">-- Lspconfig</span><br><span class="line">use(&#123; <span class="string">&quot;neovim/nvim-lspconfig&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="安装-LSP-Server"><a href="#安装-LSP-Server" class="headerlink" title="安装 LSP Server"></a>安装 LSP Server</h5><p>运行<code>:LspInstallInfo</code> ，点击 i 即可安装相应的 Server ，进入之后安装 Lua server</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230509232347556.png" alt="image-20230509232347556"></p>
<p>从最上面的介绍得知作者未来会用 <strong>mason.nvim</strong> 取代 <strong>nvim-lsp-installer</strong>，<strong>mason.nvim</strong> 项目支持更多的 server 安装，不仅仅是LSP Server 还支持 DAP servers、 linters、formatters 等等超过 150 个包，100+ 种编程语言，并且升级也是非常简单的</p>
<p>但是安装失败，直接重新安装即可成功</p>
<p>但是有时遇到<code>could not find executable &quot;unzip&quot; in path</code> 问题，可以使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zip unzip</span><br></pre></td></tr></table></figure>

<p>但是安装成功之后发现问题，我从issues中了解到是因为lua server的仓库地址发生变化</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230510000325530.png" alt="image-20230510000325530"></p>
<p>鉴于<strong>nvim-lsp-installer</strong>出现的各种问题，现在使用<strong>mason.nvim</strong>代替<strong>nvim-lsp-installer</strong></p>
<p>步骤：</p>
<ul>
<li>运行<code>:LspUninstallAll</code>卸载<code>nvim-lsp-installer </code></li>
<li>plugins.lua 替换 <strong>nvim-lsp-installer</strong> 插件为 <strong>mason.nvim</strong> 和 <strong>mason-lspconfig.nvim</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(&#123; <span class="string">&quot;williamboman/mason.nvim&quot;</span> &#125;)</span><br><span class="line">use(&#123; <span class="string">&quot;williamboman/mason-lspconfig.nvim&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>lua/lsp/setup.lua</code> 相应部分替换为（这个文件后面会创建，现在先讲下）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, mason = pcall(require, <span class="string">&quot;mason&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, mason_config = pcall(require, <span class="string">&quot;mason-lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason-lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, lspconfig = pcall(require, <span class="string">&quot;lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- :h mason-default-settings</span><br><span class="line">-- ~/.local/share/nvim/mason</span><br><span class="line">mason.setup(&#123;</span><br><span class="line">  ui = &#123;</span><br><span class="line">    icons = &#123;</span><br><span class="line">      package_installed = <span class="string">&quot;✓&quot;</span>,</span><br><span class="line">      package_pending = <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">      package_uninstalled = <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- mason-lspconfig uses the `lspconfig` server names <span class="keyword">in</span> the APIs it exposes - not `mason.nvim` package names</span><br><span class="line">-- https://github.com/williamboman/mason-lspconfig.nvim/blob/main/doc/server-mapping.md</span><br><span class="line">mason_config.setup(&#123;</span><br><span class="line">  ensure_installed = &#123;</span><br><span class="line">    <span class="string">&quot;lua_ls&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- 安装列表</span><br><span class="line">-- &#123; key: 服务器名， value: 配置文件 &#125;</span><br><span class="line">-- key 必须为下列网址列出的 server name，不可以随便写</span><br><span class="line">-- https://github.com/williamboman/nvim-lsp-installer<span class="comment">#available-lsps</span></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">  lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>), -- lua/lsp/config/lua.lua</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, config <span class="keyword">in</span> pairs(servers) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> config ~= nil and <span class="built_in">type</span>(config) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">    -- 自定义初始化配置文件必须实现on_setup 方法</span><br><span class="line">    config.on_setup(lspconfig[name])</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    -- 使用默认参数</span><br><span class="line">    lspconfig[name].setup(&#123;&#125;)</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">require(<span class="string">&quot;lsp.ui&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>保存之后默认安装到  ~&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;mason </p>
</blockquote>
<p>执行<code>:Mason</code>即可打开，操作基本和上面的一样，只不过多了 1，2，3，4，5 是上边TAB快捷键，按 <code>2</code> 即可切换到 LSP</p>
<p>Mason 仓库地址：<a href="https://github.com/williamboman/mason.nvim">Mason </a></p>
<h5 id="配置-LSP-Server"><a href="#配置-LSP-Server" class="headerlink" title="配置 LSP Server"></a>配置 LSP Server</h5><p>创建一个新的目录 <code>lua/lsp/</code> 专门存放 lsp 相关的配置，使用<code>:h mason-lspconfig-automatic-server-setup</code>查看如何配置setup，或是直接看官网</p>
<p>创建<code>lua/lsp/setup.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, mason = pcall(require, <span class="string">&quot;mason&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, mason_config = pcall(require, <span class="string">&quot;mason-lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 mason-lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> status, lspconfig = pcall(require, <span class="string">&quot;lspconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 lspconfig&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- :h mason-default-settings</span><br><span class="line">-- ~/.local/share/nvim/mason</span><br><span class="line">mason.setup(&#123;</span><br><span class="line">  ui = &#123;</span><br><span class="line">    icons = &#123;</span><br><span class="line">      package_installed = <span class="string">&quot;✓&quot;</span>,</span><br><span class="line">      package_pending = <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">      package_uninstalled = <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- mason-lspconfig uses the `lspconfig` server names <span class="keyword">in</span> the APIs it exposes - not `mason.nvim` package names</span><br><span class="line">-- https://github.com/williamboman/mason-lspconfig.nvim/blob/main/doc/server-mapping.md</span><br><span class="line">mason_config.setup(&#123;</span><br><span class="line">  ensure_installed = &#123;</span><br><span class="line">    <span class="string">&quot;lua_ls&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- 安装列表</span><br><span class="line">-- &#123; key: 服务器名， value: 配置文件 &#125;</span><br><span class="line">-- key 必须为下列网址列出的 server name，不可以随便写</span><br><span class="line">-- https://github.com/williamboman/nvim-lsp-installer<span class="comment">#available-lsps</span></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">  lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>), -- lua/lsp/config/lua.lua</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, config <span class="keyword">in</span> pairs(servers) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> config ~= nil and <span class="built_in">type</span>(config) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">    -- 自定义初始化配置文件必须实现on_setup 方法</span><br><span class="line">    config.on_setup(lspconfig[name])</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    -- 使用默认参数</span><br><span class="line">    lspconfig[name].setup(&#123;&#125;)</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">require(<span class="string">&quot;lsp.ui&quot;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="配置-lua-Server"><a href="#配置-lua-Server" class="headerlink" title="配置 lua Server"></a>配置 lua Server</h5><p>创建<code>/lua/lsp/config/lua.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md</span><br><span class="line"><span class="built_in">local</span> runtime_path = vim.split(package.path, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">table.insert(runtime_path, <span class="string">&#x27;lua/?.lua&#x27;</span>)</span><br><span class="line">table.insert(runtime_path, <span class="string">&#x27;lua/?/init.lua&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">    settings = &#123;</span><br><span class="line">        Lua = &#123;</span><br><span class="line">            runtime = &#123;</span><br><span class="line">                -- Tell the language server <span class="built_in">which</span> version of Lua you<span class="string">&#x27;re using (most likely LuaJIT in the case of Neovim)</span></span><br><span class="line"><span class="string">                version = &#x27;</span>LuaJIT<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                -- Setup your lua path</span></span><br><span class="line"><span class="string">                path = runtime_path,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            diagnostics = &#123;</span></span><br><span class="line"><span class="string">                -- Get the language server to recognize the `vim` global</span></span><br><span class="line"><span class="string">                globals = &#123; &#x27;</span>vim<span class="string">&#x27; &#125;,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            workspace = &#123;</span></span><br><span class="line"><span class="string">                -- Make the server aware of Neovim runtime files</span></span><br><span class="line"><span class="string">                library = vim.api.nvim_get_runtime_file(&#x27;</span><span class="string">&#x27;, true),</span></span><br><span class="line"><span class="string">                checkThirdParty = false,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            -- Do not send telemetry data containing a randomized but unique identifier</span></span><br><span class="line"><span class="string">            telemetry = &#123;</span></span><br><span class="line"><span class="string">                enable = false,</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    flags = &#123;</span></span><br><span class="line"><span class="string">        debounce_text_changes = 150,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    on_attach = function(client, bufnr)</span></span><br><span class="line"><span class="string">        -- 禁用格式化功能，交给专门插件插件处理</span></span><br><span class="line"><span class="string">        client.resolved_capabilities.document_formatting = false</span></span><br><span class="line"><span class="string">        client.resolved_capabilities.document_range_formatting = false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        local function buf_set_keymap(...)</span></span><br><span class="line"><span class="string">            vim.api.nvim_buf_set_keymap(bufnr, ...)</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        -- 绑定快捷键</span></span><br><span class="line"><span class="string">        require(&#x27;</span>keybindings<span class="string">&#x27;).mapLSP(buf_set_keymap)</span></span><br><span class="line"><span class="string">        -- 保存时自动格式化</span></span><br><span class="line"><span class="string">        vim.cmd(&#x27;</span>autocmd BufWritePre &lt;buffer&gt; lua vim.lsp.buf.formatting_sync()<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    end,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 查看目录等信息</span></span><br><span class="line"><span class="string">return &#123;</span></span><br><span class="line"><span class="string">    on_setup = function(server)</span></span><br><span class="line"><span class="string">        server:setup(opts)</span></span><br><span class="line"><span class="string">    end,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



<h5 id="配置-LSP-快捷键"><a href="#配置-LSP-快捷键" class="headerlink" title="配置 LSP 快捷键"></a>配置 LSP 快捷键</h5><p><code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- lsp 回调函数快捷键设置</span><br><span class="line">pluginKeys.mapLSP = <span class="keyword">function</span>(mapbuf)</span><br><span class="line">  -- rename</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;rn&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- code action</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;ca&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- go xx</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gd&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gh&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gD&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- diagnostic</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gp&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gk&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gj&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;f&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.formatting()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- 没用到</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;q&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-k&gt;&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wa&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wr&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wl&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;D&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>





<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 内置LSP (新增)</span><br><span class="line">require(<span class="string">&quot;lsp.setup&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>这里记录下：使用:verbose map可以查看所有生效的快捷键</p>
</blockquote>
<h3 id="基于-LSP-代码补全及自定义代码段"><a href="#基于-LSP-代码补全及自定义代码段" class="headerlink" title="基于 LSP 代码补全及自定义代码段"></a>基于 LSP 代码补全及自定义代码段</h3><h5 id="相关插件：hrsh7th-x2F-nvim-cmp-A-completion-plugin-for-neovim-coded-in-Lua-github-com"><a href="#相关插件：hrsh7th-x2F-nvim-cmp-A-completion-plugin-for-neovim-coded-in-Lua-github-com" class="headerlink" title="相关插件：hrsh7th&#x2F;nvim-cmp: A completion plugin for neovim coded in Lua. (github.com)"></a>相关插件：<a href="https://github.com/hrsh7th/nvim-cmp">hrsh7th&#x2F;nvim-cmp: A completion plugin for neovim coded in Lua. (github.com)</a></h5><h5 id="相关概念："><a href="#相关概念：" class="headerlink" title="相关概念："></a>相关概念：</h5><ol>
<li><p>补全引擎</p>
<p>补全引擎就是为 Neovim 提供代码补全核心功能的插件，比如 nvim-cmp</p>
</li>
<li><p>补全源</p>
<p>补全源就是补全引擎需要的数据来源，最常见的来源是来自 Language Server 提供的数据，它会知道某个类有哪些属性和方法等。</p>
</li>
<li><p>snippet 引擎</p>
<p>snippet 引擎就是自定义代码段的引擎，常见的有 <code>vsnip</code>、<code>luasnip</code> 等</p>
</li>
</ol>
<h5 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 补全引擎</span><br><span class="line">use(<span class="string">&quot;hrsh7th/nvim-cmp&quot;</span>)</span><br><span class="line">-- snippet 引擎</span><br><span class="line">use(<span class="string">&quot;hrsh7th/vim-vsnip&quot;</span>)</span><br><span class="line">-- 补全源</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-vsnip&quot;</span>)</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-nvim-lsp&quot;</span>) -- &#123; name = nvim_lsp &#125;</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-buffer&quot;</span>) -- &#123; name = <span class="string">&#x27;buffer&#x27;</span> &#125;,</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-path&quot;</span>) -- &#123; name = <span class="string">&#x27;path&#x27;</span> &#125;</span><br><span class="line">use(<span class="string">&quot;hrsh7th/cmp-cmdline&quot;</span>) -- &#123; name = <span class="string">&#x27;cmdline&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">-- 常见编程语言代码段</span><br><span class="line">use(<span class="string">&quot;rafamadriz/friendly-snippets&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：只有 <code>hrsh7th/nvim-cmp</code> 是补全引擎插件本身，其他 <code>cmp-xxx</code> 基本都是插件补全来源，也就是说当你输入一个变量的时候，可以从多个来源显示补全的内容。</p>
<p>像 hrsh7th&#x2F;cmp-nvim-lsp 就是 Neovim 内置 LSP 提供的补全内容，hrsh7th&#x2F;cmp-buffer 补全当前 buffer 的内容， hrsh7th&#x2F;cmp-cmdline 是命令行的补全，hrsh7th&#x2F;cmp-path 则是用来补全路径，如果配置了这个，当输入一个路径的时候会补全路径</p>
</blockquote>
<p>创建<code>lua/lsp/cmp.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> cmp = require(<span class="string">&quot;cmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">cmp.setup(&#123;</span><br><span class="line">  -- 指定 snippet 引擎</span><br><span class="line">  snippet = &#123;</span><br><span class="line">    <span class="built_in">expand</span> = <span class="keyword">function</span>(args)</span><br><span class="line">      -- For `vsnip` <span class="built_in">users</span>.</span><br><span class="line">      vim.fn[<span class="string">&quot;vsnip#anonymous&quot;</span>](args.body)</span><br><span class="line"></span><br><span class="line">      -- For `luasnip` <span class="built_in">users</span>.</span><br><span class="line">      -- require(<span class="string">&#x27;luasnip&#x27;</span>).lsp_expand(args.body)</span><br><span class="line"></span><br><span class="line">      -- For `ultisnips` <span class="built_in">users</span>.</span><br><span class="line">      -- vim.fn[<span class="string">&quot;UltiSnips#Anon&quot;</span>](args.body)</span><br><span class="line"></span><br><span class="line">      -- For `snippy` <span class="built_in">users</span>.</span><br><span class="line">      -- require<span class="string">&#x27;snippy&#x27;</span>.expand_snippet(args.body)</span><br><span class="line">    end,</span><br><span class="line">  &#125;,</span><br><span class="line">  -- 补全源</span><br><span class="line">  sources = cmp.config.sources(&#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;nvim_lsp&quot;</span> &#125;,</span><br><span class="line">    -- For vsnip <span class="built_in">users</span>.</span><br><span class="line">    &#123; name = <span class="string">&quot;vsnip&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    -- For luasnip <span class="built_in">users</span>.</span><br><span class="line">    -- &#123; name = <span class="string">&#x27;luasnip&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    --For ultisnips <span class="built_in">users</span>.</span><br><span class="line">    -- &#123; name = <span class="string">&#x27;ultisnips&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    -- -- For snippy <span class="built_in">users</span>.</span><br><span class="line">    -- &#123; name = <span class="string">&#x27;snippy&#x27;</span> &#125;,</span><br><span class="line">  &#125;, &#123; &#123; name = <span class="string">&quot;buffer&quot;</span> &#125;, &#123; name = <span class="string">&quot;path&quot;</span> &#125; &#125;),</span><br><span class="line"></span><br><span class="line">  -- 快捷键设置</span><br><span class="line">  mapping = require(<span class="string">&quot;keybindings&quot;</span>).cmp(cmp),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- / 查找模式使用 buffer 源</span><br><span class="line">cmp.setup.cmdline(<span class="string">&quot;/&quot;</span>, &#123;</span><br><span class="line">  mapping = cmp.mapping.preset.cmdline(),</span><br><span class="line">  sources = &#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;buffer&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- : 命令行模式中使用 path 和 cmdline 源.</span><br><span class="line">cmp.setup.cmdline(<span class="string">&quot;:&quot;</span>, &#123;</span><br><span class="line">  mapping = cmp.mapping.preset.cmdline(),</span><br><span class="line">  sources = cmp.config.sources(&#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;path&quot;</span> &#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &#123; name = <span class="string">&quot;cmdline&quot;</span> &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>lua/keybindings.lua</code>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- nvim-cmp 自动补全</span><br><span class="line">pluginKeys.cmp = <span class="keyword">function</span>(cmp)</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        -- 出现补全</span><br><span class="line">        [<span class="string">&quot;&lt;A-.&gt;&quot;</span>] = cmp.mapping(cmp.mapping.complete(), &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;),</span><br><span class="line">        -- 取消补全</span><br><span class="line">        [<span class="string">&quot;&lt;A-,&gt;&quot;</span>] = cmp.mapping(&#123;</span><br><span class="line">            i = cmp.mapping.abort(),</span><br><span class="line">            c = cmp.mapping.close()</span><br><span class="line">        &#125;),</span><br><span class="line">        -- 上一个</span><br><span class="line">        [<span class="string">&quot;&lt;C-k&gt;&quot;</span>] = cmp.mapping.select_prev_item(),</span><br><span class="line">        -- 下一个</span><br><span class="line">        [<span class="string">&quot;&lt;C-j&gt;&quot;</span>] = cmp.mapping.select_next_item(),</span><br><span class="line">        -- 确认</span><br><span class="line">        [<span class="string">&quot;&lt;CR&gt;&quot;</span>] = cmp.mapping.confirm(&#123;</span><br><span class="line">            select = <span class="literal">true</span>,</span><br><span class="line">            behavior = cmp.ConfirmBehavior.Replace</span><br><span class="line">        &#125;),</span><br><span class="line">        -- 如果窗口内容太多，可以滚动</span><br><span class="line">        [<span class="string">&quot;&lt;C-u&gt;&quot;</span>] = cmp.mapping(cmp.mapping.scroll_docs(-4), &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;),</span><br><span class="line">        [<span class="string">&quot;&lt;C-d&gt;&quot;</span>] = cmp.mapping(cmp.mapping.scroll_docs(4), &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;lsp.cmp&quot;</span>) --  (新增)</span><br></pre></td></tr></table></figure>





<h3 id="LSP-功能增强"><a href="#LSP-功能增强" class="headerlink" title="LSP 功能增强"></a>LSP 功能增强</h3><p>UI 插件，同时 lspage还可以自定义快捷键，对于我自己而言我认为有些地方文字更加直观，如果有些朋友需要美化可自行查找</p>
<h5 id="弹窗显示错误"><a href="#弹窗显示错误" class="headerlink" title="弹窗显示错误"></a>弹窗显示错误</h5><blockquote>
<p>当一行代码很长的时候，右侧的提示文字就会显示不全</p>
</blockquote>
<p>之前配置过 gp 快捷键使用弹窗显示错误，可以有效解决</p>
<h5 id="功能增强"><a href="#功能增强" class="headerlink" title="功能增强"></a>功能增强</h5><h5 id="相关插件：kkharji-x2F-lspsaga-nvim-The-neovim-language-server-client-UI-github-com"><a href="#相关插件：kkharji-x2F-lspsaga-nvim-The-neovim-language-server-client-UI-github-com" class="headerlink" title="相关插件：kkharji&#x2F;lspsaga.nvim: The neovim language-server-client UI (github.com)"></a>相关插件：<a href="https://github.com/kkharji/lspsaga.nvim">kkharji&#x2F;lspsaga.nvim: The neovim language-server-client UI (github.com)</a></h5><h5 id="添加插件-1"><a href="#添加插件-1" class="headerlink" title="添加插件"></a>添加插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(<span class="string">&quot;tami5/lspsaga.nvim&quot;</span> )</span><br></pre></td></tr></table></figure>

<p>创建<code>lua/lsp/ui.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> lspsaga = require <span class="string">&#x27;lspsaga&#x27;</span></span><br><span class="line">lspsaga.setup &#123; -- defaults ...</span><br><span class="line">  debug = <span class="literal">false</span>,</span><br><span class="line">  use_saga_diagnostic_sign = <span class="literal">true</span>,</span><br><span class="line">  -- diagnostic sign</span><br><span class="line">  error_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  warn_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  hint_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  infor_sign = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  diagnostic_header_icon = <span class="string">&quot;   &quot;</span>,</span><br><span class="line">  -- code action title icon</span><br><span class="line">  code_action_icon = <span class="string">&quot; &quot;</span>,</span><br><span class="line">  code_action_prompt = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">true</span>,</span><br><span class="line">    sign = <span class="literal">true</span>,</span><br><span class="line">    sign_priority = 40,</span><br><span class="line">    virtual_text = <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  finder_definition_icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">  finder_reference_icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">  max_preview_lines = 10,</span><br><span class="line">  finder_action_keys = &#123;</span><br><span class="line">    -- open = <span class="string">&quot;o&quot;</span>,</span><br><span class="line">    open = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">    vsplit = <span class="string">&quot;s&quot;</span>,</span><br><span class="line">    <span class="built_in">split</span> = <span class="string">&quot;i&quot;</span>,</span><br><span class="line">    -- quit = <span class="string">&quot;q&quot;</span>,</span><br><span class="line">    quit = <span class="string">&quot;&lt;ESC&gt;&quot;</span>,</span><br><span class="line">    scroll_down = <span class="string">&quot;&lt;C-f&gt;&quot;</span>,</span><br><span class="line">    scroll_up = <span class="string">&quot;&lt;C-b&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  code_action_keys = &#123;</span><br><span class="line">    -- quit = <span class="string">&quot;q&quot;</span>,</span><br><span class="line">    quit = <span class="string">&quot;&lt;ESC&gt;&quot;</span>,</span><br><span class="line">    <span class="built_in">exec</span> = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  rename_action_keys = &#123;</span><br><span class="line">    -- quit = <span class="string">&quot;&lt;C-c&gt;&quot;</span>,</span><br><span class="line">    quit = <span class="string">&quot;&lt;ESC&gt;&quot;</span>,</span><br><span class="line">    <span class="built_in">exec</span> = <span class="string">&quot;&lt;CR&gt;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  definition_preview_icon = <span class="string">&quot;  &quot;</span>,</span><br><span class="line">  border_style = <span class="string">&quot;single&quot;</span>,</span><br><span class="line">  rename_prompt_prefix = <span class="string">&quot;➤&quot;</span>,</span><br><span class="line">  rename_output_qflist = &#123;</span><br><span class="line">    <span class="built_in">enable</span> = <span class="literal">false</span>,</span><br><span class="line">    auto_open_qflist = <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  server_filetype_map = &#123;&#125;,</span><br><span class="line">  diagnostic_prefix_format = <span class="string">&quot;%d. &quot;</span>,</span><br><span class="line">  diagnostic_message_format = <span class="string">&quot;%m %c&quot;</span>,</span><br><span class="line">  highlight_prefix = <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>lua/keybindings.lua</code>中的mapLSP 函数替换为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- lsp 回调函数快捷键设置</span><br><span class="line">pluginKeys.mapLSP = <span class="keyword">function</span>(mapbuf)</span><br><span class="line">  -- rename</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 rn</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;rn&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.rename()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;rn&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga rename&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- code action</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 ca</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;ca&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.code_action()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;ca&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga code_action&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- go xx</span><br><span class="line">  --[[</span><br><span class="line">    mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;gd&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;Lspsaga preview_definition&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gd&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.definition()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 gh</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gh&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.hover()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gh&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga hover_doc&lt;cr&gt;&quot;</span>, opt)</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 gr</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.references()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga lsp_finder&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --[[</span><br><span class="line">  Lspsaga 替换 gp, gj, gk</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gp&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.open_float()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gj&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_next()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gk&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.diagnostic.goto_prev()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  --]]</span><br><span class="line">  -- diagnostic</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gp&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga show_line_diagnostics&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gj&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga diagnostic_jump_next&lt;cr&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gk&quot;</span>, <span class="string">&quot;&lt;cmd&gt;Lspsaga diagnostic_jump_prev&lt;cr&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;f&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.format(&#123; bufnr = bufnr &#125;)&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- 未用</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gD&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.declaration()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.implementation()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;q&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.diagnostic.setloclist()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;C-k&gt;&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.signature_help()&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wa&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.add_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wr&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.remove_workspace_folder()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;wl&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">  -- mapbuf(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;space&gt;D&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;lua vim.lsp.buf.type_definition()&lt;CR&gt;&#x27;</span>, opt)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;lsp.ui&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p>之前<code>lua/keybindings.lua</code>定义过格式化快捷键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;f&quot;</span>, <span class="string">&quot;&lt;cmd&gt;lua vim.lsp.buf.format(&#123; bufnr = bufnr &#125;)&lt;CR&gt;&quot;</span>, opt)</span><br></pre></td></tr></table></figure>

<p>但是你会发现格式化不起作用，这是因为使用的 Lua Language Server 并没有实现格式化功能。</p>
<p>格式化方案有如下两种：</p>
<ul>
<li>第一种是使用专门的格式化插件；</li>
<li>第二种是给 Language Server 注入格式化功能。</li>
</ul>
<p>这里只讲解第二种</p>
<h5 id="相关插件：jose-elias-alvarez-x2F-null-ls-nvim-Use-Neovim-as-a-language-server-to-inject-LSP-diagnostics-code-actions-and-more-via-Lua-github-com"><a href="#相关插件：jose-elias-alvarez-x2F-null-ls-nvim-Use-Neovim-as-a-language-server-to-inject-LSP-diagnostics-code-actions-and-more-via-Lua-github-com" class="headerlink" title="相关插件：jose-elias-alvarez&#x2F;null-ls.nvim: Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua. (github.com)"></a>相关插件：<a href="https://github.com/jose-elias-alvarez/null-ls.nvim">jose-elias-alvarez&#x2F;null-ls.nvim: Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua. (github.com)</a></h5><h5 id="添加插件-2"><a href="#添加插件-2" class="headerlink" title="添加插件"></a>添加插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 代码格式化</span><br><span class="line">use(&#123; <span class="string">&quot;jose-elias-alvarez/null-ls.nvim&quot;</span>, requires = <span class="string">&quot;nvim-lua/plenary.nvim&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<h5 id="添加配置文件-lua-lsp-null-ls-lua"><a href="#添加配置文件-lua-lsp-null-ls-lua" class="headerlink" title="添加配置文件 lua/lsp/null-ls.lua"></a>添加配置文件 <code>lua/lsp/null-ls.lua</code></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, null_ls = pcall(require, <span class="string">&quot;null-ls&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 null-ls&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">       <span class="built_in">local</span> formatting = null_ls.builtins.formatting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">null_ls.setup(&#123;</span><br><span class="line">  debug = <span class="literal">false</span>,</span><br><span class="line">  sources = &#123;</span><br><span class="line">    -- Formatting ---------------------</span><br><span class="line">    --  brew install shfmt</span><br><span class="line">    formatting.shfmt,</span><br><span class="line">    -- StyLua</span><br><span class="line">    formatting.stylua,</span><br><span class="line">    -- frontend</span><br><span class="line">    formatting.prettier.with(&#123; -- 只比默认配置少了 markdown</span><br><span class="line">      filetypes = &#123;</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;css&quot;</span>,</span><br><span class="line">        <span class="string">&quot;scss&quot;</span>,</span><br><span class="line">        <span class="string">&quot;less&quot;</span>,</span><br><span class="line">        <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;yaml&quot;</span>,</span><br><span class="line">        <span class="string">&quot;graphql&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    -- formatting.fixjson,</span><br><span class="line">    -- formatting.black.with(&#123; extra_args = &#123; <span class="string">&quot;--fast&quot;</span> &#125; &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  -- 保存自动格式化</span><br><span class="line">    on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">        <span class="keyword">if</span> client.supports_method(<span class="string">&quot;textDocument/formatting&quot;</span>) <span class="keyword">then</span></span><br><span class="line">            vim.api.nvim_clear_autocmds(&#123; group = augroup, buffer = bufnr &#125;)</span><br><span class="line">            vim.api.nvim_create_autocmd(<span class="string">&quot;BufWritePre&quot;</span>, &#123;</span><br><span class="line">                group = augroup,</span><br><span class="line">                buffer = bufnr,</span><br><span class="line">                callback = <span class="keyword">function</span>()</span><br><span class="line">                    -- on 0.8, you should use vim.lsp.buf.format(&#123; bufnr = bufnr &#125;) instead</span><br><span class="line">                    vim.lsp.buf.format(&#123; bufnr = bufnr &#125;)</span><br><span class="line">                    -- vim.lsp.buf.formatting_sync()</span><br><span class="line">                end,</span><br><span class="line">            &#125;)</span><br><span class="line">        end</span><br><span class="line">    end,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><code>init.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;lsp.null-ls&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>安装之后可以运行<code>:LspInfo</code>查看绑定的Language Server</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230512122954608.png" alt="image-20230512122954608"></p>
<p>然后我们可以看到有两个 LSP 了，null-ls 作为通用 LSP，可以在任何 filetypes 中运行。</p>
<p>然后执行<code>:NullLsInfo</code>查看源的激活情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230512123229442.png" alt="image-20230512123229442"></p>
<p>之后的话即可使用<code>:lua vim.lsp.buf.format()</code>命令或是直接使用快捷键<code>&lt;leader&gt;f</code>进行格式化</p>
<p>但是我们会发现包如下错误，这是因为相应语言应该配置相应的Code Formatter，显示报错就是缺少Lua语言的StyLua，其它语言可以自行配置相应的Formatter</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230512140107402.png" alt="image-20230512140107402"></p>
<p>下面展示如何配置stylua</p>
<h5 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h5><p>stylua 需要配置 rust 环境 ，rust官网：<a href="https://www.rust-lang.org/zh-CN/tools/install">安装 Rust - Rust 程序设计语言 (rust-lang.org)</a></p>
<p>因为我是使用WSL，因此直接执行如下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure>

<p>执行<code>source &quot;$HOME/.cargo/env&quot;</code></p>
<p>执行<code>rustc --version</code>看是否成功，失败则看是否添加<code>~/.cargo/bin</code>路径到环境变量中</p>
<h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo install stylua</span><br></pre></td></tr></table></figure>

<p>输出<code>stylua -V</code>看是否成功</p>
<h5 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h5><blockquote>
<p>格式化之后里面的空格就都变成了”^I”, 原本应该是“·”的</p>
</blockquote>
<p>直接将<code>basic.lua</code>文件中设置<code>vim.o.listchars = &quot;space:·,tab:··&quot;</code>或是设置<code>vim.o.list = false</code></p>
<h3 id="前端开发必要配置"><a href="#前端开发必要配置" class="headerlink" title="前端开发必要配置"></a>前端开发必要配置</h3><h5 id="配置语法高亮"><a href="#配置语法高亮" class="headerlink" title="配置语法高亮"></a>配置语法高亮</h5><p>执行<code>:TSInstall css scss json html vue javascript typescript</code></p>
<p>执行<code>:TSInstallInfo</code>查看安装情况</p>
<h5 id="配置-LSP"><a href="#配置-LSP" class="headerlink" title="配置 LSP"></a>配置 LSP</h5><p><code>lua/lsp/setup.lua</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<code>lsp/common-config.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> M = &#123;&#125;</span><br><span class="line"></span><br><span class="line">M.keyAttach = <span class="keyword">function</span>(bufnr)</span><br><span class="line">  <span class="built_in">local</span> <span class="keyword">function</span> buf_set_keymap(mode, lhs, rhs)</span><br><span class="line">    vim.keymap.set(mode, lhs, rhs, &#123; noremap = <span class="literal">true</span>, silent = <span class="literal">true</span>, buffer = bufnr &#125;)</span><br><span class="line">  end</span><br><span class="line">  -- 绑定快捷键</span><br><span class="line">  require(<span class="string">&quot;keybindings&quot;</span>).mapLSP(buf_set_keymap)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 禁用格式化功能，交给专门插件插件处理</span><br><span class="line">M.disableFormat = <span class="keyword">function</span>(client)</span><br><span class="line">  <span class="keyword">if</span> vim.fn.has(<span class="string">&quot;nvim-0.8&quot;</span>) == 1 <span class="keyword">then</span></span><br><span class="line">    client.server_capabilities.documentFormattingProvider = <span class="literal">false</span></span><br><span class="line">    client.server_capabilities.documentRangeFormattingProvider = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    client.resolved_capabilities.document_formatting = <span class="literal">false</span></span><br><span class="line">    client.resolved_capabilities.document_range_formatting = <span class="literal">false</span></span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- M.capabilities = require(<span class="string">&quot;cmp_nvim_lsp&quot;</span>).update_capabilities(vim.lsp.protocol.make_client_capabilities())</span><br><span class="line">M.capabilities = require(<span class="string">&quot;cmp_nvim_lsp&quot;</span>).default_capabilities()</span><br><span class="line"></span><br><span class="line">M.flags = &#123;</span><br><span class="line">  debounce_text_changes = 150,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> M</span><br></pre></td></tr></table></figure>





<p>创建<code>lsp/config/html.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">  	-- 禁用本身语言格式化</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>创建<code>lsp/config/css.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">  end,</span><br><span class="line">  settings = &#123;</span><br><span class="line">    css = &#123;</span><br><span class="line">      validate = <span class="literal">true</span>,</span><br><span class="line">      -- tailwindcss</span><br><span class="line">      lint = &#123;</span><br><span class="line">        unknownAtRules = <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    less = &#123;</span><br><span class="line">      validate = <span class="literal">true</span>,</span><br><span class="line">      lint = &#123;</span><br><span class="line">        unknownAtRules = <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    scss = &#123;</span><br><span class="line">      validate = <span class="literal">true</span>,</span><br><span class="line">      lint = &#123;</span><br><span class="line">        unknownAtRules = <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>上面不禁用的话也是可以的，只不过会和默认的null-ls中的 prettier 格式化冲突，每次格式化都需要选择</p>
</blockquote>
<p>注意html、css文件均是需要项目根目录有<code>package.json</code>文件和prettier依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建package.json并安装prettier依赖，顺便把eslint也配置上</span></span><br><span class="line">npm init -y &amp;&amp; npm i -D prettier eslint</span><br></pre></td></tr></table></figure>











<h5 id="Emmet-LSP-配置"><a href="#Emmet-LSP-配置" class="headerlink" title="Emmet LSP 配置"></a>Emmet LSP 配置</h5><p>使用 emmet 可是使用简单的语法可以快速打出 HTML 结构标签</p>
<p>创建<code>lua/lsp/config/emmet.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  filetypes = &#123; <span class="string">&quot;html&quot;</span>, <span class="string">&quot;typescriptreact&quot;</span>, <span class="string">&quot;javascriptreact&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;sass&quot;</span>, <span class="string">&quot;scss&quot;</span>, <span class="string">&quot;less&quot;</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>lua/lsp/setup.lua</code>修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    emmet_ls = require(<span class="string">&quot;lsp.config.emmet&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="配置-jsonls"><a href="#配置-jsonls" class="headerlink" title="配置 jsonls"></a>配置 jsonls</h5><p>JSON Schema Store 插件，即JSON增强包</p>
<p><code>plugins.lua</code>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- JSON 增强</span><br><span class="line">use(<span class="string">&quot;b0o/schemastore.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>





<p>新建<code>lua/lsp/config/json.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">    -- use fixjson to format</span><br><span class="line">    -- https://github.com/rhysd/fixjson</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">  end,</span><br><span class="line">  settings = &#123;</span><br><span class="line">    json = &#123;</span><br><span class="line">      schemas = require(<span class="string">&quot;schemastore&quot;</span>).json.schemas(),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>lsp/config/setup.lua</code>修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>,<span class="string">&quot;jsonls&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>),</span><br><span class="line">    emmet_ls = require(<span class="string">&quot;lsp.config.emmet&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    jsonls = require(<span class="string">&quot;lsp.config.json&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="配置-tssserver"><a href="#配置-tssserver" class="headerlink" title="配置 tssserver"></a>配置 tssserver</h5><p>添加TS增强包插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(&#123; <span class="string">&quot;jose-elias-alvarez/nvim-lsp-ts-utils&quot;</span>, requires = <span class="string">&quot;nvim-lua/plenary.nvim&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>



<p>创建<code>lsp/config/ts.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> keybindings = require(<span class="string">&quot;keybindings&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> ts_utils = require(<span class="string">&quot;nvim-lsp-ts-utils&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">  flags = common.flags,</span><br><span class="line">  capabilities = common.capabilities,</span><br><span class="line"></span><br><span class="line">  -- https://github.com/jose-elias-alvarez/nvim-lsp-ts-utils/blob/main/lua/nvim-lsp-ts-utils/utils.lua</span><br><span class="line">  -- 传入 tsserver 初始化参数</span><br><span class="line">  -- make inlay hints work</span><br><span class="line">  init_options = &#123;</span><br><span class="line">    hostInfo = <span class="string">&quot;neovim&quot;</span>,</span><br><span class="line">    preferences = &#123;</span><br><span class="line">      includeInlayParameterNameHints = <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      includeInlayParameterNameHintsWhenArgumentMatchesName = <span class="literal">true</span>,</span><br><span class="line">      includeInlayFunctionParameterTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayVariableTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayPropertyDeclarationTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayFunctionLikeReturnTypeHints = <span class="literal">true</span>,</span><br><span class="line">      includeInlayEnumMemberValueHints = <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">    common.disableFormat(client)</span><br><span class="line">    common.keyAttach(bufnr)</span><br><span class="line">    -- defaults</span><br><span class="line">    ts_utils.setup(&#123;</span><br><span class="line">      debug = <span class="literal">false</span>,</span><br><span class="line">      disable_commands = <span class="literal">false</span>,</span><br><span class="line">      enable_import_on_completion = <span class="literal">false</span>,</span><br><span class="line">      -- import all</span><br><span class="line">      import_all_timeout = 5000, -- ms</span><br><span class="line">      -- lower numbers = higher priority</span><br><span class="line">      import_all_priorities = &#123;</span><br><span class="line">        same_file = 1, -- add to existing import statement</span><br><span class="line">        local_files = 2, -- git files or files with relative path markers</span><br><span class="line">        buffer_content = 3, -- loaded buffer content</span><br><span class="line">        buffers = 4, -- loaded buffer names</span><br><span class="line">      &#125;,</span><br><span class="line">      import_all_scan_buffers = 100,</span><br><span class="line">      import_all_select_source = <span class="literal">false</span>,</span><br><span class="line">      -- <span class="keyword">if</span> <span class="literal">false</span> will avoid organizing imports</span><br><span class="line">      always_organize_imports = <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      -- filter diagnostics</span><br><span class="line">      filter_out_diagnostics_by_severity = &#123;&#125;,</span><br><span class="line">      -- https://github.com/microsoft/TypeScript/blob/main/src/compiler/diagnosticMessages.json</span><br><span class="line">      filter_out_diagnostics_by_code = &#123;</span><br><span class="line">        80001,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      -- inlay hints</span><br><span class="line">      auto_inlay_hints = <span class="literal">true</span>,</span><br><span class="line">      inlay_hints_highlight = <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">      inlay_hints_priority = 200, -- priority of the hint extmarks</span><br><span class="line">      inlay_hints_throttle = 150, -- throttle the inlay hint request</span><br><span class="line">      inlay_hints_format = &#123; -- format options <span class="keyword">for</span> individual hint kind</span><br><span class="line">        Type = &#123;&#125;,</span><br><span class="line">        Parameter = &#123;&#125;,</span><br><span class="line">        Enum = &#123;&#125;,</span><br><span class="line">        -- Example format customization <span class="keyword">for</span> `Type` kind:</span><br><span class="line">        -- Type = &#123;</span><br><span class="line">        --     highlight = <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">        --     text = <span class="keyword">function</span>(text)</span><br><span class="line">        --         <span class="built_in">return</span> <span class="string">&quot;-&gt;&quot;</span> .. text:sub(2)</span><br><span class="line">        --     end,</span><br><span class="line">        -- &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      -- update imports on file move</span><br><span class="line">      update_imports_on_move = <span class="literal">false</span>,</span><br><span class="line">      require_confirmation_on_move = <span class="literal">false</span>,</span><br><span class="line">      watch_dir = nil,</span><br><span class="line">    &#125;)</span><br><span class="line">    -- required to fix code action ranges and filter diagnostics</span><br><span class="line">    ts_utils.setup_client(client)</span><br><span class="line">    -- no default maps, so you may want to define some here</span><br><span class="line">    keybindings.mapTsLSP(bufnr)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">  on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">    server.setup(opts)</span><br><span class="line">  end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>同样<code>setup.lua</code>修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>, <span class="string">&quot;jsonls&quot;</span>, <span class="string">&quot;tsserver&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">-- 安装列表</span><br><span class="line">-- &#123; key: 服务器名， value: 配置文件 &#125;</span><br><span class="line">-- key 必须为下列网址列出的 server name，不可以随便写</span><br><span class="line">-- https://github.com/williamboman/nvim-lsp-installer<span class="comment">#available-lsps</span></span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">    lua_ls = require(<span class="string">&quot;lsp.config.lua&quot;</span>),</span><br><span class="line">    html = require(<span class="string">&quot;lsp.config.html&quot;</span>),</span><br><span class="line">    cssls = require(<span class="string">&quot;lsp.config.css&quot;</span>),</span><br><span class="line">    emmet_ls = require(<span class="string">&quot;lsp.config.emmet&quot;</span>),</span><br><span class="line">    jsonls = require(<span class="string">&quot;lsp.config.json&quot;</span>),</span><br><span class="line">    -- 新增</span><br><span class="line">    tsserver = require(<span class="string">&quot;lsp.config.ts&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加快捷键<code>lua/keybindings.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- typescript 快捷键</span><br><span class="line">pluginKeys.mapTsLSP = <span class="keyword">function</span>(mapbuf)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gs&quot;</span>, <span class="string">&quot;:TSLspOrganize&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gr&quot;</span>, <span class="string">&quot;:TSLspRenameFile&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">  mapbuf(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;:TSLspImportAll&lt;CR&gt;&quot;</span>, opt)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<ul>
<li>gs 删除不用的 import 语句并重新排序。</li>
<li>gr 用于改变文件名，同时其他文件中引用该文件的文件名也会被修改。</li>
<li>gi 导入当前文件的所有依赖，并且会自动排序</li>
</ul>
<h5 id="ESLint-和-Prettier-配置"><a href="#ESLint-和-Prettier-配置" class="headerlink" title="ESLint 和 Prettier 配置"></a>ESLint 和 Prettier 配置</h5><p>null-ls 中除了格式化 Formatting，还有Diagnostics（红字错误提示） 和 Code Actions（代码触发的行为）</p>
<p><code>lsp/null-ls.lua</code>修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, null_ls = pcall(require, <span class="string">&quot;null-ls&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">    vim.notify(<span class="string">&quot;没有找到 null-ls&quot;</span>)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> formatting = null_ls.builtins.formatting</span><br><span class="line"><span class="built_in">local</span> diagnostics = null_ls.builtins.diagnostics</span><br><span class="line"><span class="built_in">local</span> code_actions = null_ls.builtins.code_actions</span><br><span class="line"></span><br><span class="line">null_ls.setup(&#123;</span><br><span class="line">    debug = <span class="literal">false</span>,</span><br><span class="line">    sources = &#123; -- Formatting ---------------------</span><br><span class="line">    --  brew install shfmt</span><br><span class="line">    formatting.shfmt, -- StyLua</span><br><span class="line">    formatting.stylua, -- frontend</span><br><span class="line">    formatting.prettier.with(&#123; -- 只比默认配置少了 markdown</span><br><span class="line">        filetypes = &#123;<span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;javascriptreact&quot;</span>, <span class="string">&quot;typescript&quot;</span>, <span class="string">&quot;typescriptreact&quot;</span>, <span class="string">&quot;vue&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;scss&quot;</span>, <span class="string">&quot;less&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;html&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;yaml&quot;</span>, <span class="string">&quot;graphql&quot;</span>&#125;,</span><br><span class="line">        prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span></span><br><span class="line">    &#125;), -- Diagnostics  ---------------------</span><br><span class="line">    diagnostics.eslint.with(&#123;</span><br><span class="line">        prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span></span><br><span class="line">    &#125;), -- code actions ---------------------</span><br><span class="line">    code_actions.gitsigns, code_actions.eslint.with(&#123;</span><br><span class="line">        prefer_local = <span class="string">&quot;node_modules/.bin&quot;</span></span><br><span class="line">    &#125;)&#125;,</span><br><span class="line">    -- <span class="comment">#&#123;m&#125;: message</span></span><br><span class="line">    -- <span class="comment">#&#123;s&#125;: source name (defaults to null-ls if not specified)</span></span><br><span class="line">    -- <span class="comment">#&#123;c&#125;: code (if available)</span></span><br><span class="line">    diagnostics_format = <span class="string">&quot;[#&#123;s&#125;] #&#123;m&#125;&quot;</span>,</span><br><span class="line">    -- 保存自动格式化</span><br><span class="line">    on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">        <span class="keyword">if</span> client.supports_method(<span class="string">&quot;textDocument/formatting&quot;</span>) <span class="keyword">then</span></span><br><span class="line">            vim.api.nvim_clear_autocmds(&#123;</span><br><span class="line">                group = augroup,</span><br><span class="line">                buffer = bufnr</span><br><span class="line">            &#125;)</span><br><span class="line">            vim.api.nvim_create_autocmd(<span class="string">&quot;BufWritePre&quot;</span>, &#123;</span><br><span class="line">                group = augroup,</span><br><span class="line">                buffer = bufnr,</span><br><span class="line">                callback = <span class="keyword">function</span>()</span><br><span class="line">                    -- on 0.8, you should use vim.lsp.buf.format(&#123; bufnr = bufnr &#125;) instead</span><br><span class="line">                    vim.lsp.buf.format(&#123;</span><br><span class="line">                        bufnr = bufnr</span><br><span class="line">                    &#125;)</span><br><span class="line">                    -- vim.lsp.buf.formatting_sync()</span><br><span class="line">                end</span><br><span class="line">            &#125;)</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>code_actions.gitsigns 没有安装可以注释掉</p>
</blockquote>
<p>使用<code>&lt;leader&gt;ca</code>调用 Code Action 自动修复快捷键  </p>
<h3 id="Rust-开发配置"><a href="#Rust-开发配置" class="headerlink" title="Rust 开发配置"></a>Rust 开发配置</h3><p>前文已安装rust环境，此处不赘述</p>
<h5 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h5><p><code>plugin-config/nvim-treesitter.lua</code>中的ensure_installed中添加”rust”</p>
<p>或是执行<code>:TSInstall rust</code></p>
<h5 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h5><p><code>lsp/setup.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mason_config.setup(&#123;</span><br><span class="line">    ensure_installed = &#123;<span class="string">&quot;lua_ls&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;cssls&quot;</span>, <span class="string">&quot;emmet_ls&quot;</span>, <span class="string">&quot;jsonls&quot;</span>, <span class="string">&quot;rust_analyzer&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span> servers = &#123;</span><br><span class="line">  -- 新增</span><br><span class="line">  rust_analyzer = require(<span class="string">&quot;lsp.config.rust&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><code>lsp/config/rust.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">        capabilities = common.capabilities,</span><br><span class="line">        flags = common.flags,</span><br><span class="line">        on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">                common.disableFormat(client)</span><br><span class="line">                common.keyAttach(bufnr)</span><br><span class="line">        end,</span><br><span class="line">        settings = &#123;</span><br><span class="line">                -- to <span class="built_in">enable</span> rust-analyzer settings visit:</span><br><span class="line">                -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc</span><br><span class="line">                [<span class="string">&quot;rust-analyzer&quot;</span>] = &#123;</span><br><span class="line">                        -- <span class="built_in">enable</span> clippy on save</span><br><span class="line">                        checkOnSave = &#123;</span><br><span class="line">                                <span class="built_in">command</span> = <span class="string">&quot;clippy&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">        on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">                <span class="built_in">local</span> ok_rt, rust_tools = pcall(require, <span class="string">&quot;rust-tools&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> not ok_rt <span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Failed to load rust tools, will set up `rust_analyzer` without `rust-tools`.&quot;</span>)</span><br><span class="line">                        server.setup(opts)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        -- We don<span class="string">&#x27;t want to call lspconfig.rust_analyzer.setup() when using rust-tools</span></span><br><span class="line"><span class="string">                        rust_tools.setup(&#123;</span></span><br><span class="line"><span class="string">                                server = opts,</span></span><br><span class="line"><span class="string">                                -- dap = require(&quot;dap.nvim-dap.config.rust&quot;),</span></span><br><span class="line"><span class="string">                        &#125;)</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">        end,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<p>添加 Rust 增强包插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- Rust 增强</span><br><span class="line">use(<span class="string">&quot;simrat39/rust-tools.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="代码格式化-1"><a href="#代码格式化-1" class="headerlink" title="代码格式化"></a>代码格式化</h5><p>安装相应 Formtter</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup component add rustfmt</span><br></pre></td></tr></table></figure>

<p><code>null-ls.lua</code></p>
<p>source中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- rustfmt</span><br><span class="line">formatting.rustfmt,</span><br></pre></td></tr></table></figure>

<p>filetypes中添加<code>&quot;rust&quot;</code></p>
<h3 id="配置C-x2F-C-开发环境"><a href="#配置C-x2F-C-开发环境" class="headerlink" title="配置C&#x2F;C++开发环境"></a>配置C&#x2F;C++开发环境</h3><p>熟悉上面的流程，这个就简单讲了</p>
<p>相关插件：<a href="https://github.com/p00f/clangd_extensions.nvim">p00f&#x2F;clangd_extensions.nvim: Clangd’s off-spec features for neovim’s LSP client. Use https://sr.ht/~p00f&#x2F;clangd_extensions.nvim instead (github.com)</a></p>
<p><code>setup.lua</code></p>
<blockquote>
<p>servers 添加 “c”和“cpp”</p>
</blockquote>
<p>安装格式化插件：<code>apt-get install -y clang-format</code></p>
<p><code>plugin-config/nvim-treesitter.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ensure_installed 添加 “cpp” <span class="string">&quot;c&quot;</span></span><br></pre></td></tr></table></figure>



<p><code>null-ls.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">formatting.prettier.with(&#123;</span><br><span class="line">        filetypes = &#123;</span><br><span class="line">                <span class="string">&quot;c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cpp&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;),</span><br><span class="line">-- clang-format</span><br><span class="line">formatting.clang_format,</span><br></pre></td></tr></table></figure>



<p><code>lsp/config/clangd.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> common = require(<span class="string">&quot;lsp.common-config&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> opts = &#123;</span><br><span class="line">        capabilities = common.capabilities,</span><br><span class="line">        flags = common.flags,</span><br><span class="line">        on_attach = <span class="keyword">function</span>(client, bufnr)</span><br><span class="line">                common.disableFormat(client)</span><br><span class="line">                common.keyAttach(bufnr)</span><br><span class="line">        end,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">        on_setup = <span class="keyword">function</span>(server)</span><br><span class="line">                <span class="built_in">local</span> ok_rt, clangd_extensions = pcall(require, <span class="string">&quot;clangd_extensions&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> not ok_rt <span class="keyword">then</span></span><br><span class="line">                        server.setup(opts)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        clangd_extensions.setup(&#123;</span><br><span class="line">                                server = opts,</span><br><span class="line">                                extensions = &#123;</span><br><span class="line">                                        -- defaults:</span><br><span class="line">                                        -- Automatically <span class="built_in">set</span> inlay hints (<span class="built_in">type</span> hints)</span><br><span class="line">                                        autoSetHints = <span class="literal">true</span>,</span><br><span class="line">                                        -- These apply to the default ClangdSetInlayHints <span class="built_in">command</span></span><br><span class="line">                                        inlay_hints = &#123;</span><br><span class="line">                                                -- Only show inlay hints <span class="keyword">for</span> the current line</span><br><span class="line">                                                only_current_line = <span class="literal">false</span>,</span><br><span class="line">                                                -- Event <span class="built_in">which</span> triggers a refersh of the inlay hints.</span><br><span class="line">                                                -- You can make this <span class="string">&quot;CursorMoved&quot;</span> or <span class="string">&quot;CursorMoved,CursorMovedI&quot;</span> but</span><br><span class="line">                                                -- not that this may cause  higher CPU usage.</span><br><span class="line">                                                -- This option is only respected when only_current_line and</span><br><span class="line">                                                -- autoSetHints both are <span class="literal">true</span>.</span><br><span class="line">                                                only_current_line_autocmd = <span class="string">&quot;CursorHold&quot;</span>,</span><br><span class="line">                                                -- whether to show parameter hints with the inlay hints or not</span><br><span class="line">                                                show_parameter_hints = <span class="literal">true</span>,</span><br><span class="line">                                                -- prefix <span class="keyword">for</span> parameter hints</span><br><span class="line">                                                parameter_hints_prefix = <span class="string">&quot;&lt;- &quot;</span>,</span><br><span class="line">                                                -- prefix <span class="keyword">for</span> all the other hints (<span class="built_in">type</span>, chaining)</span><br><span class="line">                                                other_hints_prefix = <span class="string">&quot;=&gt; &quot;</span>,</span><br><span class="line">                                                -- whether to align to the length of the longest line <span class="keyword">in</span> the file</span><br><span class="line">                                                max_len_align = <span class="literal">false</span>,</span><br><span class="line">                                                -- padding from the left <span class="keyword">if</span> max_len_align is <span class="literal">true</span></span><br><span class="line">                                                max_len_align_padding = 1,</span><br><span class="line">                                                -- whether to align to the extreme right or not</span><br><span class="line">                                                right_align = <span class="literal">false</span>,</span><br><span class="line">                                                -- padding from the right <span class="keyword">if</span> right_align is <span class="literal">true</span></span><br><span class="line">                                                right_align_padding = 7,</span><br><span class="line">                                                -- The color of the hints</span><br><span class="line">                                                highlight = <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">                                                -- The highlight group priority <span class="keyword">for</span> extmark</span><br><span class="line">                                                priority = 100,</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        ast = &#123;</span><br><span class="line">                                                -- These are unicode, should be available <span class="keyword">in</span> any font</span><br><span class="line">                                                role_icons = &#123;</span><br><span class="line">                                                        <span class="built_in">type</span> = <span class="string">&quot;🄣&quot;</span>,</span><br><span class="line">                                                        declaration = <span class="string">&quot;🄓&quot;</span>,</span><br><span class="line">                                                        expression = <span class="string">&quot;🄔&quot;</span>,</span><br><span class="line">                                                        statement = <span class="string">&quot;;&quot;</span>,</span><br><span class="line">                                                        specifier = <span class="string">&quot;🄢&quot;</span>,</span><br><span class="line">                                                        [<span class="string">&quot;template argument&quot;</span>] = <span class="string">&quot;🆃&quot;</span>,</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                kind_icons = &#123;</span><br><span class="line">                                                        Compound = <span class="string">&quot;🄲&quot;</span>,</span><br><span class="line">                                                        Recovery = <span class="string">&quot;🅁&quot;</span>,</span><br><span class="line">                                                        TranslationUnit = <span class="string">&quot;🅄&quot;</span>,</span><br><span class="line">                                                        PackExpansion = <span class="string">&quot;🄿&quot;</span>,</span><br><span class="line">                                                        TemplateTypeParm = <span class="string">&quot;🅃&quot;</span>,</span><br><span class="line">                                                        TemplateTemplateParm = <span class="string">&quot;🅃&quot;</span>,</span><br><span class="line">                                                        TemplateParamObject = <span class="string">&quot;🅃&quot;</span>,</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                --[[ These require codicons (https://github.com/microsoft/vscode-codicons)</span><br><span class="line">            role_icons = &#123;</span><br><span class="line">                <span class="built_in">type</span> = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                declaration = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                expression = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                specifier = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                statement = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                [<span class="string">&quot;template argument&quot;</span>] = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            kind_icons = &#123;</span><br><span class="line">                Compound = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                Recovery = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                TranslationUnit = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                PackExpansion = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                TemplateTypeParm = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                TemplateTemplateParm = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                TemplateParamObject = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            &#125;, ]]</span><br><span class="line"></span><br><span class="line">                                                highlights = &#123;</span><br><span class="line">                                                        detail = <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        memory_usage = &#123;</span><br><span class="line">                                                border = <span class="string">&quot;none&quot;</span>,</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        symbol_info = &#123;</span><br><span class="line">                                                border = <span class="string">&quot;none&quot;</span>,</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                &#125;,</span><br><span class="line">                        &#125;)</span><br><span class="line">                end</span><br><span class="line">        end,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="代码运行器"><a href="#代码运行器" class="headerlink" title="代码运行器"></a>代码运行器</h3><p>相关插件：<a href="https://github.com/CRAG666/code_runner.nvim">CRAG666&#x2F;code_runner.nvim: Neovim plugin.The best code runner you could have, it is like the one in vscode but with super powers, it manages projects like in intellij but without being slow (github.com)</a></p>
<p>添加插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use <span class="string">&#x27;CRAG666/code_runner.nvim&#x27;</span></span><br></pre></td></tr></table></figure>

<p>配置插件<code>plugin-config/code-runner.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, code_runner = pcall(require, <span class="string">&quot;code_runner&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">	vim.notify(<span class="string">&quot;没有找到 code_runner&quot;</span>)</span><br><span class="line">	<span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">code_runner.setup(&#123;</span><br><span class="line">	-- choose default mode (valid term, tab, <span class="built_in">float</span>, toggle)</span><br><span class="line">	mode = <span class="string">&quot;term&quot;</span>,</span><br><span class="line">	-- Focus on runner window(only works on toggle, term and tab mode)</span><br><span class="line">	focus = <span class="literal">true</span>,</span><br><span class="line">	-- startinsert (see <span class="string">&#x27;:h inserting-ex&#x27;</span>)</span><br><span class="line">	startinsert = <span class="literal">false</span>,</span><br><span class="line">	term = &#123;</span><br><span class="line">		--  Position to open the terminal, this option is ignored <span class="keyword">if</span> mode is tab</span><br><span class="line">		position = <span class="string">&quot;bot&quot;</span>,</span><br><span class="line">		-- window size, this option is ignored <span class="keyword">if</span> tab is <span class="literal">true</span></span><br><span class="line">		size = 8,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="built_in">float</span> = &#123;</span><br><span class="line">		-- Key that close the code_runner floating window</span><br><span class="line">		close_key = <span class="string">&quot;&lt;ESC&gt;&quot;</span>,</span><br><span class="line">		-- Window border (see <span class="string">&#x27;:h nvim_open_win&#x27;</span>)</span><br><span class="line">		border = <span class="string">&quot;none&quot;</span>,</span><br><span class="line"></span><br><span class="line">		-- Num from `0 - 1` <span class="keyword">for</span> measurements</span><br><span class="line">		height = 0.8,</span><br><span class="line">		width = 0.8,</span><br><span class="line">		x = 0.5,</span><br><span class="line">		y = 0.5,</span><br><span class="line"></span><br><span class="line">		-- Highlight group <span class="keyword">for</span> floating window/border (see <span class="string">&#x27;:h winhl&#x27;</span>)</span><br><span class="line">		border_hl = <span class="string">&quot;FloatBorder&quot;</span>,</span><br><span class="line">		float_hl = <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line"></span><br><span class="line">		-- Transparency (see <span class="string">&#x27;:h winblend&#x27;</span>)</span><br><span class="line">		blend = 0,</span><br><span class="line">	&#125;,</span><br><span class="line">	filetype_path = <span class="string">&quot;&quot;</span>, -- No default path defined</span><br><span class="line">	before_run_filetype = <span class="keyword">function</span>()</span><br><span class="line">		vim.cmd(<span class="string">&quot;:w&quot;</span>)</span><br><span class="line">	end,</span><br><span class="line">	filetype = &#123;</span><br><span class="line">		javascript = <span class="string">&quot;node&quot;</span>,</span><br><span class="line">		java = &#123;</span><br><span class="line">			<span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;javac <span class="variable">$fileName</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;java <span class="variable">$fileNameWithoutExt</span>&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		c = &#123;</span><br><span class="line">			<span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;gcc <span class="variable">$fileName</span>&quot;</span>,</span><br><span class="line">			<span class="string">&quot;-o <span class="variable">$fileNameWithoutExt</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;<span class="variable">$dir</span>/<span class="variable">$fileNameWithoutExt</span>&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		cpp = &#123;</span><br><span class="line">			<span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;g++ <span class="variable">$fileName</span>&quot;</span>,</span><br><span class="line">			<span class="string">&quot;-o <span class="variable">$fileNameWithoutExt</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;<span class="variable">$dir</span>/<span class="variable">$fileNameWithoutExt</span>&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		python = <span class="string">&quot;python -u&quot;</span>,</span><br><span class="line">		sh = <span class="string">&quot;bash&quot;</span>,</span><br><span class="line">		rust = &#123;</span><br><span class="line">			<span class="string">&quot;cd <span class="variable">$dir</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;rustc <span class="variable">$fileName</span> &amp;&amp;&quot;</span>,</span><br><span class="line">			<span class="string">&quot;<span class="variable">$dir</span>/<span class="variable">$fileNameWithoutExt</span>&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	project_path = <span class="string">&quot;&quot;</span>, -- No default path defined</span><br><span class="line">	project = &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>之后init.lua中添加插件，最后添加快捷键，使用空格加<code>r</code>即可运行代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 代码运行器</span><br><span class="line">map(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;r&#x27;</span>, <span class="string">&#x27;:RunCode&lt;CR&gt;&#x27;</span>, &#123; noremap = <span class="literal">true</span>, silent = <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h5 id="自动补全括号"><a href="#自动补全括号" class="headerlink" title="自动补全括号"></a>自动补全括号</h5><p>插件仓库：<a href="https://github.com/windwp/nvim-autopairs">windwp&#x2F;nvim-autopairs: autopairs for neovim written by lua (github.com)</a></p>
<p>引入插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(<span class="string">&quot;windwp/nvim-autopairs&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>创建<code>lua/plugin-config/nvim-autopairs.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- https://github.com/windwp/nvim-autopairs</span><br><span class="line"><span class="built_in">local</span> status, autopairs = pcall(require, <span class="string">&quot;nvim-autopairs&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 nvim-autopairs&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line">autopairs.setup(&#123;</span><br><span class="line">  check_ts = <span class="literal">true</span>,</span><br><span class="line">  ts_config = &#123;</span><br><span class="line">    lua = &#123; <span class="string">&quot;string&quot;</span> &#125;, -- it will not add a pair on that treesitter node</span><br><span class="line">    javascript = &#123; <span class="string">&quot;template_string&quot;</span> &#125;,</span><br><span class="line">    java = <span class="literal">false</span>, -- don<span class="string">&#x27;t check treesitter on java</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">-- If you want insert `(` after select function or method item</span></span><br><span class="line"><span class="string">local cmp_autopairs = require(&quot;nvim-autopairs.completion.cmp&quot;)</span></span><br><span class="line"><span class="string">local cmp = require(&quot;cmp&quot;)</span></span><br><span class="line"><span class="string">cmp.event:on(&quot;confirm_done&quot;, cmp_autopairs.on_confirm_done(&#123; map_char = &#123; tex = &quot;&quot; &#125; &#125;))</span></span><br></pre></td></tr></table></figure>

<p><code>init.lua</code></p>
<h5 id="快速注释插件"><a href="#快速注释插件" class="headerlink" title="快速注释插件"></a>快速注释插件</h5><p>插件仓库：<a href="https://github.com/numToStr/Comment.nvim">numToStr&#x2F;Comment.nvim: &#x2F;&#x2F; Smart and powerful comment plugin for neovim. Supports treesitter, dot repeat, left-right&#x2F;up-down motions, hooks, and more (github.com)</a></p>
<p>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use(<span class="string">&quot;numToStr/Comment.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>创建<code>lua/plugin-config/comment.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, comment = pcall(require, <span class="string">&quot;Comment&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 Comment&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> default_opts = &#123;</span><br><span class="line">  ---Add a space b/w comment and the line</span><br><span class="line">  ---@<span class="built_in">type</span> boolean|fun():boolean</span><br><span class="line">  padding = <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  ---Whether the cursor should stay at its position</span><br><span class="line">  ---NOTE: This only affects NORMAL mode mappings and doesn<span class="string">&#x27;t work with dot-repeat</span></span><br><span class="line"><span class="string">  ---@type boolean</span></span><br><span class="line"><span class="string">  sticky = true,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---Lines to be ignored while comment/uncomment.</span></span><br><span class="line"><span class="string">  ---Could be a regex string or a function that returns a regex string.</span></span><br><span class="line"><span class="string">  ---Example: Use &#x27;</span>^$<span class="string">&#x27; to ignore empty lines</span></span><br><span class="line"><span class="string">  ---@type string|fun():string</span></span><br><span class="line"><span class="string">  ignore = nil,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---LHS of toggle mappings in NORMAL + VISUAL mode</span></span><br><span class="line"><span class="string">  ---@type table</span></span><br><span class="line"><span class="string">  toggler = &#123;</span></span><br><span class="line"><span class="string">    ---Line-comment toggle keymap</span></span><br><span class="line"><span class="string">    line = &quot;gcc&quot;,</span></span><br><span class="line"><span class="string">    ---Block-comment toggle keymap</span></span><br><span class="line"><span class="string">    block = &quot;gbc&quot;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---LHS of operator-pending mappings in NORMAL + VISUAL mode</span></span><br><span class="line"><span class="string">  ---@type table</span></span><br><span class="line"><span class="string">  opleader = &#123;</span></span><br><span class="line"><span class="string">    ---Line-comment keymap</span></span><br><span class="line"><span class="string">    line = &quot;gc&quot;,</span></span><br><span class="line"><span class="string">    ---Block-comment keymap</span></span><br><span class="line"><span class="string">    block = &quot;gb&quot;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---LHS of extra mappings</span></span><br><span class="line"><span class="string">  ---@type table</span></span><br><span class="line"><span class="string">  extra = &#123;</span></span><br><span class="line"><span class="string">    ---Add comment on the line above</span></span><br><span class="line"><span class="string">    above = &quot;gcO&quot;,</span></span><br><span class="line"><span class="string">    ---Add comment on the line below</span></span><br><span class="line"><span class="string">    below = &quot;gco&quot;,</span></span><br><span class="line"><span class="string">    ---Add comment at the end of line</span></span><br><span class="line"><span class="string">    eol = &quot;gcA&quot;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ---Create basic (operator-pending) and extended mappings for NORMAL + VISUAL mode</span></span><br><span class="line"><span class="string">  ---NOTE: If `mappings = false` then the plugin won&#x27;</span>t create any mappings</span><br><span class="line">  ---@<span class="built_in">type</span> boolean|table</span><br><span class="line">  mappings = &#123;</span><br><span class="line">    ---Operator-pending mapping</span><br><span class="line">    ---Includes `gcc`, `gbc`, `gc[count]&#123;motion&#125;` and `gb[count]&#123;motion&#125;`</span><br><span class="line">    ---NOTE: These mappings can be changed individually by `opleader` and `toggler` config</span><br><span class="line">    basic = <span class="literal">true</span>,</span><br><span class="line">    ---Extra mapping</span><br><span class="line">    ---Includes `gco`, `gcO`, `gcA`</span><br><span class="line">    extra = <span class="literal">false</span>,</span><br><span class="line">    ---Extended mapping</span><br><span class="line">    ---Includes `g&gt;`, `g&lt;`, `g&gt;[count]&#123;motion&#125;` and `g&lt;[count]&#123;motion&#125;`</span><br><span class="line">    extended = <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  ---Pre-hook, called before commenting the line</span><br><span class="line">  ---@<span class="built_in">type</span> fun(ctx: Ctx):string</span><br><span class="line">  pre_hook = nil,</span><br><span class="line"></span><br><span class="line">  ---Post-hook, called after commenting is <span class="keyword">done</span></span><br><span class="line">  ---@<span class="built_in">type</span> fun(ctx: Ctx)</span><br><span class="line">  post_hook = nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-- 关闭了extra快捷键，只用keybindings里定义的基础快捷键</span><br><span class="line">comment.setup(vim.tbl_deep_extend(<span class="string">&quot;force&quot;</span>, default_opts, require(<span class="string">&quot;keybindings&quot;</span>).comment))</span><br></pre></td></tr></table></figure>



<p>定义快捷键 <code>keybindings.lua</code> gcc 快捷键作为行注释，gbc 快捷键作为块注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 代码注释插件</span><br><span class="line">-- see ./lua/plugin-config/comment.lua</span><br><span class="line">pluginKeys.comment = &#123;</span><br><span class="line">  -- Normal 模式快捷键</span><br><span class="line">  toggler = &#123;</span><br><span class="line">    line = <span class="string">&quot;gcc&quot;</span>, -- 行注释</span><br><span class="line">    block = <span class="string">&quot;gbc&quot;</span>, -- 块注释</span><br><span class="line">  &#125;,</span><br><span class="line">  -- Visual 模式</span><br><span class="line">  opleader = &#123;</span><br><span class="line">    line = <span class="string">&quot;gc&quot;</span>,</span><br><span class="line">    bock = <span class="string">&quot;gb&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code>中引入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">require(<span class="string">&quot;plugin-config.comment&quot;</span>)</span><br></pre></td></tr></table></figure>





<h5 id="Surround-配置"><a href="#Surround-配置" class="headerlink" title="Surround 配置"></a>Surround 配置</h5><p>引入插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- surround</span><br><span class="line">use(<span class="string">&quot;ur4ltz/surround.nvim&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>lua/plugin-config/surround.lua</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> status, surround = pcall(require, <span class="string">&quot;surround&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not status <span class="keyword">then</span></span><br><span class="line">  vim.notify(<span class="string">&quot;没有找到 surround&quot;</span>)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">surround.setup(&#123;</span><br><span class="line">  mappings_style = <span class="string">&quot;surround&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>init.lua</code></p>
<p>surround 官方快捷键如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Normal Mode - Sandwich Mode</span><br><span class="line">Provides key mapping to add surrounding characters.( visually select <span class="keyword">then</span> press s&lt;char&gt; or press sa&#123;motion&#125;&#123;char&#125;)</span><br><span class="line">Provides key mapping to replace surrounding characters.( sr&lt;from&gt;&lt;to&gt; )</span><br><span class="line">Provides key mapping to delete surrounding characters.( sd&lt;char&gt; )</span><br><span class="line">ss repeats last surround <span class="built_in">command</span>.</span><br><span class="line">Normal Mode - Surround Mode</span><br><span class="line">Provides key mapping to add surrounding characters.( visually select <span class="keyword">then</span> press s&lt;char&gt; or press ys&#123;motion&#125;&#123;char&#125;)</span><br><span class="line">Provides key mapping to replace surrounding characters.( cs&lt;from&gt;&lt;to&gt; )</span><br><span class="line">Provides key mapping to delete surrounding characters.( ds&lt;char&gt; )</span><br><span class="line">Insert Mode</span><br><span class="line">&lt;c-s&gt;&lt;char&gt; will insert both pairs <span class="keyword">in</span> insert mode.</span><br><span class="line">&lt;c-s&gt;&lt;char&gt;&lt;space&gt; will insert both pairs <span class="keyword">in</span> insert mode with surrounding whitespace.</span><br><span class="line">&lt;c-s&gt;&lt;char&gt;&lt;c-s&gt; will insert both pairs on newlines insert mode.</span><br></pre></td></tr></table></figure>

<p>常用快捷键</p>
<ul>
<li><code>ds&lt;char&gt;</code></li>
<li><code>cs&lt;from&gt;&lt;to&gt;</code></li>
<li><code>ys&#123;motion&#125;&#123;char&#125;</code></li>
</ul>
<h5 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h5><p>我在推送仓库时频繁遇到<code>GnuTLS recv error (-110)</code></p>
<p>解决链接：<a href="https://stackoverflow.com/questions/52529639/gnutls-recv-error-110-the-tls-connection-was-non-properly-terminated#">git - GnuTLS recv error (-110)</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line">sudo apt-get install build-essential fakeroot dpkg-dev -y</span><br><span class="line">sudo apt-get build-dep git -y</span><br><span class="line">sudo apt-get install libcurl4-openssl-dev -y</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> source-git</span><br><span class="line"><span class="built_in">cd</span> source-git/</span><br><span class="line">apt-get <span class="built_in">source</span> git</span><br><span class="line"><span class="built_in">cd</span> git-2.*.*/</span><br><span class="line">sed -i -- <span class="string">&#x27;s/libcurl4-gnutls-dev/libcurl4-openssl-dev/&#x27;</span> ./debian/control</span><br><span class="line">sed -i -- <span class="string">&#x27;/TEST\s*=\s*test/d&#x27;</span> ./debian/rules</span><br><span class="line">dpkg-buildpackage -rfakeroot -b -uc -us</span><br><span class="line">sudo dpkg -i ../git_*ubuntu*.deb</span><br></pre></td></tr></table></figure>

<p>直接运行这个脚本即可</p>
<p>之后推送遇到<code>remote: Support for password authentication was removed on August 13, 2021</code>问题，虽然我不太清楚我配了SSH key，为什么还是走的密码验证，但是我还是按照他的提示来做获取<code>token</code>，直接github首页中Setting-&gt;Developer settings-&gt;Personal access tokens 生成token</p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://&lt;your_token&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</span><br></pre></td></tr></table></figure>

<p>最后即可免密推送</p>
<h3 id="备忘记录"><a href="#备忘记录" class="headerlink" title="备忘记录"></a>备忘记录</h3><p>学习vim快捷键网站：<a href="https://vim.rtorr.com/lang/zh_cn">Vim Cheat Sheet (rtorr.com)</a></p>
<p>使用<code>:h clipboard</code>查看复制粘贴命令</p>
<p>文档推荐使用<code>set clipboard=unnamedplus</code>，或是执行<code>set clipboard^=unnamed,unnamedplus</code>就可以连通vim剪切板和系统剪切板，但是这个命令只是暂时性的，只能当前页面生效，为了永久生效，可以在<code>basic.lua</code>中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 复制粘贴联通系统粘贴板</span><br><span class="line">vim.o.clipboard = <span class="string">&quot;unnamedplus&quot;</span></span><br></pre></td></tr></table></figure>



<p>全选复制文件<code>:%y</code>或是<code>ggyG</code></p>
<p>只是删除而不将删除的部分复制到剪切板中<code>&quot;_dd</code>（本质上是将剪切的内容放到_寄存器中，以便于和+寄存器区分）</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>对我自己而言，配置的这些功能虽然少，但是暂时够用，如果追求更多的功能，可以直接用小册作者的仓库，或是其他优秀仓库</p>
<p>其实我觉得其实作为个人使用来说，没有特殊需求的情况下不是很推荐自己配置，只需要看懂本篇博客，然后可以做到更改别人写好的配置即可</p>
<p>还有就是切忌盲目复制粘贴，一定要看官方文档</p>
<p>本篇博客示例配置仓库：<a href="https://github.com/ReturnTmp/rettmp-nvim">ReturnTmp&#x2F;rettmp-nvim</a></p>
<p>掘金小册作者仓库：<a href="https://github.com/nshen/learn-neovim-lua">https://github.com/nshen/learn-neovim-lua</a></p>
<blockquote>
<p>注意：v2分支是neovim 8.0+适用</p>
</blockquote>
<p>或是直接使用作者的新仓库：<a href="https://github.com/nshen/InsisVim">nshen&#x2F;InsisVim: 🗃 An out-of-the-box Neovim IDE solution that setup development environment in an incredibly simple way. (github.com)</a></p>
<blockquote>
<p>除了小册作者的配置仓库，这里再推荐一个优秀Neovim配置仓库：<a href="https://github.com/ayamir/nvimdots">ayamir&#x2F;nvimdots: A well configured and structured Neovim. (github.com)</a></p>
</blockquote>
<p>至此Neovim配置学习就结束了:smile:</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅提交 Git Commit Message</title>
    <url>/2023/05/15/%E4%BC%98%E9%9B%85%E6%8F%90%E4%BA%A4-Git-Commit-Message/</url>
    <content><![CDATA[<blockquote>
<p>commit message 是开发的日常操作, 一个优秀的message不仅有助于他人 review, 还可以有效的输出 CHANGELOG, 对项目的管理实际至关重要, 但是实际工作中却常常被大家忽略，希望通过本文， 能够帮助大家规范 commit message 的书写</p>
</blockquote>
<span id="more"></span>

<h1 id="Message-规范"><a href="#Message-规范" class="headerlink" title="Message 规范"></a>Message 规范</h1><blockquote>
<p>那么如何能优雅而又不失体面的提交你的代码呢？其实我们的 <code>git commit message</code> 是应该具备一些规范的。目前规范用的比较多的是 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular 团队的规范</a></p>
</blockquote>
<p>message 样例：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Type：必须是下列之一</p>
<ul>
<li><strong>feat</strong>：一个新功能</li>
</ul>
</li>
<li><p><strong>fix</strong>：bug修复</p>
<ul>
<li><strong>docs</strong>：编辑文档</li>
<li><strong>style</strong>：不影响代码含义的更改(空格、格式、缺少分号等，不是css的更改)</li>
<li><strong>refactor</strong>：既不修复bug也不添加特性的代码更改</li>
<li><strong>perf</strong>：提高性能的代码更改</li>
<li><strong>test</strong>：添加缺失的或纠正现有的测试</li>
<li><strong>chore</strong>：对构建过程或辅助工具和库(如文档生成)的更改</li>
</ul>
</li>
<li><p><strong>Subject</strong>：主题包含对变更的简洁描述</p>
</li>
<li><p><strong>Body</strong>：具体的修改内容，可以包括与之前的对比</p>
</li>
<li><p><strong>Footer</strong>：通常是 BREAKING CHANGE 或修复的 issue 链接</p>
</li>
</ul>
<h1 id="规范工具"><a href="#规范工具" class="headerlink" title="规范工具"></a>规范工具</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>commitizen git commit 格式化工具, 为我们提供标准化的 commit 信息。 帮助我们统一项目commit ， 便于信息的回溯或日志的生成。# commit message 格式</p>
<p>commitizen 只是提供一个commit 格式化或交互工具, 最终需要输出符合 commit 规则的信息给 git， 所以需要线了解 commit 格式规则</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D commitizen cz-conventional-changelog</span><br></pre></td></tr></table></figure>

<p>package.json中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	...</span><br><span class="line">  <span class="string">&quot;commit&quot;</span>: <span class="string">&quot;git-cz&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;./node_modules/cz-conventional-changelog&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="自定义-Adapter"><a href="#自定义-Adapter" class="headerlink" title="自定义 Adapter"></a>自定义 Adapter</h3><p>如果 Angular 的规范不符合我们的实际，同样我们也可以通过 <a href="https://github.com/leonardoanalista/cz-customizable">cz-customizable</a> 定制一套符合自己或者团队的规范。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D cz-customizable</span><br></pre></td></tr></table></figure>

<p>同时package.json需要修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/cz-customizable&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之后对应项目目录下创建 .cz-config.js 文件，用来维护自己的格式</p>
<p>官网中有对应的样例配置文件：<a href="https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js">cz-customizable&#x2F;cz-config-EXAMPLE.js at master · leoforfree&#x2F;cz-customizable · GitHub</a></p>
<h3 id="校验-Message"><a href="#校验-Message" class="headerlink" title="校验 Message"></a>校验 Message</h3><h5 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h5><p>可以做到如果不符合校验规范，就会直接拒绝 commit 请求</p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Angular 团队的规范</span></span><br><span class="line">npm install -D @commitlint/config-conventional @commitlint/cli</span><br><span class="line"><span class="comment"># 自定义规范</span></span><br><span class="line">npm install -D commitlint-config-cz @commitlint/cli</span><br></pre></td></tr></table></figure>



<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>在项目目录下创建配置文件 .commitlintrc.js</p>
<p>Angular 团队的规范</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;&#x27;</span>@commitlint/config-conventional<span class="string">&#x27;&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="自定义规范"><a href="#自定义规范" class="headerlink" title="自定义规范"></a>自定义规范</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">&#x27;cz&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="Husky"><a href="#Husky" class="headerlink" title="Husky"></a>Husky</h3><p>在做前端工程化时husky可以说是一个必不可少的工具。husky可以让我们向项目中方便添加git hooks。</p>
<p>官方链接：<a href="https://github.com/typicode/husky">typicode&#x2F;husky: Git hooks made easy 🐶 woof! (github.com)</a></p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -D husky</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>package.json中添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      ...<span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;commit-msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commitlint -e $GIT_PARAMS&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>或者在 .huskyrc 文件中</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commit-msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commitlint -e $GIT_PARAMS&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>配置工具篇（tmux+ranger+lazygit）</title>
    <url>/2023/05/16/%E4%BC%98%E9%9B%85%E9%85%8D%E7%BD%AE%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>tmux 可以管理多个会话和任务，在一个终端窗口中同时运行多个命令行程序</p>
<p>ranger 可以帮助你在命令行下进行文件管理和操作</p>
<p>lazygit 提供了一个简化的界面来管理 Git 仓库，可以提高你在命令行环境下的工作效率和操作便捷性。</p>
<p>本文主要将详细讲解如何配置（tmux+ranger+lazygit），希望可以帮助大家</p>
</blockquote>
<span id="more"></span>

<h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网解释：tmux是一个终端多路复用器：它允许在单个屏幕上创建、访问和控制多个终端。tmux可以从屏幕上分离出来，继续在后台运行，然后再重新连接。</p>
<p>此版本在Open BSD、Free BSD、Net BSD、Linux、mac OS和Solaris上运行。</p>
<p>官网地址：<a href="https://github.com/tmux/tmux">tmux&#x2F;tmux: tmux source code (github.com)</a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 或 Debian</span></span><br><span class="line">$ sudo apt-get install tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 或 Fedora</span></span><br><span class="line">$ sudo yum install tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac</span></span><br><span class="line">$ brew install tmux</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure>

<p>上面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230523160429119.png" alt="image-20230523160429119"></p>
<p>按下<code>Ctrl+d</code>或者显式输入<code>exit</code>命令，就可以退出 Tmux 窗口。</p>
<h3 id="前缀键"><a href="#前缀键" class="headerlink" title="前缀键"></a>前缀键</h3><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code>，即先按下<code>Ctrl+b</code>，快捷键才会生效。</p>
<p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。</p>
<p>然后，按下 ESC 键或<code>q</code>键，就可以退出帮助。</p>
<h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><h3 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h3><p>第一个启动的 Tmux 窗口，编号是<code>0</code>，第二个窗口的编号是<code>1</code>，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p>
<p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -s &lt;session-name&gt;</span><br></pre></td></tr></table></figure>



<h3 id="分离会话"><a href="#分离会话" class="headerlink" title="分离会话"></a>分离会话</h3><p> Tmux 窗口中，按下<code>Ctrl+b d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux detach</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</p>
<p><code>tmux ls</code>命令可以查看当前所有的 Tmux 会话。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ tmux list-session</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="接入会话"><a href="#接入会话" class="headerlink" title="接入会话"></a>接入会话</h3><p><code>tmux attach</code>命令用于重新接入某个已存在的会话。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用会话编号</span></span><br><span class="line">$ tmux attach -t 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">$ tmux attach -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="杀死会话"><a href="#杀死会话" class="headerlink" title="杀死会话"></a>杀死会话</h3><p><code>tmux kill-session</code>命令用于杀死某个会话。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用会话编号</span></span><br><span class="line">$ tmux kill-session -t 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">$ tmux kill-session -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="切换会话"><a href="#切换会话" class="headerlink" title="切换会话"></a>切换会话</h3><p><code>tmux switch</code>命令用于切换会话。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用会话编号</span></span><br><span class="line">$ tmux switch -t 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用会话名称</span></span><br><span class="line">$ tmux switch -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="重命名会话"><a href="#重命名会话" class="headerlink" title="重命名会话"></a>重命名会话</h3><p><code>tmux rename-session</code>命令用于重命名会话。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux rename-session -t 0 &lt;new-name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将0号会话重命名。</p>
<h3 id="会话快捷键"><a href="#会话快捷键" class="headerlink" title="会话快捷键"></a>会话快捷键</h3><p>下面是一些会话相关的快捷键。</p>
<blockquote>
<ul>
<li><code>Ctrl+b d</code>：分离当前会话。</li>
<li><code>Ctrl+b s</code>：列出所有会话。</li>
<li><code>Ctrl+b $</code>：重命名当前会话。</li>
</ul>
</blockquote>
<h2 id="最简流程"><a href="#最简流程" class="headerlink" title="最简流程"></a>最简流程</h2><ol>
<li>新建会话<code>tmux new -s my_session</code>。</li>
<li>在 Tmux 窗口运行所需的程序。</li>
<li>按下快捷键<code>Ctrl+b d</code>将会话分离。</li>
<li>下次使用时，重新连接到会话<code>tmux attach-session -t my_session</code>。</li>
</ol>
<h2 id="窗格操作"><a href="#窗格操作" class="headerlink" title="窗格操作"></a>窗格操作</h2><h3 id="划分窗格"><a href="#划分窗格" class="headerlink" title="划分窗格"></a>划分窗格</h3><p><code>tmux split-window</code>命令用来划分窗格。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 划分上下两个窗格</span></span><br><span class="line">$ tmux split-window</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分左右两个窗格</span></span><br><span class="line">$ tmux split-window -h</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><p><code>tmux select-pane</code>命令用来移动光标位置。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 光标切换到上方窗格</span></span><br><span class="line">$ tmux select-pane -U</span><br><span class="line"></span><br><span class="line"><span class="comment"># 光标切换到下方窗格</span></span><br><span class="line">$ tmux select-pane -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 光标切换到左边窗格</span></span><br><span class="line">$ tmux select-pane -L</span><br><span class="line"></span><br><span class="line"><span class="comment"># 光标切换到右边窗格</span></span><br><span class="line">$ tmux select-pane -R</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="交换窗格位置"><a href="#交换窗格位置" class="headerlink" title="交换窗格位置"></a>交换窗格位置</h3><p><code>tmux swap-pane</code>命令用来交换窗格位置。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前窗格上移</span></span><br><span class="line">$ tmux swap-pane -U</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前窗格下移</span></span><br><span class="line">$ tmux swap-pane -D</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="窗格快捷键"><a href="#窗格快捷键" class="headerlink" title="窗格快捷键"></a>窗格快捷键</h3><p>下面是一些窗格操作的快捷键。</p>
<blockquote>
<ul>
<li><code>Ctrl+b %</code>：划分左右两个窗格。</li>
<li><code>Ctrl+b &quot;</code>：划分上下两个窗格。</li>
<li><code>Ctrl+b &lt;arrow key&gt;</code>：光标切换到其他窗格。<code>&lt;arrow key&gt;</code>是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键<code>↓</code>。</li>
<li><code>Ctrl+b ;</code>：光标切换到上一个窗格。</li>
<li><code>Ctrl+b o</code>：光标切换到下一个窗格。</li>
<li><code>Ctrl+b &#123;</code>：当前窗格与上一个窗格交换位置。</li>
<li><code>Ctrl+b &#125;</code>：当前窗格与下一个窗格交换位置。</li>
<li><code>Ctrl+b Ctrl+o</code>：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</li>
<li><code>Ctrl+b Alt+o</code>：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</li>
<li><code>Ctrl+b x</code>：关闭当前窗格。</li>
<li><code>Ctrl+b !</code>：将当前窗格拆分为一个独立窗口。</li>
<li><code>Ctrl+b z</code>：当前窗格全屏显示，再使用一次会变回原来大小。</li>
<li><code>Ctrl+b Ctrl+&lt;arrow key&gt;</code>：按箭头方向调整窗格大小。</li>
<li><code>Ctrl+b q</code>：显示窗格编号。</li>
</ul>
</blockquote>
<h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><p>除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口。</p>
<h3 id="新建窗口"><a href="#新建窗口" class="headerlink" title="新建窗口"></a>新建窗口</h3><p><code>tmux new-window</code>命令用来创建新窗口。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux new-window</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个指定名称的窗口</span></span><br><span class="line">$ tmux new-window -n &lt;window-name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h3><p><code>tmux select-window</code>命令用来切换窗口。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到指定编号的窗口</span></span><br><span class="line">$ tmux select-window -t &lt;window-number&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定名称的窗口</span></span><br><span class="line">$ tmux select-window -t &lt;window-name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="重命名窗口"><a href="#重命名窗口" class="headerlink" title="重命名窗口"></a>重命名窗口</h3><p><code>tmux rename-window</code>命令用于为当前窗口起名（或重命名）。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux rename-window &lt;new-name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="窗口快捷键"><a href="#窗口快捷键" class="headerlink" title="窗口快捷键"></a>窗口快捷键</h3><p>下面是一些窗口操作的快捷键。</p>
<blockquote>
<ul>
<li><code>Ctrl+b c</code>：创建一个新窗口，状态栏会显示多个窗口的信息。</li>
<li><code>Ctrl+b p</code>：切换到上一个窗口（按照状态栏上的顺序）。</li>
<li><code>Ctrl+b n</code>：切换到下一个窗口。</li>
<li><code>Ctrl+b &lt;number&gt;</code>：切换到指定编号的窗口，其中的<code>&lt;number&gt;</code>是状态栏上的窗口编号。</li>
<li><code>Ctrl+b w</code>：从列表中选择窗口。</li>
<li><code>Ctrl+b ,</code>：窗口重命名。</li>
</ul>
</blockquote>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p>下面是一些其他命令。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有快捷键，及其对应的 Tmux 命令</span></span><br><span class="line">$ tmux list-keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有 Tmux 命令及其参数</span></span><br><span class="line">$ tmux list-commands</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前所有 Tmux 会话的信息</span></span><br><span class="line">$ tmux info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载当前的 Tmux 配置</span></span><br><span class="line">$ tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="Ranger"><a href="#Ranger" class="headerlink" title="Ranger"></a>Ranger</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>官方解释：ranger是一个带有VI密钥绑定的控制台文件管理器。它提供了一个简洁美观的curses界面，并提供了目录层次结构视图。它配备了rifle，这是一种文件启动器，能够自动找出要用于何种文件类型的程序。</p>
<p>官房链接：<a href="https://github.com/ranger/ranger">ranger&#x2F;ranger: A VIM-inspired filemanager for the console (github.com)</a></p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>ubuntu 安装命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ranger</span><br></pre></td></tr></table></figure>

<p>最终在终端下输入ranger即可打开程序了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230523164316992.png" alt="image-20230523164316992"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>来进行光标的移动,来穿越在不同的文件夹中</p>
<p>使用<code>q</code>进行退出程序,使用<code>S</code>来进行当前光标所在的文件夹中(进入文件夹后终端下执行<code>exit</code>命令重新回到ranger程序当中去)</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用<code>ranger --copy-config=all</code>将在<code>~/.config/ranger</code>中生成一系列配置文件</p>
<ul>
<li>rc.conf 常用于设置选项和绑定快捷键.(最常用)</li>
<li>scope.sh 常用于设置文件的预览方式</li>
<li>rifle.conf 常用于设置使用那个软件来打开文件</li>
<li>commands.py python文件,增强和改进ranger的各种功能</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ranger --copy-config=all</span><br></pre></td></tr></table></figure>

<ul>
<li><code>rc.conf</code>-选项设置和快捷键</li>
<li><code>commands.py</code>-能通过<code>:</code>执行的命令</li>
<li><code>commands_full.py</code>-全套命令</li>
<li><code>rifle.conf</code>-指定不同类型的文件的默认打开程序</li>
<li><code>scope.conf</code>-负责各种文件预览</li>
</ul>
<p>注意：如果要使用<code>~/.config/ranger</code>目录下的配置生效，需要把<code>RANGER_LOAD_DEFAULT_RC</code>变量设置为<code>false</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export RANGER_LOAD_DEFAULT_RC=false&quot;</span>&gt;&gt;~/.bashrc</span><br><span class="line"></span><br><span class="line">zsh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export RANGER_LOAD_DEFAULT_RC=false&quot;</span>&gt;&gt;~/.zshrc</span><br></pre></td></tr></table></figure>



<blockquote>
<p>可选配置(推荐)</p>
</blockquote>
<p>修改配置文件<code>~/.config/ranger/rc.conf</code></p>
<ul>
<li>显示边框<code>set draw_borders both</code></li>
<li>显示序号<code>set line_numbers true</code></li>
<li>序号从1开始<code>set one_indexed true</code></li>
</ul>
<h2 id="配置图标"><a href="#配置图标" class="headerlink" title="配置图标"></a>配置图标</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;default_linemode devicons&quot;</span> &gt;&gt; <span class="variable">$HOME</span>/.config/ranger/rc.conf</span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230523171348133.png" alt="image-20230523171348133"></p>
<h4 id="配置文本编辑器"><a href="#配置文本编辑器" class="headerlink" title="配置文本编辑器"></a>配置文本编辑器</h4><p>设置默认为nvim</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> EDITOR=/usr/bin/nvim &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="comment"># zsh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> EDITOR=/usr/bin/nvim &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h2 id="文件管理器操作"><a href="#文件管理器操作" class="headerlink" title="文件管理器操作"></a>文件管理器操作</h2><table>
<thead>
<tr>
<th>文件管理器操作</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>h</code></td>
<td>返回上一层</td>
</tr>
<tr>
<td><code>l</code></td>
<td>进入文件</td>
</tr>
<tr>
<td><code>j</code></td>
<td>向下</td>
</tr>
<tr>
<td><code>k</code></td>
<td>向上</td>
</tr>
<tr>
<td><code>Enter</code></td>
<td>打开文件</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出</td>
</tr>
</tbody></table>
<h2 id="获得帮助"><a href="#获得帮助" class="headerlink" title="获得帮助"></a>获得帮助</h2><p>您可以在使用Ranger时获得帮助</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>m</code></td>
<td>打开护林员的手册页</td>
</tr>
<tr>
<td><code>k</code></td>
<td>打开键绑定列表</td>
</tr>
<tr>
<td><code>c</code></td>
<td>打开可用命令和描述的列表</td>
</tr>
<tr>
<td><code>s</code></td>
<td>打开设置及其当前值的列表 |</td>
</tr>
</tbody></table>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>dD</code> 或者 <code>F8</code></td>
<td>删除条目（文件或者文件夹），或者 <code>:</code> + <code>delete</code>。</td>
</tr>
<tr>
<td><code>DD</code></td>
<td>将条目移动到回收站里。</td>
</tr>
</tbody></table>
<h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>F7</code></td>
<td>新建文件夹，等同于 <code>:mkdir </code>。</td>
</tr>
<tr>
<td><code>INSERT</code></td>
<td>新建文件，等同于 <code>:touch </code>。</td>
</tr>
</tbody></table>
<h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>cw</code></td>
<td>重命名（含后缀名）</td>
</tr>
<tr>
<td><code>I</code></td>
<td>重命名，光标在最前</td>
</tr>
<tr>
<td><code>A</code></td>
<td>重命名，光标在最后（含后缀名）</td>
</tr>
<tr>
<td><code>a</code></td>
<td>重命名，光标在最后（不含后缀名）</td>
</tr>
</tbody></table>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>yy</code> 或者 <code>F5</code></td>
<td>复制</td>
</tr>
<tr>
<td><code>ya</code></td>
<td><code>add</code> 模式，添加光标处文件到复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td><code>yr</code></td>
<td><code>remove</code> 模式，从复制队列中移除光标处文件（文件夹无效）。</td>
</tr>
<tr>
<td><code>yt</code></td>
<td><code>toggle</code> 模式，切换光标处文件是否在复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td><code>yk</code></td>
<td>将光标处文件和上一文件添加到复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td><code>yj</code></td>
<td>将光标处文件和下一文件添加到复制队列中（文件夹无效）。</td>
</tr>
<tr>
<td><code>ygg</code></td>
<td>将光标处到顶端的所有文件添加到复制队列中（文件夹无效）</td>
</tr>
<tr>
<td><code>yG</code></td>
<td>将光标处到底端的所有文件添加到复制队列中（文件夹无效）</td>
</tr>
</tbody></table>
<h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>dd</code> 或者 <code>F6</code></td>
<td>剪切</td>
</tr>
<tr>
<td><code>da</code></td>
<td><code>add</code> 模式，同复制。</td>
</tr>
<tr>
<td><code>dr</code></td>
<td><code>remove</code> 模式，同复制。</td>
</tr>
<tr>
<td><code>dt</code></td>
<td><code>toggle</code> 模式，同复制。</td>
</tr>
<tr>
<td><code>dk</code></td>
<td>同复制</td>
</tr>
<tr>
<td><code>dj</code></td>
<td>同复制</td>
</tr>
<tr>
<td><code>dgg</code></td>
<td>同复制</td>
</tr>
<tr>
<td><code>dG</code></td>
<td>同复制</td>
</tr>
<tr>
<td><code>ud</code> 或者 <code>uy</code></td>
<td>取消剪切</td>
</tr>
</tbody></table>
<h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>pp</code></td>
<td>粘贴，默认 <code>append</code> 模式</td>
</tr>
<tr>
<td><code>pP</code></td>
<td><code>append</code> 模式，如果该目录中有同名条目，则在条目后面加上 <code>_</code>、<code>_0</code>、<code>_1</code>……。如果条目是文件，则在文件后缀名后加入。</td>
</tr>
<tr>
<td><code>po</code></td>
<td><code>overwrite</code> 模式，如果该目录中有同名条目，则覆盖原来的条目。</td>
</tr>
<tr>
<td><code>pO</code></td>
<td><code>append</code> 模式 + <code>overwrite</code> 模式。</td>
</tr>
<tr>
<td><code>pl</code></td>
<td>粘贴为符号链接，不在状态栏显示目标条目的相对路径。</td>
</tr>
<tr>
<td><code>pL</code></td>
<td>粘贴为符号链接（相对路径），在状态栏显示目标条目的相对路径。</td>
</tr>
<tr>
<td><code>phl</code></td>
<td>粘贴为硬链接</td>
</tr>
<tr>
<td><code>pht</code></td>
<td>粘贴为硬链接的子目录（hardlinked subtree）</td>
</tr>
</tbody></table>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>/</code></td>
<td>打开搜索框，输入要搜索的字符串，回车后开始搜索。</td>
</tr>
<tr>
<td><code>f</code></td>
<td>查找，等同于运行满足条件的文件或者打开满足条件的文件夹。</td>
</tr>
<tr>
<td><code>zf</code></td>
<td>与命令行 <code>filter</code> 作用一样，只显示符合条件的条目，区分大小写。</td>
</tr>
<tr>
<td><code>n</code> <code>N</code></td>
<td>查找下一个搜索结果 查找上一个搜索结果</td>
</tr>
<tr>
<td><code>c</code> + <code>对应字母</code></td>
<td>通过对应属性依次遍历，如：<code>ca</code>：通过 <code>atime</code>属性依次遍历<code>cc</code>：通过 <code>ctime</code> 属性依次遍历<code>ci</code>：通过 <code>mimetype</code> 属性依次遍历<code>cm</code>：通过 <code>mtime</code> 属性依次遍历<code>cs</code>：通过 <code>size</code> 属性依次遍历<code>ct</code>：通过 <code>tag</code> 属性依次遍历</td>
</tr>
</tbody></table>
<h3 id="相关插件"><a href="#相关插件" class="headerlink" title="相关插件"></a>相关插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu</span><br><span class="line">sudo apt-get install caca-utils <span class="comment"># img2txt 图片</span></span><br><span class="line">sudo apt-get install highlight  <span class="comment"># 代码高亮</span></span><br><span class="line">sudo apt-get install atool　    <span class="comment"># 存档预览</span></span><br><span class="line">sudo apt-get install w3m        <span class="comment"># html页面预览</span></span><br><span class="line">sudo apt-get install mediainfo  <span class="comment"># 多媒体文件预览</span></span><br><span class="line">sudo apt-get install catdoc     <span class="comment"># doc预览</span></span><br><span class="line">sudo apt-get install docx2txt   <span class="comment"># docx预览</span></span><br><span class="line">sudo apt-get install xlsx2csv   <span class="comment"># xlsx预览</span></span><br></pre></td></tr></table></figure>





<h1 id="LazyGit"><a href="#LazyGit" class="headerlink" title="LazyGit"></a>LazyGit</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>官方解释：git命令的简单终端UI，使用gocui库在Go中编写。</p>
<p>官方链接：<a href="https://github.com/jesseduffield/lazygit">jesseduffield&#x2F;lazygit: simple terminal UI for git commands (github.com)</a></p>
<h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><h5 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LAZYGIT_VERSION=$(curl -s <span class="string">&quot;https://api.github.com/repos/jesseduffield/lazygit/releases/latest&quot;</span> | grep -Po <span class="string">&#x27;&quot;tag_name&quot;: &quot;v\K[^&quot;]*&#x27;</span>)</span><br><span class="line">curl -Lo lazygit.tar.gz <span class="string">&quot;https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_<span class="variable">$&#123;LAZYGIT_VERSION&#125;</span>_Linux_x86_64.tar.gz&quot;</span></span><br><span class="line">tar xf lazygit.tar.gz lazygit</span><br><span class="line">sudo install lazygit /usr/local/bin</span><br></pre></td></tr></table></figure>

<p>执行<code>lazygit</code>即可启动</p>
<p>可以添加别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias lg=&#x27;lazygit&#x27;&quot;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<p><strong>效果</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Returntmp/blog-image@main/blog/image-20230523222702767.png" alt="image-20230523222702767"></p>
<p>可以使用数字键或是<code>tab</code>或是<code>h</code>和<code>l</code>切换标签</p>
<p>之后在对应tab中使用使用<code>?</code>查看帮助文档学习相应操作</p>
<p>参考链接：</p>
<blockquote>
<p><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">https://www.ruanyifeng.com/blog/2019/10/tmux.html</a></p>
<p><a href="https://www.zssnp.top/2021/06/03/ranger/#post-comment">https://www.zssnp.top/2021/06/03/ranger/#post-comment</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>env</tag>
      </tags>
  </entry>
</search>
